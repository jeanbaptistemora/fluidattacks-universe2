stages:
  - build
  - test
  - analytics
  - analytics-upload
  - mr-test
  - deploy
  - postdeploy
  - rotation

.in_dev_branch: &in_dev_branch
  except:
    refs:
      - master
      - triggers
      - schedules

.in_dev_and_master_branch: &in_dev_and_master_branch
  except:
    refs:
      - triggers
      - schedules

.in_master_branch: &in_master_branch
  only:
    refs:
      - master
  except:
    refs:
      - triggers
      - schedules

.in_schedules: &in_schedules
  only:
    refs:
      - schedules

.in_schedule_deploy_nix_docker_images: &in_schedule_deploy_nix_docker_images
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_DEPLOY_NIX_DOCKER_IMAGES

.in_schedule_nightly_build: &in_schedule_nightly_build
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_NIGHTLY_BUILD

.in_schedule_user_provision_rotate_keys: &in_schedule_user_provision_rotate_keys
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_USER_PROVISION_ROTATE_KEYS

.with_nix: &with_nix
  tags: [autoscaling]
  image: "${CI_REGISTRY_IMAGE}/nix:${CI_JOB_NAME}"
  needs: []
  script:
    - ./build.sh "${CI_JOB_NAME% *}"
  interruptible: true

.with_nix_serial: &with_nix_serial
  image: "${CI_REGISTRY_IMAGE}/nix:${CI_JOB_NAME}"
  tags: [autoscaling]
  script:
    - ./build.sh "${CI_JOB_NAME% *}"

build_nix_caches:
  <<: *with_nix
  <<: *in_schedule_deploy_nix_docker_images
  tags: [autoscaling-large]
  image: nixos/nix:2.3
  stage: build
  before_script:
    - apk add --no-cache bash
  parallel: 31
  interruptible: false

analytics_formstack:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_FORMSTACK]
  interruptible: false

analytics_dynamodb:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_DYNAMODB]
  interruptible: false

analytics_services_toe:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_CONTINUOUS_TOE]
  interruptible: false

analytics_infrastructure:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_INFRASTRUCTURE]
  interruptible: false

analytics_intercom:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_INTERCOM]
  interruptible: false

analytics_mandrill:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_MANDRILL]
  interruptible: false

analytics_gitlab:
  <<: *with_nix
  tags: [autoscaling]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_GITLAB]
  interruptible: false

analytics_timedoctor:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_TIMEDOCTOR]
  interruptible: false

analytics_zoho:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_ZOHO]
  interruptible: false

analytics_git_process:
  <<: *with_nix_serial
  image: "${CI_REGISTRY_IMAGE}/nix:analytics_git_process"
  tags: [autoscaling-analytics]
  stage: analytics
  artifacts:
    paths:
      - artifacts/
    when: always
    expire_in: 1 day
  parallel: 50
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_GIT_PARALLEL]
  interruptible: false

analytics_git_upload:
  <<: *with_nix_serial
  tags: [autoscaling-analytics]
  stage: analytics-upload
  artifacts:
    paths:
      - artifacts/
    when: always
    expire_in: 1 day
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_GIT_PARALLEL]
  interruptible: false

analytics_timedoctor_refresh_token:
  <<: *with_nix
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_TIMEDOCTOR_REFRESH_TOKEN]
  interruptible: false

analytics_timedoctor_backup:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_BACKUP_ANALYTICS_TIMEDOCTOR]
  interruptible: false

analytics_services_repositories_cache:
  <<: *with_nix
  tags: [autoscaling-analytics]
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_SERVICES_REPOSITORIES_CACHE]
  interruptible: false



apply_infra_monolith:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy



apply_infra_autoscaling_ci:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy



apply_infra_dns:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_config_autoscaling_ci:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_infra_analytics:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_infra_aws_sso:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_infra_fluid_vpc:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_infra_secret_management:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_infra_certificates:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_asserts_dev:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_asserts_dev:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_asserts_prod:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_asserts_prod:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_services_dev:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_services_dev:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_services_prod:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_services_prod:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_integrates_dev:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_integrates_dev:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_integrates_prod:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_integrates_prod:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_web_dev:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_web_dev:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_web_prod:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_web_prod:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

test_user_provision_serves:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

apply_user_provision_serves:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

apply_rotate_keys_user_provision_asserts_dev:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_asserts_prod:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_services_dev:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_services_prod:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_integrates_dev:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_integrates_prod:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_web_dev:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_web_prod:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

apply_rotate_keys_user_provision_serves:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

test_lint_code:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

test_commit_msg:
  <<: *with_nix
  <<: *in_dev_branch
  stage: test

reviews:
  <<: *with_nix
  stage: mr-test
  only: [merge_requests]

test_forces_new:
  tags: [autoscaling]
  stage: postdeploy
  needs: []
  image:
    name: fluidattacks/forces:new
    entrypoint: [""]
  script:
    - forces --token "${FORCES_API_TOKEN}" --strict -vv
  interruptible: true
  allow_failure: true

send_new_release_email:
  <<: *with_nix
  <<: *in_master_branch
  stage: postdeploy

fluidasserts_post:
  tags: [autoscaling]
  stage: postdeploy
  image: fluidattacks/asserts
  script:
    - asserts asserts/exploit.py
  only:
    - master
  except:
    - schedules
