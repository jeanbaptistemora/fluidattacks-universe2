[mypy]
# The current python implementation have some missing generics.
# For example asyncio.Queue is not generic but mypy thinkgs it is.
#
# Disabling because doing this is a runtime syntax error:
#   var: asyncio.Queue[str]
disallow_any_generics = false
# Some third party libraries have untyped classes.
#
# Disabling to avoid doing:
#   class SkimsClass(ThirdPartyClassWithoutTyping)  # type: ignore
disallow_subclassing_any = false
# Some third party libraries are untyped.
#
# Disabling them to avoid doing:
#   third_party_function()  # type: ignore
disallow_untyped_calls = false
# Some third party libraries are untyped.
#
# Disabling to avoid doing:
#   @third_party_lib_decorator  # type: ignore
disallow_untyped_decorators = false
# Sometimes mypy do not find libraries and that's not an error condition
# as long as the runtime interpreter does
explicit_package_bases = true
follow_imports = normal
ignore_missing_imports = true
namespace_packages = true
strict = true

warn_return_any = false


[mypy-batch.repositories]
ignore_errors = true

[mypy-core.scan]
ignore_errors = true

[mypy-lib_root.f052.*]
ignore_errors = true

[mypy-lib_root.f237.*]
ignore_errors = true

[mypy-lib_root.f134.*]
ignore_errors = true

[mypy-lib_root.f096.*]
ignore_errors = true

[mypy-lib_root.f035.*]
ignore_errors = true

[mypy-lib_root.f034.*]
ignore_errors = true

[mypy-lib_root.f009.*]
ignore_errors = true

[mypy-lib_root.analyze]
ignore_errors = true

[mypy-sast.*]
ignore_errors = true

[mypy-sast_symbolic_evaluation.*]
ignore_errors = true

[mypy-lib_sast.*]
ignore_errors = true

[mypy-symbolic_eval.*]
ignore_errors = true

[mypy-sast_transformations.*]
ignore_errors = true

[mypy-syntax_graph.*]
ignore_errors = true

[mypy-syntax_cfg.*]
ignore_errors = true

[mypy-sast_syntax_readers.*]
ignore_errors = true

[mypy-lib_ssl.*]
ignore_errors = true
