from syntax_cfg.dispatchers import (
    connect_to_block,
    connect_to_declarations,
    connect_to_next,
    end_node,
    if_node,
    method_invocation_node,
    multi_path,
    step_by_step,
    variable_declaration_node,
)
from syntax_cfg.types import (
    Dispatcher,
    Dispatchers,
)

DISPATCHERS: Dispatchers = (
    Dispatcher(
        applicable_types={
            "Class",
            "ConstructorDeclaration",
            "DoStatement",
            "ForEachStatement",
            "ForStatement",
            "ElseClause",
            "InterfaceDeclaration",
            "LambdaExpression",
            "MethodDeclaration",
            "Namespace",
            "SwitchStatement",
            "UsingStatement",
            "WhileStatement",
        },
        cfg_builder=connect_to_block.build,
    ),
    Dispatcher(
        applicable_types={
            "ArgumentList",
            "BinaryOperation",
            "DeclarationBlock",
            "File",
            "FileNamespace",
            "PackageDeclaration",
            "TryStatement",
            "SwitchBody",
            "SwitchSection",
            "ClassBody",
        },
        cfg_builder=multi_path.build,
    ),
    Dispatcher(
        applicable_types={
            "ExecutionBlock",
            "ParameterList",
            "StatementBlock",
        },
        cfg_builder=step_by_step.build,
    ),
    Dispatcher(
        applicable_types={
            "If",
        },
        cfg_builder=if_node.build,
    ),
    Dispatcher(
        applicable_types={
            "MethodInvocation",
        },
        cfg_builder=method_invocation_node.build,
    ),
    Dispatcher(
        applicable_types={
            "Annotation",
            "ArrayInitializer",
            "ArrowExpressionClause",
            "Assignment",
            "AwaitExpression",
            "Break",
            "BlocklessMethodDeclaration",
            "CatchClause",
            "CatchDeclaration",
            "Continue",
            "Comment",
            "Debugger",
            "ElementAccess",
            "ExpressionStatement",
            "FieldAccess",
            "FieldDeclaration",
            "FinallyClause",
            "FunctionBody",
            "IdentifierList",
            "InitializedIdentifier",
            "JsxElement",
            "LexicalDeclaration",
            "Literal",
            "MemberAccess",
            "MethodSignature",
            "MissingNode",
            "NewExpression",
            "Object",
            "ObjectCreation",
            "ParenthesizedExpression",
            "PostfixUnaryExpression",
            "PropertyDeclaration",
            "ReservedWord",
            "RestPattern",
            "Resource",
            "Selector",
            "SymbolLookup",
            "TernaryOperation",
            "This",
            "ThrowStatement",
            "UnaryExpression",
            "UpdateExpression",
            "Yield",
        },
        cfg_builder=connect_to_next.build,
    ),
    Dispatcher(
        applicable_types={
            "VariableDeclaration",
        },
        cfg_builder=variable_declaration_node.build,
    ),
    Dispatcher(
        applicable_types={
            "Return",
            "Export",
        },
        cfg_builder=connect_to_declarations.build,
    ),
    Dispatcher(
        applicable_types={
            "Import",
        },
        cfg_builder=end_node.build,
    ),
)
