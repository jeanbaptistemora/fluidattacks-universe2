finding,kind,what,where,cwe,stream,title,description,snippet,method
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs,13,89,skims,001. SQL injection - C Sharp SQL API,"Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures.
 in namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs","
   3 | using WebApplication1.Controllers;
   4 |
   5 | namespace WebApplicationDotNetCore.Controllers
   6 | {
   7 |     public class RSPEC3649SQLiNoncompliant
   8 |     {
   9 |         public IActionResult Authenticate(UserAccountContext context, string user)
  10 |         {
  11 |             string insecure_query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'"";
  12 |
> 13 |             insecure_obj = new SqlCommand(insecure_query);
  14 |
  15 |             insecure_methd = sqcontext.Database.ExecuteSqlCommand(insecure_query);
  16 |
  17 |             string secure_query = ""UPDATE Sales.Store SET Demographics = @demographics "" + ""WHERE CustomerID = @ID;"";
  18 |
  19 |             secure_obj = new SqlCommand(secure_query);
  20 |
  21 |             secure_methd = sqcontext.Database.ExecuteSqlCommand(secure_query);
  22 |         }
  23 |     }
     ^ Col 0
",c_sharp.c_sharp_sql_injection
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs,15,89,skims,001. SQL injection - C Sharp SQL API,"Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures.
 in namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs","
   4 |
   5 | namespace WebApplicationDotNetCore.Controllers
   6 | {
   7 |     public class RSPEC3649SQLiNoncompliant
   8 |     {
   9 |         public IActionResult Authenticate(UserAccountContext context, string user)
  10 |         {
  11 |             string insecure_query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'"";
  12 |
  13 |             insecure_obj = new SqlCommand(insecure_query);
  14 |
> 15 |             insecure_methd = sqcontext.Database.ExecuteSqlCommand(insecure_query);
  16 |
  17 |             string secure_query = ""UPDATE Sales.Store SET Demographics = @demographics "" + ""WHERE CustomerID = @ID;"";
  18 |
  19 |             secure_obj = new SqlCommand(secure_query);
  20 |
  21 |             secure_methd = sqcontext.Database.ExecuteSqlCommand(secure_query);
  22 |         }
  23 |     }
  24 | }
     ^ Col 0
",c_sharp.c_sharp_sql_injection
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_unsafe_sql.cs,18,89,skims,001. SQL injection - C Sharp SQL API,Use of attacker controlled parameters for querying the data base in namespace/skims/test/data/lib_root/f001/c_sharp_unsafe_sql.cs,"
   1 | ing TestCaseSupport;
   2 | ing System;
   3 | ing System.Data.SqlClient;
   4 | ing System.Data;
   5 | ing System.Web;
   6 |
   7 |
   8 | mespace testcase
   9 |
  10 |   class testcasef001
  11 |   {
  12 |       public override void Bad(HttpRequest req, HttpResponse resp)
  13 |       {
  14 |           SqlDataReader dr = command.ExecuteReader();
  15 |           string data = dr.GetString(1);
  16 |           string[] names = data.Split('-');
  17 |           badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
> 18 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  19 |       }
  20 |   }
  21 |
     ^ Col 2
",c_sharp.c_sharp_sql_user_params
