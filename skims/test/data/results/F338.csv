finding,kind,what,where,cwe,stream,title,description,snippet,method
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,12,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | amespace Controllers
   2 |
   3 |    public class Encrypt
   4 |    {
   5 |        public static void Process(string password)
   6 |        {
   7 |            var salt = Encoding.UTF8.GetBytes(""salt"");
   8 |            var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
  10 |            var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
> 12 |            var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |        }
  14 |    }
  15 |
     ^ Col 1
",c_sharp.csharp_check_hashes_salt
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,8,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | espace Controllers
   2 |
   3 |  public class Encrypt
   4 |  {
   5 |      public static void Process(string password)
   6 |      {
   7 |          var salt = Encoding.UTF8.GetBytes(""salt"");
>  8 |          var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
  10 |          var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
  12 |          var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |      }
  14 |  }
  15 |
     ^ Col 3
",c_sharp.csharp_check_hashes_salt
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,10,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | mespace Controllers
   2 |
   3 |   public class Encrypt
   4 |   {
   5 |       public static void Process(string password)
   6 |       {
   7 |           var salt = Encoding.UTF8.GetBytes(""salt"");
   8 |           var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
> 10 |           var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
  12 |           var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |       }
  14 |   }
  15 |
     ^ Col 2
",c_sharp.csharp_check_hashes_salt
F338,lines,namespace/skims/test/data/lib_root/f338/javascript_salt_is_hardcoded.js,13,749,skims,338. Insecure service configuration - Salt,"The salt is a string that is hardcoded into the function. Every time the function is run, the same salt will be used, which could be a security issue if an attacker were to discover the salt.
 in namespace/skims/test/data/lib_root/f338/javascript_salt_is_hardcoded.js","
   1 | import { createHash } from ""crypto"";
   2 |
   3 | function hashPasswordSecure(password) {
   4 |   const salt = crypto.randomBytes(16).toString(""hex"");
   5 |   const hash = crypto.createHash(""sha256"");
   6 |   hash.update(password + salt);
   7 |   return salt + hash.digest(""hex"");
   8 | }
   9 |
  10 | function hashPassword(password) {
  11 |   const salt = ""HARDCODED_SALT"";
  12 |   const hash = createHash(""sha256"");
> 13 |   hash.update(password + salt);
  14 |   return hash.digest(""hex"");
  15 | }
     ^ Col 0
",javascript.js_salt_is_harcoded
F338,lines,namespace/skims/test/data/lib_root/f338/typescript_salt_is_hardcoded.ts,14,749,skims,338. Insecure service configuration - Salt,"The salt is a string that is hardcoded into the function. Every time the function is run, the same salt will be used, which could be a security issue if an attacker were to discover the salt.
 in namespace/skims/test/data/lib_root/f338/typescript_salt_is_hardcoded.ts","
   1 | import * as crypto from 'crypto';
   2 |
   3 | function hashPassword(password: string): string {
   4 |   const salt = crypto.randomBytes(16).toString('hex');
   5 |   const hash = crypto.createHash('sha256');
   6 |   hash.update(password + salt);
   7 |   return salt + hash.digest('hex');
   8 | }
   9 |
  10 |
  11 | function hashPasswordHardcoded(password: string): string {
  12 |   const salt = ""HARDCODED_SALT"";
  13 |   const hash = crypto.createHash('sha256');
> 14 |   hash.update(password + salt);
  15 |   return hash.digest('hex');
  16 | }
     ^ Col 0
",typescript.ts_salt_is_harcoded
