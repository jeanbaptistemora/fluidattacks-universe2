finding,kind,what,where,cwe,stream,title,description,snippet,method
F128,lines,namespace/skims/test/data/lib_root/f128/ts_http_only.ts,18,1004,skims,128. Insecurely generated cookies - HttpOnly,cookieService is missing HttpOnly in namespace/skims/test/data/lib_root/f128/ts_http_only.ts,"
   2 | import { ActivatedRoute} from '@angular/router';
   3 | import { CookieService } from 'ngx-cookie-service';
   4 |
   5 | export const SESSION_OBJECT_ID: string = 'OficinaSession';
   6 |
   7 | export class AsistenciaComponent implements OnInit {
   8 |   public token: string;
   9 |
  10 |   constructor(
  11 |     private route: ActivatedRoute,
  12 |     private cookieService: CookieService,
  13 |   ){}
  14 |
  15 |   ngOnInit(): void {
  16 |     this.route.params.subscribe(params => {
  17 |       this.token = params.token;
> 18 |       this.cookieService.set(SESSION_OBJECT_ID, this.token);
  19 |     });
  20 |   }
  21 |
  22 | }
     ^ Col 0
",typescript.typescript_insecure_cookie
F091,lines,namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs,14,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs","
   4 | public class RSPEC5145LogInjectionLog4NetNoncompliantController : Controller
   5 | {
   6 |     public void LogSomething(HttpRequest id)
   7 |     {
   8 |         //insecure
   9 |         private static readonly log4net.ILog _logger = log4net.LogManager.GetLogger();
  10 |         _logger.Info(id);
  11 |
  12 |         //insecure
  13 |         var logger = new DBLogger();
> 14 |         logger.Log(id);
  15 |
  16 |         //insecure
  17 |         var log = new FileLogger();
  18 |         log.Debug(id);
  19 |
  20 |         //secure
  21 |         private static readonly log4net.ILog sec_log = log4net.LogManager.GetLogger();
  22 |         id_safe = id.Replace('\n', '_').Replace('\r', '_').Replace('\t', '_');
  23 |         sec_log.Info(id_safe);
  24 |     }
     ^ Col 0
",c_sharp.c_sharp_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs,18,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs","
   5 | {
   6 |     public void LogSomething(HttpRequest id)
   7 |     {
   8 |         //insecure
   9 |         private static readonly log4net.ILog _logger = log4net.LogManager.GetLogger();
  10 |         _logger.Info(id);
  11 |
  12 |         //insecure
  13 |         var logger = new DBLogger();
  14 |         logger.Log(id);
  15 |
  16 |         //insecure
  17 |         var log = new FileLogger();
> 18 |         log.Debug(id);
  19 |
  20 |         //secure
  21 |         private static readonly log4net.ILog sec_log = log4net.LogManager.GetLogger();
  22 |         id_safe = id.Replace('\n', '_').Replace('\r', '_').Replace('\t', '_');
  23 |         sec_log.Info(id_safe);
  24 |     }
  25 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs,10,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/c_sharp_log_injection.cs","
   1 | using System;
   2 | using Microsoft.AspNetCore.Mvc;
   3 |
   4 | public class RSPEC5145LogInjectionLog4NetNoncompliantController : Controller
   5 | {
   6 |     public void LogSomething(HttpRequest id)
   7 |     {
   8 |         //insecure
   9 |         private static readonly log4net.ILog _logger = log4net.LogManager.GetLogger();
> 10 |         _logger.Info(id);
  11 |
  12 |         //insecure
  13 |         var logger = new DBLogger();
  14 |         logger.Log(id);
  15 |
  16 |         //insecure
  17 |         var log = new FileLogger();
  18 |         log.Debug(id);
  19 |
  20 |         //secure
  21 |         private static readonly log4net.ILog sec_log = log4net.LogManager.GetLogger();
     ^ Col 0
",c_sharp.c_sharp_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/java_log_injection.java,9,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/java_log_injection.java","
   1 | public class Test{
   2 |     public void insecure1(HttpServletRequest req, HttpServletResponse resp) {
   3 |         String param1 = req.getParameter(""param"");
   4 |         Logger.info(""Param1: "" + param1); // Insecure
   5 |     }
   6 |
   7 |     public void insecure2(HttpServletRequest request){
   8 |   param = request.getHeader(""header"");
>  9 |   log.debug(""Dangerous"" + param); // Insecure
  10 |  }
  11 |
  12 |     @Path(""/subscription/list/{collectorId}"")
  13 |  public List<Affiliation> insecure3(@PathParam(value = ""collectorId"") String collectorId) {
  14 |   log.debug(""Something dangerous:"" + collectorId);
  15 |  }
  16 |
  17 |     public void safe(HttpServletRequest req) {
  18 |         String param2 = req.getParameter(""param2"");
  19 |         param2 = param2.replaceAll(""[\n\r\t]"", ""_""); //Sanitize parameter
  20 |         logger.info(""Param1: "" + param2); //Safe
  21 |     }
     ^ Col 0
",java.java_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/java_log_injection.java,4,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/java_log_injection.java","
   1 | public class Test{
   2 |     public void insecure1(HttpServletRequest req, HttpServletResponse resp) {
   3 |         String param1 = req.getParameter(""param"");
>  4 |         Logger.info(""Param1: "" + param1); // Insecure
   5 |     }
   6 |
   7 |     public void insecure2(HttpServletRequest request){
   8 |   param = request.getHeader(""header"");
   9 |   log.debug(""Dangerous"" + param); // Insecure
  10 |  }
  11 |
  12 |     @Path(""/subscription/list/{collectorId}"")
  13 |  public List<Affiliation> insecure3(@PathParam(value = ""collectorId"") String collectorId) {
  14 |   log.debug(""Something dangerous:"" + collectorId);
  15 |  }
  16 |
  17 |     public void safe(HttpServletRequest req) {
  18 |         String param2 = req.getParameter(""param2"");
  19 |         param2 = param2.replaceAll(""[\n\r\t]"", ""_""); //Sanitize parameter
  20 |         logger.info(""Param1: "" + param2); //Safe
  21 |     }
     ^ Col 0
",java.java_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/java_log_injection.java,14,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/java_log_injection.java","
   2 |     public void insecure1(HttpServletRequest req, HttpServletResponse resp) {
   3 |         String param1 = req.getParameter(""param"");
   4 |         Logger.info(""Param1: "" + param1); // Insecure
   5 |     }
   6 |
   7 |     public void insecure2(HttpServletRequest request){
   8 |   param = request.getHeader(""header"");
   9 |   log.debug(""Dangerous"" + param); // Insecure
  10 |  }
  11 |
  12 |     @Path(""/subscription/list/{collectorId}"")
  13 |  public List<Affiliation> insecure3(@PathParam(value = ""collectorId"") String collectorId) {
> 14 |   log.debug(""Something dangerous:"" + collectorId);
  15 |  }
  16 |
  17 |     public void safe(HttpServletRequest req) {
  18 |         String param2 = req.getParameter(""param2"");
  19 |         param2 = param2.replaceAll(""[\n\r\t]"", ""_""); //Sanitize parameter
  20 |         logger.info(""Param1: "" + param2); //Safe
  21 |     }
  22 | }
     ^ Col 0
",java.java_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/js_log_injection.js,8,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/js_log_injection.js","
   1 | import { parse } from ""url"";
   2 |
   3 | function unsafe_log(req, _res) {
   4 |   const q = parse(req.url, true);
   5 |   const userName = q.query.username;
   6 |   // UNSAFE: Unsanitized user input
   7 |   Logger.info(userName);
>  8 |   log.info(userName);
   9 |
  10 |   // UNSAFE: Incorrectly sanitized user input
  11 |   const userName2 = userName.replace(/\f/g, """");
  12 |   console.info(userName2);
  13 | }
  14 |
  15 |
  16 |
  17 | function safe_log(req, res) {
  18 |   const q = parse(req.url, true);
  19 |   const username = q.query.username.replace(/\n|\r/g, """");
  20 |   // SAFE: Sanitized input from the user
  21 |   console.info(username);
     ^ Col 0
",javascript.javascript_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/js_log_injection.js,7,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/js_log_injection.js","
   1 | import { parse } from ""url"";
   2 |
   3 | function unsafe_log(req, _res) {
   4 |   const q = parse(req.url, true);
   5 |   const userName = q.query.username;
   6 |   // UNSAFE: Unsanitized user input
>  7 |   Logger.info(userName);
   8 |   log.info(userName);
   9 |
  10 |   // UNSAFE: Incorrectly sanitized user input
  11 |   const userName2 = userName.replace(/\f/g, """");
  12 |   console.info(userName2);
  13 | }
  14 |
  15 |
  16 |
  17 | function safe_log(req, res) {
  18 |   const q = parse(req.url, true);
  19 |   const username = q.query.username.replace(/\n|\r/g, """");
  20 |   // SAFE: Sanitized input from the user
  21 |   console.info(username);
     ^ Col 0
",javascript.javascript_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/js_log_injection.js,12,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/js_log_injection.js","
   2 |
   3 | function unsafe_log(req, _res) {
   4 |   const q = parse(req.url, true);
   5 |   const userName = q.query.username;
   6 |   // UNSAFE: Unsanitized user input
   7 |   Logger.info(userName);
   8 |   log.info(userName);
   9 |
  10 |   // UNSAFE: Incorrectly sanitized user input
  11 |   const userName2 = userName.replace(/\f/g, """");
> 12 |   console.info(userName2);
  13 | }
  14 |
  15 |
  16 |
  17 | function safe_log(req, res) {
  18 |   const q = parse(req.url, true);
  19 |   const username = q.query.username.replace(/\n|\r/g, """");
  20 |   // SAFE: Sanitized input from the user
  21 |   console.info(username);
  22 | }
     ^ Col 0
",javascript.javascript_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/ts_log_injection.ts,11,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/ts_log_injection.ts","
   1 | import { parse } from ""url"";
   2 | import {Logger, log} from ""logging.ts"";
   3 | import {HttpReq, HttpRes, ReqUrl} from ""types.ts"";
   4 |
   5 | function unsafe_log(req: HttpReq, res: HttpRes) {
   6 |   const q: ReqUrl = parse(req.url, true);
   7 |
   8 |   const userName: string = q.query.username;
   9 |   // UNSAFE: Unsanitized user input
  10 |   Logger.info(userName);
> 11 |   log.info(userName);
  12 |
  13 |   // UNSAFE: Incorrectly sanitized user input
  14 |   const userName2: string = q.query.username.replace(/\n|\f/g, """");
  15 |   console.info(userName2);
  16 | }
  17 |
  18 |
  19 |
  20 | function safe_log(req: HttpReq, res: HttpRes) {
  21 |   const q: ReqUrl = parse(req.url, true);
     ^ Col 0
",typescript.typescript_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/ts_log_injection.ts,10,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/ts_log_injection.ts","
   1 | import { parse } from ""url"";
   2 | import {Logger, log} from ""logging.ts"";
   3 | import {HttpReq, HttpRes, ReqUrl} from ""types.ts"";
   4 |
   5 | function unsafe_log(req: HttpReq, res: HttpRes) {
   6 |   const q: ReqUrl = parse(req.url, true);
   7 |
   8 |   const userName: string = q.query.username;
   9 |   // UNSAFE: Unsanitized user input
> 10 |   Logger.info(userName);
  11 |   log.info(userName);
  12 |
  13 |   // UNSAFE: Incorrectly sanitized user input
  14 |   const userName2: string = q.query.username.replace(/\n|\f/g, """");
  15 |   console.info(userName2);
  16 | }
  17 |
  18 |
  19 |
  20 | function safe_log(req: HttpReq, res: HttpRes) {
  21 |   const q: ReqUrl = parse(req.url, true);
     ^ Col 0
",typescript.typescript_insecure_logging
F091,lines,namespace/skims/test/data/lib_root/f091/ts_log_injection.ts,15,117,skims,091. Log injection,"The system logs entries that contain input from untrusted sources without properly validating, sanitizing or escaping their content.
 in namespace/skims/test/data/lib_root/f091/ts_log_injection.ts","
   5 | function unsafe_log(req: HttpReq, res: HttpRes) {
   6 |   const q: ReqUrl = parse(req.url, true);
   7 |
   8 |   const userName: string = q.query.username;
   9 |   // UNSAFE: Unsanitized user input
  10 |   Logger.info(userName);
  11 |   log.info(userName);
  12 |
  13 |   // UNSAFE: Incorrectly sanitized user input
  14 |   const userName2: string = q.query.username.replace(/\n|\f/g, """");
> 15 |   console.info(userName2);
  16 | }
  17 |
  18 |
  19 |
  20 | function safe_log(req: HttpReq, res: HttpRes) {
  21 |   const q: ReqUrl = parse(req.url, true);
  22 |   const username: string = q.query.username.replace(/\n|\r/g, """");
  23 |   // SAFE: Sanitized input from the user
  24 |   console.info(username);
  25 | }
     ^ Col 0
",typescript.typescript_insecure_logging
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,14,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,"
   4 | {
   5 |     public class Controllers
   6 |     {
   7 |         public void Configure(IApplicationBuilder app)
   8 |         {
   9 |             // Should report
  10 |
  11 |             var corsBuilder = new CorsPolicyBuilder();
  12 |             corsBuilder.AllowAnyHeader();
  13 |             corsBuilder.AllowAnyMethod();
> 14 |             corsBuilder.AllowAnyOrigin();
  15 |
  16 |             var policyBuilder = new CorsPolicyBuilder();
  17 |             var policy = policyBuilder
  18 |                 .AllowAnyOrigin()
  19 |                 .AllowAnyHeader()
  20 |                 .AllowAnyMethod()
  21 |                 .Build();
  22 |
  23 |             app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);
  24 |
     ^ Col 0
",c_sharp.csharp_insecure_cors
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,17,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,"
   7 |         public void Configure(IApplicationBuilder app)
   8 |         {
   9 |             // Should report
  10 |
  11 |             var corsBuilder = new CorsPolicyBuilder();
  12 |             corsBuilder.AllowAnyHeader();
  13 |             corsBuilder.AllowAnyMethod();
  14 |             corsBuilder.AllowAnyOrigin();
  15 |
  16 |             var policyBuilder = new CorsPolicyBuilder();
> 17 |             var policy = policyBuilder
  18 |                 .AllowAnyOrigin()
  19 |                 .AllowAnyHeader()
  20 |                 .AllowAnyMethod()
  21 |                 .Build();
  22 |
  23 |             app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);
  24 |
  25 |             app.UseCors( cors => cors
  26 |                 .AllowAnyMethod()
  27 |                 .AllowAnyOrigin());
     ^ Col 0
",c_sharp.csharp_insecure_cors
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,23,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,"
  13 |             corsBuilder.AllowAnyMethod();
  14 |             corsBuilder.AllowAnyOrigin();
  15 |
  16 |             var policyBuilder = new CorsPolicyBuilder();
  17 |             var policy = policyBuilder
  18 |                 .AllowAnyOrigin()
  19 |                 .AllowAnyHeader()
  20 |                 .AllowAnyMethod()
  21 |                 .Build();
  22 |
> 23 |             app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);
  24 |
  25 |             app.UseCors( cors => cors
  26 |                 .AllowAnyMethod()
  27 |                 .AllowAnyOrigin());
  28 |
  29 |
  30 |             // Should not report
  31 |             var SecCorsBuilder = new CorsPolicyBuilder();
  32 |             SecCorsBuilder.AllowAnyHeader();
  33 |             SecCorsBuilder.AllowAnyMethod();
     ^ Col 0
",c_sharp.csharp_insecure_cors
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,25,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors.cs,"
  15 |
  16 |             var policyBuilder = new CorsPolicyBuilder();
  17 |             var policy = policyBuilder
  18 |                 .AllowAnyOrigin()
  19 |                 .AllowAnyHeader()
  20 |                 .AllowAnyMethod()
  21 |                 .Build();
  22 |
  23 |             app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);
  24 |
> 25 |             app.UseCors( cors => cors
  26 |                 .AllowAnyMethod()
  27 |                 .AllowAnyOrigin());
  28 |
  29 |
  30 |             // Should not report
  31 |             var SecCorsBuilder = new CorsPolicyBuilder();
  32 |             SecCorsBuilder.AllowAnyHeader();
  33 |             SecCorsBuilder.AllowAnyMethod();
  34 |
  35 |             var SecPolicyBuilder = new CorsPolicyBuilder();
     ^ Col 0
",c_sharp.csharp_insecure_cors
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,13,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,"
   3 |
   4 | namespace AspNet5SQLite
   5 | {
   6 |     public class Startup
   7 |     {
   8 |         // Setting an insecure cors policy attribute
   9 |         public void ConfigureServices(IServiceCollection services)
  10 |         {
  11 |             var policy = new Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy();
  12 |             policy.Headers.Add(""*"");
> 13 |             policy.Origins.Add(""*"");
  14 |             policy.SupportsCredentials = true;
  15 |
  16 |         }
  17 |     }
  18 |
  19 |     public class Startup2
  20 |     {
  21 |         //Setting the insecure cors policy directly
  22 |         public void ConfigureServices(IServiceCollection services)
  23 |         {
     ^ Col 0
",c_sharp.csharp_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,26,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,"
  16 |         }
  17 |     }
  18 |
  19 |     public class Startup2
  20 |     {
  21 |         //Setting the insecure cors policy directly
  22 |         public void ConfigureServices(IServiceCollection services)
  23 |         {
  24 |             services.AddCors(options =>
  25 |             {
> 26 |                 options.AddPolicy(name: ""corsGlobalPolicy"",
  27 |                     builder =>
  28 |                     {
  29 |                         builder.WithOrigins(Configuration[""Origins:localdev""])
  30 |                             .AllowAnyOrigin()
  31 |                             .AllowAnyMethod();
  32 |                     });
  33 |             });
  34 |         }
  35 |
  36 |         public void ConfigureServices(IServiceCollection services)
     ^ Col 0
",c_sharp.csharp_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,40,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,"
  30 |                             .AllowAnyOrigin()
  31 |                             .AllowAnyMethod();
  32 |                     });
  33 |             });
  34 |         }
  35 |
  36 |         public void ConfigureServices(IServiceCollection services)
  37 |         {
  38 |             services.AddCors(c =>
  39 |             {
> 40 |                 c.AddPolicy(""AllowOrigin"", options => options.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin());
  41 |             });
  42 |         }
  43 |     }
  44 |
  45 |     //Enabling insecure cors policy via attribute
  46 |     [EnableCors(origins: ""*"", headers: ""*"", methods: ""*"")]
  47 |     public class ItemsController : ApiController
  48 |     {
  49 |         public HttpResponseMessage GetAll() {}
  50 |     }
     ^ Col 0
",c_sharp.csharp_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,46,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/c_sharp_insecure_cors_origin.cs,"
  31 |                             .AllowAnyMethod();
  32 |                     });
  33 |             });
  34 |         }
  35 |
  36 |         public void ConfigureServices(IServiceCollection services)
  37 |         {
  38 |             services.AddCors(c =>
  39 |             {
  40 |                 c.AddPolicy(""AllowOrigin"", options => options.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin());
  41 |             });
  42 |         }
  43 |     }
  44 |
  45 |     //Enabling insecure cors policy via attribute
> 46 |     [EnableCors(origins: ""*"", headers: ""*"", methods: ""*"")]
  47 |     public class ItemsController : ApiController
  48 |     {
  49 |         public HttpResponseMessage GetAll() {}
  50 |     }
  51 | }
     ^ Col 0
",c_sharp.csharp_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,13,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,"
   3 |
   4 |  private static final String ALL_ORIGINS = ""*"";
   5 |
   6 |  public WebFilter insecure1(){
   7 |   return (ServerWebExchange ctx, WebFilterChain chain)-> {
   8 |    ServerHttpRequest req = ctx.getRequest();
   9 |
  10 |    if (CorsUtils.isCorsRequest(request)){
  11 |     ServerHttpResponse req = ctx.getResponse();
  12 |     HttpHeaders headers = response.getHeaders();
> 13 |     headers.add(""Access-Control-Allow-Origin"", ALL_ORIGINS);  // Sensitive
  14 |    }
  15 |    return chain.filter(ctx);
  16 |   };
  17 |  }
  18 |
  19 |   public void insecure2(CorsRegistry registry) {
  20 |     registry.addMapping(""/**"").allowedOrigins(""*""); // Sensitive
  21 |   }
  22 |
  23 |  public void insecure3() {
     ^ Col 0
",java.java_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,20,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,"
  10 |    if (CorsUtils.isCorsRequest(request)){
  11 |     ServerHttpResponse req = ctx.getResponse();
  12 |     HttpHeaders headers = response.getHeaders();
  13 |     headers.add(""Access-Control-Allow-Origin"", ALL_ORIGINS);  // Sensitive
  14 |    }
  15 |    return chain.filter(ctx);
  16 |   };
  17 |  }
  18 |
  19 |   public void insecure2(CorsRegistry registry) {
> 20 |     registry.addMapping(""/**"").allowedOrigins(""*""); // Sensitive
  21 |   }
  22 |
  23 |  public void insecure3() {
  24 |     CorsConfiguration config = new CorsConfiguration();
  25 |   config.addAllowedOrigin(ALL_ORIGINS); // Sensitive
  26 |   }
  27 |
  28 |  public void secure() {
  29 |   String ALLOWED_ORIGIN = ""www.mytrustedorigin.com"";
  30 |     CorsConfiguration config = new CorsConfiguration();
     ^ Col 0
",java.java_insecure_cors_origin
F134,lines,namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,25,16,skims,134. Insecure or unset HTTP headers - CORS,The cors policy allows any origin in namespace/skims/test/data/lib_root/f134/java_insecure_cors.java,"
  14 |    }
  15 |    return chain.filter(ctx);
  16 |   };
  17 |  }
  18 |
  19 |   public void insecure2(CorsRegistry registry) {
  20 |     registry.addMapping(""/**"").allowedOrigins(""*""); // Sensitive
  21 |   }
  22 |
  23 |  public void insecure3() {
  24 |     CorsConfiguration config = new CorsConfiguration();
> 25 |   config.addAllowedOrigin(ALL_ORIGINS); // Sensitive
  26 |   }
  27 |
  28 |  public void secure() {
  29 |   String ALLOWED_ORIGIN = ""www.mytrustedorigin.com"";
  30 |     CorsConfiguration config = new CorsConfiguration();
  31 |   config.addAllowedOrigin(ALLOWED_ORIGIN); // Safe
  32 |   }
  33 |
  34 | }
     ^ Col 0
",java.java_insecure_cors_origin
F066,lines,namespace/skims/test/data/lib_root/f066/c_sharp_has_console_functions.cs,10,200,skims,066. Technical information leak - Console functions,"Technical information about the application is obtained due to the use of the Console.WriteLine() function whose outputs are normally displayed on stdout (standard output). In a development environment it is acceptable to use this function to see errors (Debug), but using it in a production environment is the same as exposing yourself to showing sensitive information about the application.
 in namespace/skims/test/data/lib_root/f066/c_sharp_has_console_functions.cs","
   1 | using System;
   2 |
   3 | namespace Example
   4 | {
   5 |     public class Example
   6 |     {
   7 |         public Test()
   8 |         {
   9 |             var text_str = ""hello world"";
> 10 |             Console.WriteLine($""String: {text_str}"");
  11 |
  12 |         }
  13 |     }
  14 | }
     ^ Col 0
",c_sharp.c_sharp_has_console_functions
F239,lines,namespace/skims/test/data/lib_root/f239/csharp_info_leak_errors.cs,13,200,skims,239. Technical information leak - Errors,The error handling configuration of the server allows the visualization of detailed information of its processes through the UseSetting method. in namespace/skims/test/data/lib_root/f239/csharp_info_leak_errors.cs,"
   1 | using System;
   2 |
   3 | namespace API
   4 | {
   5 |     public class Program
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             BuildWebHost();
  10 |         }
  11 |
  12 |         public static IWebHost BuildWebHost() =>
> 13 |             WebHost.CreateDefaultBuilder()
  14 |                    .UseSetting(WebHostDefaults.DetailedErrorsKey, ""true"")
  15 |                    .Build();
  16 |     }
  17 | }
     ^ Col 0
",csharp.csharp_info_leak_errors
F237,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,8,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java","
   1 | import java.io.File;
   2 | import java.nio.file.Files.*;
   3 |
   4 | public class Test {
   5 |     public static void main(String[] args){
   6 |         try {
   7 |         // Insecure
>  8 |         System.out.println(createTempFile(""xxx"", null));
   9 |         } catch (Exception e) {}
  10 |
  11 |         try {
  12 |         // Secure
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
  18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,13,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java","
   3 |
   4 | public class Test {
   5 |     public static void main(String[] args){
   6 |         try {
   7 |         // Insecure
   8 |         System.out.println(createTempFile(""xxx"", null));
   9 |         } catch (Exception e) {}
  10 |
  11 |         try {
  12 |         // Secure
> 13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
  18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
  22 |         // Insecure
  23 |         System.out.println(File.createTempFile(""xxx"", attrs=""xxx""));
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,18,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java","
   8 |         System.out.println(createTempFile(""xxx"", null));
   9 |         } catch (Exception e) {}
  10 |
  11 |         try {
  12 |         // Secure
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
> 18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
  22 |         // Insecure
  23 |         System.out.println(File.createTempFile(""xxx"", attrs=""xxx""));
  24 |         } catch (Exception e) {}
  25 |     }
  26 | }
  27 |
  28 | /*
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,23,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java","
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
  18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
  22 |         // Insecure
> 23 |         System.out.println(File.createTempFile(""xxx"", attrs=""xxx""));
  24 |         } catch (Exception e) {}
  25 |     }
  26 | }
  27 |
  28 | /*
  29 |  * $ ls -al $(javac Test.java && java Test)
  30 |  *
  31 |  * -rw-r--r-- 1 kamado kamado 0 Aug 28 14:44 /tmp/xxx948760279845756007.tmp
  32 |  *
  33 |  */
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f234/java_println_statements.java,11,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f234/java_println_statements.java","
   1 | import org.apache.logging.log4j.Logger;
   2 | import org.apache.logging.log4j.LogManager;
   3 |
   4 | public class Test {
   5 |
   6 |   private static Logger logger = LogManager.getLogger(Log4jExample.class);
   7 |
   8 |   public static void main(String[ ] args) {
   9 |     try {
  10 |       int[] myNumbers = {1, 2, 3};
> 11 |       System.out.println(myNumbers[10]);
  12 |     } catch (IndexException e) {
  13 |       if (e.toString() == ""Error""){
  14 |         System.out.println(""Error"");
  15 |       }
  16 |       e.printStackTrace();
  17 |     }
  18 |
  19 |     try {
  20 |       int a = 1 / 0;
  21 |     } catch (ArithmeticException exc) {
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f234/java_println_statements.java,35,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f234/java_println_statements.java","
  18 |
  19 |     try {
  20 |       int a = 1 / 0;
  21 |     } catch (ArithmeticException exc) {
  22 |       logger.info(exc);
  23 |     }
  24 |
  25 |     try {
  26 |       int a = 1 / 0;
  27 |     } catch (ArithmeticException exc) {
  28 |       System.out.println(""An error has occurred"");
  29 |       logger.error(String.format(""Ocurred error %s"", exc.getMessage()));
  30 |     }
  31 |
  32 |     try {
  33 |       int a = 1 / 0;
  34 |     } catch (ArithmeticException exc) {
> 35 |       System.out.println(exc);
  36 |     }
  37 |   }
  38 | }
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f237/dart_print.dart,8,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f237/dart_print.dart","
   1 | import 'package:test/test.dart';
   2 |
   3 | void main() {
   4 |   try {
   5 |     res = x ~/ y;
   6 |   }
   7 |   on IntegerDivisionByZeroException catch (e) {
>  8 |     print(e);
   9 |   }
  10 |   catch (e) {
  11 |     print('This should not  be reported');
  12 |   }
  13 | }
     ^ Col 0
",dart.dart_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f237/java_has_print_statements.java,16,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f237/java_has_print_statements.java","
   1 | import System.out;
   2 |
   3 | class printer {
   4 |     public static void main(String[] args) {
   5 |         String message = ""Variable"";
   6 |         System.out.print(""String Literal"");
   7 |         out.print(message);
   8 |         print(""Have"" + message + ""concatenation"");
   9 |         System.out.print();
  10 |         System.out.print("""");
  11 |     }
  12 |     public static void print(String[] args) {
  13 |         String message = ""Variable"";
  14 |         System.out.println(""String Literal"");
  15 |         out.println(message);
> 16 |         println(""Have"" + message + ""concatenation"");
  17 |         System.out.println();
  18 |         System.out.println("""");
  19 |     }
  20 | }
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f237/java_has_print_statements.java,15,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f237/java_has_print_statements.java","
   1 | import System.out;
   2 |
   3 | class printer {
   4 |     public static void main(String[] args) {
   5 |         String message = ""Variable"";
   6 |         System.out.print(""String Literal"");
   7 |         out.print(message);
   8 |         print(""Have"" + message + ""concatenation"");
   9 |         System.out.print();
  10 |         System.out.print("""");
  11 |     }
  12 |     public static void print(String[] args) {
  13 |         String message = ""Variable"";
  14 |         System.out.println(""String Literal"");
> 15 |         out.println(message);
  16 |         println(""Have"" + message + ""concatenation"");
  17 |         System.out.println();
  18 |         System.out.println("""");
  19 |     }
  20 | }
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f237/java_has_print_statements.java,8,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f237/java_has_print_statements.java","
   1 | import System.out;
   2 |
   3 | class printer {
   4 |     public static void main(String[] args) {
   5 |         String message = ""Variable"";
   6 |         System.out.print(""String Literal"");
   7 |         out.print(message);
>  8 |         print(""Have"" + message + ""concatenation"");
   9 |         System.out.print();
  10 |         System.out.print("""");
  11 |     }
  12 |     public static void print(String[] args) {
  13 |         String message = ""Variable"";
  14 |         System.out.println(""String Literal"");
  15 |         out.println(message);
  16 |         println(""Have"" + message + ""concatenation"");
  17 |         System.out.println();
  18 |         System.out.println("""");
  19 |     }
  20 | }
     ^ Col 0
",java.java_has_print_statements
F237,lines,namespace/skims/test/data/lib_root/f237/java_has_print_statements.java,7,200,skims,237. Technical information leak - Print Functions,"Using print or println on production exposes data what could increase the attack surface.
 in namespace/skims/test/data/lib_root/f237/java_has_print_statements.java","
   1 | import System.out;
   2 |
   3 | class printer {
   4 |     public static void main(String[] args) {
   5 |         String message = ""Variable"";
   6 |         System.out.print(""String Literal"");
>  7 |         out.print(message);
   8 |         print(""Have"" + message + ""concatenation"");
   9 |         System.out.print();
  10 |         System.out.print("""");
  11 |     }
  12 |     public static void print(String[] args) {
  13 |         String message = ""Variable"";
  14 |         System.out.println(""String Literal"");
  15 |         out.println(message);
  16 |         println(""Have"" + message + ""concatenation"");
  17 |         System.out.println();
  18 |         System.out.println("""");
  19 |     }
  20 | }
     ^ Col 0
",java.java_has_print_statements
F066,lines,namespace/skims/test/data/lib_root/f052/js_insecure_create_cipher.js,16,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f052/js_insecure_create_cipher.js,"
   1 | const crypto = require(""crypto"");
   2 |
   3 | let keyString = ""*4wQZgn+U2RW_mb="";
   4 | const key = Buffer.from(keyString.substring(0, 8), ""utf8"");
   5 |
   6 | const cipher = crypto.createCipheriv(""des-ecb"", key, """");
   7 |
   8 | let encrypted = """";
   9 | cipher.on(""readable"", () => {
  10 |   let chunk;
  11 |   while (null !== (chunk = cipher.read())) {
  12 |     encrypted += chunk.toString(""hex"");
  13 |   }
  14 | });
  15 | cipher.on(""end"", () => {
> 16 |   console.log(encrypted);
  17 | });
  18 |
  19 | cipher.write(""some clear text data"");
  20 | cipher.end();
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f052/js_insecure_ec_keypair.js,20,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f052/js_insecure_ec_keypair.js,"
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
> 20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
  22 |     }
  23 |   );
  24 | }
  25 |
  26 | router.get(""/test134"", test);
  27 |
  28 | export default router;
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f052/js_insecure_rsa_keypair.js,24,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f052/js_insecure_rsa_keypair.js,"
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
  20 |   generateKeyPair(
  21 |     ""rsa"",
  22 |     key_options,
  23 |     (err, publicKey, _privateKey) => {
> 24 |       if (err) console.log(""Error!"", err);
  25 |       res.send(publicKey);
  26 |     }
  27 |   );
  28 | }
  29 |
  30 | router.get(""/test130"", test);
  31 |
  32 | export default router;
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,6,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
   1 |
   2 | try {
   3 |     var a = 1 / 0;
   4 | }
   5 | catch (err) {
>  6 |     console.log(`${err}`);
   7 | }
   8 |
   9 | try {
  10 |     var a = 1 / 0;
  11 | }
  12 | catch {
  13 |     console.log(""error"");
  14 | }
  15 |
  16 | try {
  17 |     var a = 1 / 0;
  18 | }
  19 | catch (err) {
  20 |     console.log(err);
  21 | }
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,13,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
   3 |     var a = 1 / 0;
   4 | }
   5 | catch (err) {
   6 |     console.log(`${err}`);
   7 | }
   8 |
   9 | try {
  10 |     var a = 1 / 0;
  11 | }
  12 | catch {
> 13 |     console.log(""error"");
  14 | }
  15 |
  16 | try {
  17 |     var a = 1 / 0;
  18 | }
  19 | catch (err) {
  20 |     console.log(err);
  21 | }
  22 |
  23 | try {
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,20,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
  10 |     var a = 1 / 0;
  11 | }
  12 | catch {
  13 |     console.log(""error"");
  14 | }
  15 |
  16 | try {
  17 |     var a = 1 / 0;
  18 | }
  19 | catch (err) {
> 20 |     console.log(err);
  21 | }
  22 |
  23 | try {
  24 |     var a = 1 / 0;
  25 | }
  26 | catch (err) {
  27 |     console.log(""error"");
  28 |     console.warn(err);
  29 |     throw err;
  30 | }
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,27,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
  17 |     var a = 1 / 0;
  18 | }
  19 | catch (err) {
  20 |     console.log(err);
  21 | }
  22 |
  23 | try {
  24 |     var a = 1 / 0;
  25 | }
  26 | catch (err) {
> 27 |     console.log(""error"");
  28 |     console.warn(err);
  29 |     throw err;
  30 | }
  31 |
  32 | try {
  33 |     var a = 1 / 0;
  34 | }
  35 | catch (err) {
  36 |     console.log(""error"" + err);
  37 | }
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,36,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
  26 | catch (err) {
  27 |     console.log(""error"");
  28 |     console.warn(err);
  29 |     throw err;
  30 | }
  31 |
  32 | try {
  33 |     var a = 1 / 0;
  34 | }
  35 | catch (err) {
> 36 |     console.log(""error"" + err);
  37 | }
  38 |
  39 | try {
  40 |     var a = 1 / 0;
  41 | }
  42 | catch (err) {
  43 |     var b = ""error""
  44 |     console.log(b);
  45 |     console.error(err);
  46 | }
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log.js,44,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log.js,"
  27 |     console.log(""error"");
  28 |     console.warn(err);
  29 |     throw err;
  30 | }
  31 |
  32 | try {
  33 |     var a = 1 / 0;
  34 | }
  35 | catch (err) {
  36 |     console.log(""error"" + err);
  37 | }
  38 |
  39 | try {
  40 |     var a = 1 / 0;
  41 | }
  42 | catch (err) {
  43 |     var b = ""error""
> 44 |     console.log(b);
  45 |     console.error(err);
  46 | }
  47 |
     ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log_open.js,5,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log_open.js,"
    1 | function functionAWithConsoleLog() {
    2 |     var a = 13
    3 |     var b = 31
    4 |     var c = Math.floor((Math.random() * 100) + 1);
>   5 |     console.log()
    6 |     localStorage.getItem('key');
    7 |     try {
    8 |         if(a == """") throw ""empty"";
    9 |         if(isNaN(a)) throw ""not a number"";
   10 |         c = Number(a);
   11 |         if(c < 5) throw ""too low"";
   12 |         if(c > 10) throw ""too high"";
   13 |     }
   14 |     catch(err) {
   15 |         // a comment
   16 |         /* a comment */
   17 |         /*
   18 |             a comment
   19 |         */
   20 |     }
   21 |
      ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_console_log_open.js,66,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_console_log_open.js,"
   56 |             break;
   57 |         case 6:
   58 |             day = ""Saturday"";
   59 |             break;
   60 |     }
   61 | }
   62 |
   63 | function functionBWithConsoleLog() {
   64 |     var a = 13
   65 |     var b = 31
>  66 |     console.log(a+b)
   67 |     localStorage.clear();
   68 |     try {
   69 |         if(a == """") throw ""empty"";
   70 |         if(isNaN(a)) throw ""not a number"";
   71 |         c = Number(a);
   72 |         if(c < 5) throw ""too low"";
   73 |         if(c > 10) throw ""too high"";
   74 |     }
   75 |     catch(err) {
   76 |         //console.log(a+b)
      ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_has_console_functions.js,6,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_has_console_functions.js,"
  1 | function has_console_functions() {
  2 |   const text = ""Hello world"";
  3 |
  4 |   console.log(text);
  5 |
> 6 |   console.log(""Lorem Ipsum"");
  7 | }
    ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/js_has_console_functions.js,4,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Javascript file or directory. in namespace/skims/test/data/lib_root/f066/js_has_console_functions.js,"
  1 | function has_console_functions() {
  2 |   const text = ""Hello world"";
  3 |
> 4 |   console.log(text);
  5 |
  6 |   console.log(""Lorem Ipsum"");
  7 | }
    ^ Col 0
",javascript.js_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_ec_keypair.ts,20,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Typescript file or directory. in namespace/skims/test/data/lib_root/f052/ts_insecure_ec_keypair.ts,"
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
> 20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
  22 |     }
  23 |   );
  24 | }
  25 |
  26 | router.get(""/test134"", test);
  27 |
  28 | export default router;
     ^ Col 0
",typescript.ts_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_rsa_keypair.ts,21,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Typescript file or directory. in namespace/skims/test/data/lib_root/f052/ts_insecure_rsa_keypair.ts,"
   6 | router.get(""/test130"", (_req, res) => {
   7 |   let key_options = {
   8 |     modulusLength: 1024,
   9 |     publicKeyEncoding: {
  10 |       type: ""pkcs1"",
  11 |       format: ""pem"",
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
  20 |   generateKeyPair(""rsa"", key_options, (err: any, publicKey: any, _privateKey: any) => {
> 21 |     if (err) console.log(""Error!"", err);
  22 |     res.send(publicKey);
  23 |   });
  24 | });
  25 |
  26 | export default router;
     ^ Col 0
",typescript.ts_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/ts_has_console_functions.ts,6,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Typescript file or directory. in namespace/skims/test/data/lib_root/f066/ts_has_console_functions.ts,"
  1 | function has_console_fns(): void {
  2 |   const text = ""Hello world"";
  3 |
  4 |   console.log(text);
  5 |
> 6 |   console.log(""Lorem Ipsum"");
  7 | }
    ^ Col 0
",typescript.ts_uses_console_log
F066,lines,namespace/skims/test/data/lib_root/f066/ts_has_console_functions.ts,4,200,skims,066. Technical information leak - Console functions,console.log() is being invoked in a Typescript file or directory. in namespace/skims/test/data/lib_root/f066/ts_has_console_functions.ts,"
  1 | function has_console_fns(): void {
  2 |   const text = ""Hello world"";
  3 |
> 4 |   console.log(text);
  5 |
  6 |   console.log(""Lorem Ipsum"");
  7 | }
    ^ Col 0
",typescript.ts_uses_console_log
F059,lines,namespace/skims/test/data/lib_root/f059/java_insecure_log.java,3,209,skims,059. Sensitive information stored in logs,The application displays sensitive info in the logs in namespace/skims/test/data/lib_root/f059/java_insecure_log.java,"
  1 | public class Test{
  2 |     public void insecure(){
> 3 |   log.info(""Dangerous"" + System.getenv()); // Insecure
  4 |  }
  5 |
  6 |     public void secure(){
  7 |   log.info(""Hello world""); // secure
  8 |  }
  9 | }
    ^ Col 0
",java.java_sensitive_log_info
F234,lines,namespace/skims/test/data/lib_root/f234/java_println_statements.java,16,209,skims,234. Technical information leak - Stacktrace,error stacktrace can be printed in namespace/skims/test/data/lib_root/f234/java_println_statements.java,"
   6 |   private static Logger logger = LogManager.getLogger(Log4jExample.class);
   7 |
   8 |   public static void main(String[ ] args) {
   9 |     try {
  10 |       int[] myNumbers = {1, 2, 3};
  11 |       System.out.println(myNumbers[10]);
  12 |     } catch (IndexException e) {
  13 |       if (e.toString() == ""Error""){
  14 |         System.out.println(""Error"");
  15 |       }
> 16 |       e.printStackTrace();
  17 |     }
  18 |
  19 |     try {
  20 |       int a = 1 / 0;
  21 |     } catch (ArithmeticException exc) {
  22 |       logger.info(exc);
  23 |     }
  24 |
  25 |     try {
  26 |       int a = 1 / 0;
     ^ Col 0
",java.java_info_leak_stacktrace
F234,lines,namespace/skims/test/data/lib_root/f237/java_print_stacktrace.java,7,209,skims,234. Technical information leak - Stacktrace,error stacktrace can be printed in namespace/skims/test/data/lib_root/f237/java_print_stacktrace.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         try {
   4 |             throw new IOException();
   5 |         }
   6 |         catch (IOException e) {
>  7 |             e.printStackTrace();
   8 |         }
   9 |     }
  10 | }
     ^ Col 0
",java.java_info_leak_stacktrace
F063,lines,namespace/skims/test/data/lib_root/f063/java_path_traversal.java,13,22,skims,063. Lack of data validation - Path Traversal,"Instantiating an System.Xml.Xsl.XslTransform, which doesn't restrict potentially dangerous external references or prevent scripts.
 in namespace/skims/test/data/lib_root/f063/java_path_traversal.java","
   1 | t java.io.File;
   2 |
   3 | c class Test {
   4 | erride
   5 | lic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
   6 | / some code
   7 | esponse.setContentType(""text/html;charset=UTF-8"");
   8 |
   9 | / Vuln
  10 | avax.servlet.http.Cookie[] theCookie = request.getCookies();
  11 | tring param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
  12 | tring fileName = org.owasp.benchmark.helpers.Utils.testfileDir + param;
> 13 | ava.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(fileName));
  14 |
  15 |
     ^ Col 5
",java.java_unsafe_path_traversal
F063,lines,namespace/skims/test/data/lib_root/f063/java_path_traversal.java,13,22,skims,063. Lack of data validation - Path Traversal,"Instantiating an System.Xml.Xsl.XslTransform, which doesn't restrict potentially dangerous external references or prevent scripts.
 in namespace/skims/test/data/lib_root/f063/java_path_traversal.java","
   1 |
   2 |
   3 |
   4 |
   5 | equest request, HttpServletResponse response) throws ServletException, IOException {
   6 |
   7 | /html;charset=UTF-8"");
   8 |
   9 |
  10 | heCookie = request.getCookies();
  11 | coder.decode(theCookie.getValue(), ""UTF-8"");
  12 | enchmark.helpers.Utils.testfileDir + param;
> 13 |  new java.io.FileInputStream(new java.io.File(fileName));
  14 |
  15 |
     ^ Col 33
",java.java_unsafe_path_traversal
F063,lines,namespace/skims/test/data/lib_root/f063/c_sharp_path_traversal.cs,16,22,skims,063. Lack of data validation - Path Traversal,Path traversal in namespace/skims/test/data/lib_root/f063/c_sharp_path_traversal.cs,"
   2 | using System;
   3 | using System.Data.SqlClient;
   4 | using System.Data;
   5 | using System.Web;
   6 |
   7 |
   8 | namespace testcase
   9 | {
  10 |     class testcasef001
  11 |     {
  12 |         public override void Bad(HttpRequest req, HttpResponse resp)
  13 |         {
  14 |             string data = req.QueryString[""id""];
  15 |             string root = ""path/"";
> 16 |             if (File.Exists(root + data))
  17 |             {
  18 |                 IO.WriteLine(sr.ReadLine());
  19 |             }
  20 |         }
  21 |     }
  22 | }
     ^ Col 0
",c_sharp.c_sharp_unsafe_path_traversal
F063,lines,namespace/skims/test/data/lib_root/f063/c_sharp_open_redirect.cs,8,22,skims,063. Lack of data validation - Path Traversal,Potentially untrusted HTTP request input reaches an HTTP response redirect. in namespace/skims/test/data/lib_root/f063/c_sharp_open_redirect.cs,"
   1 | using System;
   2 |
   3 | public partial class WebForm : System.Web.UI.Page
   4 | {
   5 |     protected void Page_Load(object sender, EventArgs e)
   6 |     {
   7 |         string input = Request.Form[""url""];
>  8 |         Response.Redirect(input);
   9 |     }
  10 | }
     ^ Col 0
",c_sharp.c_sharp_open_redirect
F098,lines,namespace/skims/test/data/lib_root/f098/c_sharp_path_injection.cs,10,22,skims,098. External control of file name or path,Potentially untrusted HTTP request input reaches the path of a file operation. in namespace/skims/test/data/lib_root/f098/c_sharp_path_injection.cs,"
   1 | using System;
   2 | using System.IO;
   3 |
   4 | public partial class WebForm : System.Web.UI.Page
   5 | {
   6 |     protected void Page_Load(object sender, EventArgs e)
   7 |     {
   8 |         string userInput = Request.Params[""UserInput""];
   9 |
> 10 |         var elem = File.Open(userInput, FileMode.Open);
  11 |
  12 |     }
  13 | }
     ^ Col 0
",c_sharp.c_sharp_path_injection
F063,lines,namespace/skims/test/data/lib_root/f063/java_zip_slip_injection.java,10,22,skims,063. Lack of data validation - Path Traversal,"The file names in a zip archive are not properly validated and sanitize before accessing them.
 in namespace/skims/test/data/lib_root/f063/java_zip_slip_injection.java","
   1 | import java.io.File;
   2 | class zip_slip {
   3 |     public static List<String> zipSlipNoncompliant(ZipFile zipFile) throws IOException {
   4 |         Enumeration<? extends ZipEntry> entries = zipFile.entries();
   5 |         List<String> filesContent = new ArrayList<>();
   6 |
   7 |         while (entries.hasMoreElements()) {
   8 |             ZipEntry entry = entries.nextElement();
   9 |             File file = new File(entry.getName());
> 10 |             String content = FileUtils.readFileToString(file, StandardCharsets.UTF_8); // Noncompliant
  11 |             filesContent.add(content);
  12 |         }
  13 |
  14 |         return filesContent;
  15 |     }
  16 |
  17 |     public static List<String> zipSlipCompliant(ZipFile zipFile, String targetDirectory) throws IOException {
  18 |         Enumeration<? extends ZipEntry> entries = zipFile.entries();
  19 |         List<String> filesContent = new ArrayList<>();
  20 |
  21 |         while (entries.hasMoreElements()) {
     ^ Col 0
",java.java_zip_slip_injection
F063,lines,namespace/skims/test/data/lib_root/f063/js_insecure_path_traversal.js,7,22,skims,063. Lack of data validation - Path Traversal,"User provided data is not correctly sanitized, neutralize or validated for special elements within the pathname. in namespace/skims/test/data/lib_root/f063/js_insecure_path_traversal.js","
   1 | const fs = require(""fs"");
   2 | const pathmodule = require(""path"");
   3 |
   4 | function unsafeCases(req, res) {
   5 |
   6 |   const reqPath = req.query.filename; // user-controlled path
>  7 |   let data = fs.readFileSync(reqPath, { encoding: ""utf8"", flag: ""r"" }); // Noncompliant
   8 |
   9 | }
  10 |
  11 | function safeCases(req, res) {
  12 |
  13 |   let safedata = fs.readFileSync(""./dir/downloads"", { encoding: ""utf8"", flag: ""r"" });
  14 |
  15 |   const reqPath = req.query.filename;
  16 |   const resolvedPath = pathmodule.resolve(reqPath); // resolve will sanitize the input
  17 |   if (resolvedPath.startsWith(__dirname + '/uploads')) { // ensures a whitelist verification
  18 |     let data = fs.readFileSync(resolvedPath, { encoding: 'utf8', flag: 'r' }); // Compliant
  19 |   }
  20 | }
     ^ Col 0
",javascript.js_insecure_path_traversal
F063,lines,namespace/skims/test/data/lib_root/f063/js_zip_slip.js,7,22,skims,063. Lack of data validation - Path Traversal,"User provided data is not correctly sanitized, neutralize or validated for special elements within the pathname. in namespace/skims/test/data/lib_root/f063/js_zip_slip.js","
   1 | const AdmZip = require('adm-zip');
   2 | const fs = require('fs');
   3 |
   4 | const zip = new AdmZip(""zip-slip.zip"");
   5 | const zipEntries = zip.getEntries();
   6 | zipEntries.forEach(function (zipEntry) {
>  7 |   fs.createWriteStream(zipEntry.entryName); // Noncompliant
   8 | });
   9 |
  10 | const pathmodule = require('path');
  11 | zipEntries.forEach(function (zipEntry) {
  12 |   let resolvedPath = pathmodule.join(__dirname + '/archive_tmp', zipEntry.entryName); // join will resolve ""../""
  13 |
  14 |   if (resolvedPath.startsWith(__dirname + '/archive_tmp')) {
  15 |     // the file cannot be extracted outside of the ""archive_tmp"" folder
  16 |     fs.createWriteStream(resolvedPath); // Compliant
  17 |   }
  18 | });
     ^ Col 0
",javascript.js_zip_slip
F063,lines,namespace/skims/test/data/lib_root/f063/ts_insecure_path_traversal.ts,17,22,skims,063. Lack of data validation - Path Traversal,"User provided data is not correctly sanitized, neutralize or validated for special elements within the pathname. in namespace/skims/test/data/lib_root/f063/ts_insecure_path_traversal.ts","
   1 | import fs from ""fs"";
   2 | import pathmodule from ""path"";
   3 |
   4 | function safePathInjection(req, res) {
   5 |   const reqPath = __dirname + req.query.filename; // user-controlled path
   6 |   const resolvedPath = pathmodule.resolve(reqPath); // resolve will resolve ""../""
   7 |
   8 |   if (resolvedPath.startsWith(__dirname + ""/uploads"")) {
   9 |     // the requested filename cannot be retrieved outside of the ""/uploads"" folder
  10 |     let data = fs.readFileSync(resolvedPath, { encoding: ""utf8"", flag: ""r"" }); // Compliant
  11 |   }
  12 | }
  13 |
  14 | function unsafePathInjection(req, res) {
  15 |   const reqPath = __dirname + req.query.filename; // user-controlled path
  16 |
> 17 |   let data = fs.readFileSync(reqPath, { encoding: ""utf8"", flag: ""r"" }); // Noncompliant
  18 | }
     ^ Col 0
",typescript.ts_insecure_path_traversal
F063,lines,namespace/skims/test/data/lib_root/f063/ts_zip_slip.ts,7,22,skims,063. Lack of data validation - Path Traversal,"User provided data is not correctly sanitized, neutralize or validated for special elements within the pathname. in namespace/skims/test/data/lib_root/f063/ts_zip_slip.ts","
   1 | const AdmZip = require('adm-zip');
   2 | const fs = require('fs');
   3 |
   4 | const zip = new AdmZip(""zip-slip.zip"");
   5 | const zipEntries = zip.getEntries();
   6 | zipEntries.forEach(function (zipEntry) {
>  7 |   fs.createWriteStream(zipEntry.entryName); // Noncompliant
   8 | });
   9 |
  10 | const pathmodule = require('path');
  11 | zipEntries.forEach(function (zipEntry) {
  12 |   let resolvedPath = pathmodule.join(__dirname + '/archive_tmp', zipEntry.entryName); // join will resolve ""../""
  13 |
  14 |   if (resolvedPath.startsWith(__dirname + '/archive_tmp')) {
  15 |     // the file cannot be extracted outside of the ""archive_tmp"" folder
  16 |     fs.createWriteStream(resolvedPath); // Compliant
  17 |   }
  18 | });
     ^ Col 0
",typescript.ts_zip_slip
F015,lines,namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,9,287,skims,015. Insecure authentication method - Basic,The server uses Basic authentication over an insecure channel. in namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,"
   1 | import AnyOtherClass;
   2 |
   3 | public class MustFail {
   4 |   public void objectCreation() {
   5 |     HttpHeaders instantiatedHeaders = new HttpHeaders();
   6 |     instantiatedHeaders.setBasicAuth();
   7 |   }
   8 |   public void parameter(HttpHeaders parameterHeaders) {
>  9 |     parameterHeaders.setBasicAuth();
  10 |   }
  11 |   public void fromGetHeaders(){
  12 |     AnyClass anyObject;
  13 |
  14 |     anyObject = request.getHeaders();
  15 |     anyObject.setBasicAuth();
  16 |   }
  17 | }
  18 |
  19 | public class MustNotFail {
  20 |   public void objectCreation() {
  21 |     AnyOtherClass instantiatedHeaders = new AnyOtherClass();
     ^ Col 0
",java.java_insecure_authentication
F015,lines,namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,6,287,skims,015. Insecure authentication method - Basic,The server uses Basic authentication over an insecure channel. in namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,"
   1 | import AnyOtherClass;
   2 |
   3 | public class MustFail {
   4 |   public void objectCreation() {
   5 |     HttpHeaders instantiatedHeaders = new HttpHeaders();
>  6 |     instantiatedHeaders.setBasicAuth();
   7 |   }
   8 |   public void parameter(HttpHeaders parameterHeaders) {
   9 |     parameterHeaders.setBasicAuth();
  10 |   }
  11 |   public void fromGetHeaders(){
  12 |     AnyClass anyObject;
  13 |
  14 |     anyObject = request.getHeaders();
  15 |     anyObject.setBasicAuth();
  16 |   }
  17 | }
  18 |
  19 | public class MustNotFail {
  20 |   public void objectCreation() {
  21 |     AnyOtherClass instantiatedHeaders = new AnyOtherClass();
     ^ Col 0
",java.java_insecure_authentication
F015,lines,namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,15,287,skims,015. Insecure authentication method - Basic,The server uses Basic authentication over an insecure channel. in namespace/skims/test/data/lib_root/f015/java_insecure_authentication.java,"
   5 |     HttpHeaders instantiatedHeaders = new HttpHeaders();
   6 |     instantiatedHeaders.setBasicAuth();
   7 |   }
   8 |   public void parameter(HttpHeaders parameterHeaders) {
   9 |     parameterHeaders.setBasicAuth();
  10 |   }
  11 |   public void fromGetHeaders(){
  12 |     AnyClass anyObject;
  13 |
  14 |     anyObject = request.getHeaders();
> 15 |     anyObject.setBasicAuth();
  16 |   }
  17 | }
  18 |
  19 | public class MustNotFail {
  20 |   public void objectCreation() {
  21 |     AnyOtherClass instantiatedHeaders = new AnyOtherClass();
  22 |     instantiatedHeaders.setBasicAuth();
  23 |   }
  24 |   public void parameter(AnyOtherClass parameterHeaders) {
  25 |     parameterHeaders.setBasicAuth();
     ^ Col 0
",java.java_insecure_authentication
F309,lines,namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,8,287,skims,309. Insecurely generated token - JWT,Token JWT is not signed with a strong cipher algorithm or not signed at all. in namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,"
   1 | const jwt = require('jsonwebtoken');
   2 |
   3 | function unsafejwt() {
   4 |     // Default value of algorithm is vulnerable
   5 |     let utoken = jwt.sign(payload, key);
   6 |
   7 |     const sign_config = { algorithm: 'none'};
>  8 |     let token = jwt.sign(payload, key, sign_config);
   9 |
  10 |     let allowed_algos = ['HS256', 'none'];
  11 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
  12 |     jwt.verify(token, key, verify_config);
  13 |
  14 | }
  15 |
  16 | function safejwt() {
  17 |     let safe_algo = ""PS384"";
  18 |     let token_secure = jwt.sign(payload, key, {algorithm: safe_algo, issuer: ""none""});
  19 |
  20 |     let allowed_algos = ['PS384'];
  21 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
     ^ Col 0
",javascript.js_uses_insecure_jwt_token
F309,lines,namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,5,287,skims,309. Insecurely generated token - JWT,Token JWT is not signed with a strong cipher algorithm or not signed at all. in namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,"
   1 | const jwt = require('jsonwebtoken');
   2 |
   3 | function unsafejwt() {
   4 |     // Default value of algorithm is vulnerable
>  5 |     let utoken = jwt.sign(payload, key);
   6 |
   7 |     const sign_config = { algorithm: 'none'};
   8 |     let token = jwt.sign(payload, key, sign_config);
   9 |
  10 |     let allowed_algos = ['HS256', 'none'];
  11 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
  12 |     jwt.verify(token, key, verify_config);
  13 |
  14 | }
  15 |
  16 | function safejwt() {
  17 |     let safe_algo = ""PS384"";
  18 |     let token_secure = jwt.sign(payload, key, {algorithm: safe_algo, issuer: ""none""});
  19 |
  20 |     let allowed_algos = ['PS384'];
  21 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
     ^ Col 0
",javascript.js_uses_insecure_jwt_token
F309,lines,namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,12,287,skims,309. Insecurely generated token - JWT,Token JWT is not signed with a strong cipher algorithm or not signed at all. in namespace/skims/test/data/lib_root/f309/js_insecure_jwt_token.js,"
   2 |
   3 | function unsafejwt() {
   4 |     // Default value of algorithm is vulnerable
   5 |     let utoken = jwt.sign(payload, key);
   6 |
   7 |     const sign_config = { algorithm: 'none'};
   8 |     let token = jwt.sign(payload, key, sign_config);
   9 |
  10 |     let allowed_algos = ['HS256', 'none'];
  11 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
> 12 |     jwt.verify(token, key, verify_config);
  13 |
  14 | }
  15 |
  16 | function safejwt() {
  17 |     let safe_algo = ""PS384"";
  18 |     let token_secure = jwt.sign(payload, key, {algorithm: safe_algo, issuer: ""none""});
  19 |
  20 |     let allowed_algos = ['PS384'];
  21 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
  22 |     jwt.verify(token, key, verify_config);
     ^ Col 0
",javascript.js_uses_insecure_jwt_token
F309,lines,namespace/skims/test/data/lib_root/f309/ts_insecure_jwt_token.ts,9,287,skims,309. Insecurely generated token - JWT,Token JWT is not signed with a strong cipher algorithm or not signed at all. in namespace/skims/test/data/lib_root/f309/ts_insecure_jwt_token.ts,"
   1 |
   2 | import jwt from 'jsonwebtoken';
   3 |
   4 | export function unsafeJwt<T extends Object> (payload: T): string {
   5 |     const privateKey: string = ""mykey"";
   6 |     let allowed_algos: Array<string> = ['HS256'];
   7 |     const options: jwt.SignOptions = { expiresIn: 10000, algorithms:  allowed_algos};
   8 |     try {
>  9 |       return jwt.sign(payload, privateKey, options);
  10 |     } catch (e) {
  11 |       throw new Error(e.message);
  12 |     }
  13 | }
  14 |
  15 | export function safeJwt<T extends Object> (payload: T): string {
  16 |     const privateKey: string = ""mykey"";
  17 |     let allowed_algos: Array<string> = ['PS384'];
  18 |     const options: jwt.SignOptions = { expiresIn: 10000, issuer: ""None"", algorithms:  allowed_algos};
  19 |     try {
  20 |       return jwt.sign(payload, privateKey, options)
  21 |     } catch (e) {
     ^ Col 0
",typescript.ts_insecure_jwt_token
F353,lines,namespace/skims/test/data/lib_root/f353/js_decode_insecure_jwt_token.js,6,287,skims,353. Lack of data validation - Token,Token JWT is not verified before decoding. in namespace/skims/test/data/lib_root/f353/js_decode_insecure_jwt_token.js,"
   1 | const jwt = require('jsonwebtoken');
   2 |
   3 | function unsafeVerifyJwt() {
   4 |     // The signature is not verified before decoding
   5 |     let allowed_algos = ['PS384'];
>  6 |     jwt.decode(token, key, allowed_algos);
   7 | }
   8 |
   9 | function safeVerifyJwt() {
  10 |     // The jwt is verified before being decoded
  11 |     let allowed_algos = ['PS384'];
  12 |     const verify_config = { expiresIn: 10000, algorithms:  allowed_algos};
  13 |     jwt.verify(token_secure, key, verify_config);
  14 |     jwt.decode(token_secure, key, allowed_algos);
  15 | }
     ^ Col 0
",javascript.js_decode_insecure_jwt_token
F353,lines,namespace/skims/test/data/lib_root/f353/ts_decode_insecure_jwt_token.ts,6,287,skims,353. Lack of data validation - Token,Token JWT is not verified before decoding. in namespace/skims/test/data/lib_root/f353/ts_decode_insecure_jwt_token.ts,"
   1 |
   2 | import jwt from 'jsonwebtoken';
   3 |
   4 | export function unsafeJwt<T extends Object> (payload: T, privateKey: string): string {
   5 |     const options: jwt.SignOptions = { expiresIn: 10000, algorithms:  ['PS384']};
>  6 |     return jwt.decode(payload, privateKey, options)
   7 | }
   8 |
   9 | export function safeJwt<T extends Object> (payload: T, privateKey: string): string {
  10 |   const options: jwt.SignOptions = { expiresIn: 10000, algorithms:  ['PS384']};
  11 |   try {
  12 |     jwt.verify(payload, privateKey, options);
  13 |   } catch (e) {
  14 |     throw new Error(e.message);
  15 |   }
  16 |   return jwt.decode(payload, privateKey, options)
  17 | }
     ^ Col 0
",javascript.js_decode_insecure_jwt_token
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_disabled_strong_crypto.cs,7,310,skims,052. Insecure encryption algorithm,A AppContext.SetSwitch method call sets Switch.System.Net.DontEnableSchUseStrongCrypto to true in namespace/skims/test/data/lib_root/f052/c_sharp_disabled_strong_crypto.cs,"
  1 | using System;
  2 |
  3 | public class ExampleClass
  4 | {
  5 |     public void ExampleMethod()
  6 |     {
> 7 |         AppContext.SetSwitch(""Switch.System.Net.DontEnableSchUseStrongCrypto"", true);
  8 |     }
  9 | }
    ^ Col 0
",c_sharp.c_sharp_disabled_strong_crypto
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs,12,310,skims,052. Insecure encryption algorithm,"PasswordDeriveBytes is used to generate a weak key derivation
 in namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs","
   1 |  System;
   2 |  TestClass
   3 |
   4 | ublic void TestMethod(Rfc2898DeriveBytes rfc2898DeriveBytes, string algname, string alghashname, int keySize, byte[] rgbI
   5 |
   6 |    System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey(algname, alghashname, keySize, rgbIV);
   7 |
   8 |    byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());
   9 |
  10 |    byte[] salt = CreateRandomSalt(7);
  11 |
> 12 |    PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);
  13 |
  14 |
     ^ Col 5
",c_sharp.c_sharp_obsolete_key_derivation
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs,6,310,skims,052. Insecure encryption algorithm,"System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey is used to generate a weak key derivation
 in namespace/skims/test/data/lib_root/f052/c_sharp_obsolete_key_derivation.cs","
   1 | using System;
   2 | class TestClass
   3 | {
   4 |     public void TestMethod(Rfc2898DeriveBytes rfc2898DeriveBytes, string algname, string alghashname, int keySize, byte[]
   5 |     {
>  6 |         System.Security.Cryptography.rfc2898DeriveBytes.CryptDeriveKey(algname, alghashname, keySize, rgbIV);
   7 |
   8 |         byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());
   9 |
  10 |         byte[] salt = CreateRandomSalt(7);
  11 |
  12 |         PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);
  13 |     }
  14 | }
     ^ Col 0
",c_sharp.c_sharp_obsolete_key_derivation
F350,lines,namespace/skims/test/data/lib_root/f350/java_insecure_trust_manager.java,9,310,skims,350. Insecure digital certificates - Chain of trust,"The application uses an insecure trust manager for the ssl context
 in namespace/skims/test/data/lib_root/f350/java_insecure_trust_manager.java","
   1 | rt javax.net.ssl.TrustManagerFactory;
   2 |
   3 | ic class Test {
   4 |
   5 | lic WebClient insecureClient() {
   6 | y{
   7 |
   8 | rustManager my_manager = InsecureTrustManagerFactory.INSTANCE;
>  9 | slContext insecure_context = SslContextBuilder.forClient().trustManager(my_manager).build();
  10 | eturn insecure_context;
  11 |
  12 | catch (Exception e){
  13 |
  14 | hrow new RuntimeException("":: An error ocurred in ssl"", e);
  15 |
  16 |
  17 |
  18 |
  19 | lic WebClient secureClient() {
  20 | y{
  21 | rustManager my_sec_manager = trustManagerFactory.getTrustManagers();
     ^ Col 4
",java.java_use_insecure_trust_manager
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,6,310,skims,052. Insecure encryption algorithm,Use of insecure TLS version in connection spec in namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,"
   1 | @Component
   2 | public class InsecureConnection {
   3 |  private static final String TLS_1_1=TlsVersion.TLS_1_1;
   4 |  public void TlsVerification() {
   5 |   try {
>  6 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
   7 |          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
   8 |          .build();
   9 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  10 |         //Do something
  11 |   }
  12 |   try {
  13 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  14 |          .tlsVersions(TLS_1_1) // Noncompliant
  15 |          .build();
  16 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  17 |    //Do something
  18 |   }
  19 |  }
  20 | }
  21 |
     ^ Col 0
",java.java_insecure_connection
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,13,310,skims,052. Insecure encryption algorithm,Use of insecure TLS version in connection spec in namespace/skims/test/data/lib_root/f052/java_insecure_connection.java,"
   3 |  private static final String TLS_1_1=TlsVersion.TLS_1_1;
   4 |  public void TlsVerification() {
   5 |   try {
   6 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
   7 |          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
   8 |          .build();
   9 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  10 |         //Do something
  11 |   }
  12 |   try {
> 13 |    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  14 |          .tlsVersions(TLS_1_1) // Noncompliant
  15 |          .build();
  16 |   } catch (NoSuchAlgorithmException | KeyManagementException e) {
  17 |    //Do something
  18 |   }
  19 |  }
  20 | }
  21 |
  22 | @Component
  23 | public class SecureConnection {
     ^ Col 0
",java.java_insecure_connection
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,10,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,"
   1 | using System;
   2 | using System.IO;
   3 | using System.Security.Cryptography;
   4 | class Test {
   5 |    public static void insecure() {
   6 |       AesManaged aes_insecure = new AesManaged
   7 |       {
   8 |          KeySize = 128,
   9 |          BlockSize = 128,
> 10 |          Mode = CipherMode.CBC,
  11 |          Padding = PaddingMode.PKCS7
  12 |       };
  13 |
  14 |       var cipher_mode = CipherMode.OFB;
  15 |
  16 |       AesManaged aes_insecure1 = new AesManaged
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
  20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,20,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,"
  10 |          Mode = CipherMode.CBC,
  11 |          Padding = PaddingMode.PKCS7
  12 |       };
  13 |
  14 |       var cipher_mode = CipherMode.OFB;
  15 |
  16 |       AesManaged aes_insecure1 = new AesManaged
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
> 20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
  22 |       };
  23 |
  24 |       AesManaged aes_insecure2 = new AesManaged();
  25 |       aes_insecure2.BlockSize = 128;
  26 |       aes_insecure2.KeySize = 128;
  27 |       aes_insecure2.Mode = cipher_mode;
  28 |
  29 |    }
  30 |
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,27,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_aes_managed.cs,"
  17 |       {
  18 |          KeySize = 128,
  19 |          BlockSize = 128,
  20 |          Mode = cipher_mode,
  21 |          Padding = PaddingMode.PKCS7
  22 |       };
  23 |
  24 |       AesManaged aes_insecure2 = new AesManaged();
  25 |       aes_insecure2.BlockSize = 128;
  26 |       aes_insecure2.KeySize = 128;
> 27 |       aes_insecure2.Mode = cipher_mode;
  28 |
  29 |    }
  30 |
  31 |    public static void secure() {
  32 |       AesManaged aes_secure = new AesManaged
  33 |       {
  34 |          KeySize = 128,
  35 |          BlockSize = 128,
  36 |          Mode = CipherMode.CTS,
  37 |          Padding = PaddingMode.PKCS7
     ^ Col 0
",c_sharp.c_sharp_managed_secure_mode
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,15,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | ng System.Security.Cryptography;
   2 |
   3 | espace Cypher_Example
   4 |
   5 |  class CypherExample
   6 |  {
   7 |      public static void Main()
   8 |      {
   9 |          MD5 myAes = MD5.Create();
  10 |          SHA1 myAes = SHA1.Create();
  11 |          HMACMD5 myAes = HMACMD5.Create();
  12 |          DES myAes = DES.Create();
  13 |          TripleDES myAes = TripleDES.Create();
  14 |          var hashProvider3 = new SHA1Managed();
> 15 |          var hashProvider3 = new RC2CryptoServiceProvider();
  16 |      }
  17 |  }
  18 |
     ^ Col 3
",c_sharp.c_sharp_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,13,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | sing System.Security.Cryptography;
   2 |
   3 | amespace Cypher_Example
   4 |
   5 |    class CypherExample
   6 |    {
   7 |        public static void Main()
   8 |        {
   9 |            MD5 myAes = MD5.Create();
  10 |            SHA1 myAes = SHA1.Create();
  11 |            HMACMD5 myAes = HMACMD5.Create();
  12 |            DES myAes = DES.Create();
> 13 |            TripleDES myAes = TripleDES.Create();
  14 |            var hashProvider3 = new SHA1Managed();
  15 |            var hashProvider3 = new RC2CryptoServiceProvider();
  16 |        }
  17 |    }
  18 |
     ^ Col 1
",c_sharp.c_sharp_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,12,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
> 12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,15,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
> 15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,13,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
> 13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,9,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
   6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
>  9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,6,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_keys.cs,"
   1 | using System;
   2 | class cipher{
   3 |
   4 |    public void Encrypt()
   5 |  {
>  6 |       var insecure_rsa = new RSACryptoServiceProvider();
   7 |       var secure_rsa = new RSACryptoServiceProvider(2048);
   8 |
   9 |   var insecure_dsa = new DSACng(1024);
  10 |       var secure_dsa = new DSACng();
  11 |       var secure_dsa2 = new DSACng(2048);
  12 |
  13 |       var insecure_rsa = new RSACng(1024);
  14 |       int key = 1024;
  15 |       var insecure_rsa2 = new RSACng(key);
  16 |       var secure_rsa = new RSACng();
  17 |       int secure_key = 2048;
  18 |       var secure_rsa2 = new RSACng(secure_key);
  19 |  }
  20 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rijndael.cs,7,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rijndael.cs,"
   1 | tem;
   2 | tem.IO;
   3 | tem.Security.Cryptography;
   4 |
   5 | t {
   6 |  static void Main() {
>  7 | ndaelManaged aes_insecure3 = new RijndaelManaged
   8 |
   9 | KeySize = 128,
  10 | BlockSize = 128,
  11 | Mode = CipherMode.CTS,
  12 | Padding = PaddingMode.PKCS7
  13 |
  14 |
  15 |
     ^ Col 9
",c_sharp.c_sharp_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,9,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,"
   1 | ystem;
   2 | wtbuild {
   3 |
   4 | ic static void Main() {
   5 |
   6 | CryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |  secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
>  9 | CryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |  insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |  key_eval = false;
  13 | insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |
  15 |
     ^ Col 7
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,6,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,"
   1 | ystem;
   2 | wtbuild {
   3 |
   4 | ic static void Main() {
   5 |
>  6 | CryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |  secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 | CryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |  insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |  key_eval = false;
  13 | insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |
  15 |
     ^ Col 7
",c_sharp.c_sharp_insecure_keys
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,13,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,"
   1 | using System;
   2 | class jwtbuild {
   3 |
   4 |    public static void Main() {
   5 |
   6 |     RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |     var secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 |     RSACryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
  10 |     var insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |    bool key_eval = false;
> 13 |    var insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |    }
  15 | }
     ^ Col 0
",c_sharp.c_sharp_rsa_secure_mode
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,10,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_rsa.cs,"
   1 | using System;
   2 | class jwtbuild {
   3 |
   4 |    public static void Main() {
   5 |
   6 |     RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
   7 |     var secure_enc = RSA2.Encrypt(dataToEncrypt, true);
   8 |
   9 |     RSACryptoServiceProvider RSA3 = new RSACryptoServiceProvider();
> 10 |     var insecure_enc = RSA3.Encrypt(dataToEncrypt, false);
  11 |
  12 |    bool key_eval = false;
  13 |    var insecure_enc2 = RSA3.Encrypt(dataToEncrypt, key_eval);
  14 |    }
  15 | }
     ^ Col 0
",c_sharp.c_sharp_rsa_secure_mode
F052,lines,namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,22,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,"
   3 | import (
   4 |  ""crypto/des""
   5 |  ""crypto/md4""
   6 |  ""crypto/md5""
   7 |  ""golang.org/x/crypto/ripemd160""
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 | )
  11 |
  12 | func main() {
  13 |
  14 |  Hripemd:= ripemd160.New()
  15 |  Hmd4 = md4.New()
  16 |  Hmd5 = md5.New()
  17 |  Hsha1 := sha1.New()
  18 |  Hsha512 := sha512.New()
  19 |
  20 |  ede2Key := []byte(""example key 1234"")
  21 |
> 22 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  23 | }
     ^ Col 0
",go.go_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_cipher_jmqi.java,10,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_cipher_jmqi.java,"
   1 | import com.ibm.mq.*;
   2 | import com.ibm.mq.jmqi.JmqiUtils;
   3 | import org.apache.log4j.Logger;
   4 |
   5 | class Test {
   6 |
   7 |  private final String cipherSuite = ""TLS_RSA_WITH_AES_128_CBC_SHA256"";
   8 |
   9 |  public void insecure() {
> 10 |   JmqiUtils.toCipherSuite(cipherSuite);
  11 |  }
  12 |
  13 |  public void secure() {
  14 |   String safeSuite = ""TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256"";
  15 |   JmqiUtils.toCipherSuite(safeSuite);
  16 |  }
  17 |
  18 | }
     ^ Col 0
",java.java_insecure_cipher_jmqi
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_cipher.java,9,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_cipher.java,"
   1 | mport javax.net.ssl.SSLContext;
   2 | mport javax.net.ssl.SSLSession;
   3 |
   4 | Component
   5 | ublic class SslInsecure {
   6 | private static final String SSL=""SSL"";
   7 | public void SslVerification(boolean disable) {
   8 |  try {
>  9 |   SSLContext unsafecontext = SSLContext.getInstance(SSL);
  10 |  } catch (NoSuchAlgorithmException | KeyManagementException e) {
  11 |      //Do something
  12 |  }
  13 | }
  14 |
  15 |
  16 | Component
  17 | ublic class SslSecure {
  18 | private static final String SSL=""TLSv1.2"";
  19 | public void SslVerification(boolean disable) {
  20 |  try {
  21 |   SSLContext safecontext = SSLContext.getInstance(SSL);
     ^ Col 1
",java.java_insecure_cipher_ssl
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,11,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
> 11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,10,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
> 10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,9,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
>  9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,8,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
>  8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,7,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   1 | import org.springframework.security.crypto.password.NoOpPasswordEncoder;
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
>  7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,12,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   2 |
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
> 12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,13,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   3 | public class Main {
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
> 13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,14,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   4 |
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
> 14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,15,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   5 |     public static void unsafe(String[] args) {
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
> 15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,16,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   6 |
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
> 16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,17,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   7 |         Cipher c = Cipher.getInstance(""DES"");//
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
> 17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,18,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   8 |         Cipher c = Cipher.getInstance(""DESede"");//
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
> 18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,19,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
   9 |         Cipher c = Cipher.getInstance(""RSA"");//
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
> 19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,20,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  10 |         Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");//
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
> 20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,21,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  11 |         Cipher c = Cipher.getInstance(""AES/ECB/NoPadding"");//
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
> 21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,22,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  12 |         Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding"");//
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
> 22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
     ^ Col 0
",java.java_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,23,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  13 |         Cipher c = Cipher.getInstance(""DES/CBC/NoPadding"");//
  14 |         Cipher c = Cipher.getInstance(""DES/CBC/PKCS5Padding"");//
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
> 23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
     ^ Col 0
",java.java_insecure_cipher_ssl
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,8,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,"
   1 | function insecureModes() {
   2 |     var unsafe_1 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
>  8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
  13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,2,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,"
   1 | function insecureModes() {
>  2 |     var unsafe_1 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
   8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
  13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,13,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_cipher.js,"
   3 |         mode: CryptoJS.mode.CBC,
   4 |         padding: CryptoJS.pad.AnsiX923
   5 |     });
   6 |
   7 |     var crypto = CryptoJS.mode.ECB
   8 |     var unsafe_2 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
   9 |         mode: crypto,
  10 |         padding: CryptoJS.pad.AnsiX923
  11 |     });
  12 |
> 13 |     var unsafe_3 = CryptoJS.AES.encrypt(""Message"", ""Secret Passphrase"", {
  14 |         padding: CryptoJS.pad.AnsiX923
  15 |     });
  16 | }
  17 |
  18 | function secureMode() {
  19 |     var safe_mode = CryptoJS.mode.CTR
  20 |     var safe = CryptoJS.AES.encrypt(""Message"", ""passphrase"", {
  21 |         mode: safe_mode,
  22 |         padding: CryptoJS.pad.AnsiX923
  23 |     });
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_create_cipher.js,6,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_create_cipher.js,"
   1 | const crypto = require(""crypto"");
   2 |
   3 | let keyString = ""*4wQZgn+U2RW_mb="";
   4 | const key = Buffer.from(keyString.substring(0, 8), ""utf8"");
   5 |
>  6 | const cipher = crypto.createCipheriv(""des-ecb"", key, """");
   7 |
   8 | let encrypted = """";
   9 | cipher.on(""readable"", () => {
  10 |   let chunk;
  11 |   while (null !== (chunk = cipher.read())) {
  12 |     encrypted += chunk.toString(""hex"");
  13 |   }
  14 | });
  15 | cipher.on(""end"", () => {
  16 |   console.log(encrypted);
  17 | });
  18 |
  19 | cipher.write(""some clear text data"");
  20 | cipher.end();
     ^ Col 0
",javascript.javascript_insecure_create_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,11,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,"
   1 | import { Router } from ""express"";
   2 | let CryptoJS = require(""crypto-js"");
   3 | let router = Router();
   4 |
   5 | router.get(""/test120/:target"", function (req, res) {
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
> 11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,16,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,"
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
> 16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,21,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,"
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
> 21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,26,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_encrypt.js,"
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
> 26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
  32 |
  33 | export default router;
     ^ Col 0
",javascript.javascript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_hash.js,8,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/js_insecure_hash.js,"
   1 | import { Router } from ""express"";
   2 | import crypto from ""crypto"";
   3 |
   4 | const router = Router();
   5 |
   6 | router.get(""/test139/:target"", function (req, res) {
   7 |   let target = req.params[""target""];
>  8 |   const hash = crypto.createHash(""RSA-MD4"");
   9 |
  10 |   hash.on(""readable"", () => {
  11 |     const data = hash.read();
  12 |     if (data) {
  13 |       res.json({ hash: data.toString(""hex"") });
  14 |     }
  15 |   });
  16 |   hash.write(target);
  17 |   hash.end();
  18 | });
  19 |
  20 | export default router;
     ^ Col 0
",javascript.javascript_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,15,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
   5 | import java.security.spec.ECGenParameterSpec
   6 | import java.security.spec.RSAKeyGenParameterSpec
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
> 15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,16,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
   6 | import java.security.spec.RSAKeyGenParameterSpec
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
> 16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,17,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
   7 | import javax.crypto.Cipher
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
> 17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,18,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
   8 | import javax.crypto.NoSuchPaddingException
   9 |
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
> 18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,20,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  10 | class test {
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
> 20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,21,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  11 |     fun main(args: Array<String>) {
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
> 21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,22,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  12 |         try {
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
> 22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,23,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  13 |             val c1 = Cipher.getInstance(""AES"")
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
> 23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,24,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  14 |             val cipher_ins = ""DES""
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
> 24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,25,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  15 |             val c2 = Cipher.getInstance(cipher_ins)
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
> 25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,26,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  16 |             val c3 = Cipher.getInstance(""DESede"")
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
> 26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,27,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  17 |             val c4 = Cipher.getInstance(""RSA"")
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
> 27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,28,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  18 |             val c5 = Cipher.getInstance(""AES/CBC/PKCS5Padding"")
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
> 28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,29,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  19 |             val c6 = Cipher.getInstance(""AES/CBC/NoPadding"")
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
> 29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,30,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  20 |             val c7 = Cipher.getInstance(""AES/ECB/NoPadding"")
  21 |             val c8 = Cipher.getInstance(""AES/ECB/PKCS5Padding"")
  22 |             val c9 = Cipher.getInstance(""DES/CBC/NoPadding"")
  23 |             val c10 = Cipher.getInstance(""DES/CBC/PKCS5Padding"")
  24 |             val c11 = Cipher.getInstance(""DES/ECB/NoPadding"")
  25 |             val c12 = Cipher.getInstance(""DES/ECB/PKCS5Padding"")
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
> 30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,41,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
> 41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |                     .tlsVersions(TlsVersion.TLS_1_2)
  48 |                     .build()
  49 |             )
  50 |
  51 |             val md2: MessageDigest = MessageDigest.getInstance(""SHA1"")
     ^ Col 0
",kotlin.kotlin_insecure_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,10,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,"
   1 | import crypto from 'crypto';
   2 |
   3 | function unsafe_encrypt(password:string, algorithm: string = 'aes-256-cbc'): string {
   4 |     var cipher = crypto.createCipher(algorithm, password);
   5 |     return cipher;
   6 | }
   7 |
   8 | function unsafe_decrypt(password:string): string {
   9 |     const algo:string = 'rc4'
> 10 |     var decipher = crypto.createDecipher(algo, password);
  11 |     return decipher;
  12 | }
  13 |
  14 |
  15 | function safe_decrypt(password:string): string {
  16 |     const algo:string = 'ecdsa-aria-128-gcm'
  17 |     var decipher = crypto.createDecipher(algo, password);
  18 |     return decipher;
  19 | }
     ^ Col 0
",typescript.ts_insecure_create_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,4,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_cipher.ts,"
   1 | import crypto from 'crypto';
   2 |
   3 | function unsafe_encrypt(password:string, algorithm: string = 'aes-256-cbc'): string {
>  4 |     var cipher = crypto.createCipher(algorithm, password);
   5 |     return cipher;
   6 | }
   7 |
   8 | function unsafe_decrypt(password:string): string {
   9 |     const algo:string = 'rc4'
  10 |     var decipher = crypto.createDecipher(algo, password);
  11 |     return decipher;
  12 | }
  13 |
  14 |
  15 | function safe_decrypt(password:string): string {
  16 |     const algo:string = 'ecdsa-aria-128-gcm'
  17 |     var decipher = crypto.createDecipher(algo, password);
  18 |     return decipher;
  19 | }
     ^ Col 0
",typescript.ts_insecure_create_cipher
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,7,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,"
   1 | import * as CryptoJS from 'crypto-js';
   2 |
   3 | export class EncryptionService {
   4 |   constructor() {}
   5 |
   6 |  unsafe1(plainText: string, key: string) {
>  7 |     const encrypted = CryptoJS.RC4.encrypt(plainText, key, {
   8 |       mode: CryptoJS.mode.ECB,
   9 |     });
  10 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  11 |   }
  12 |
  13 |   unsafe2(plainText: string, key: string) {
  14 |   const cipher_mode = CryptoJS.mode.CBC;
  15 |   const config = {mode: cipher_mode, padding: CryptoJS.pad.NoPadding};
  16 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, config);
  17 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  18 |   }
  19 |
  20 |  safe(plainText: string, key: string) {
  21 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,16,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_ciphers.ts,"
   6 |  unsafe1(plainText: string, key: string) {
   7 |     const encrypted = CryptoJS.RC4.encrypt(plainText, key, {
   8 |       mode: CryptoJS.mode.ECB,
   9 |     });
  10 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  11 |   }
  12 |
  13 |   unsafe2(plainText: string, key: string) {
  14 |   const cipher_mode = CryptoJS.mode.CBC;
  15 |   const config = {mode: cipher_mode, padding: CryptoJS.pad.NoPadding};
> 16 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, config);
  17 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  18 |   }
  19 |
  20 |  safe(plainText: string, key: string) {
  21 |     const encrypted = CryptoJS.AES.encrypt(plainText, key, {
  22 |       mode: CryptoJS.mode.GCM,
  23 |     });
  24 |     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
  25 |   }
  26 |
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,11,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,"
   1 | import { Router } from ""express"";
   2 | let CryptoJS = require(""crypto-js"");
   3 | let router = Router();
   4 |
   5 | router.get(""/test120/:target"", function (req, res) {
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
> 11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,16,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,"
   6 |   const keyString = ""*4wQZgn+U2RW_mb="";
   7 |
   8 |   let parameters = req.params;
   9 |   let target = parameters[""target""];
  10 |
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
> 16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,21,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,"
  11 |   let encryptedAES = CryptoJS.AES.encrypt(target, keyString, {
  12 |     mode: CryptoJS.mode.CBC,
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
> 21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
  26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,26,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_encrypt.ts,"
  13 |     padding: CryptoJS.pad.NoPadding,
  14 |   }).toString();
  15 |   res.json({ encryptedAES: encryptedAES });
  16 |   let encryptedDES = CryptoJS.DES.encrypt(target, keyString, {
  17 |     mode: CryptoJS.mode.CBC,
  18 |     padding: CryptoJS.pad.NoPadding,
  19 |   }).toString();
  20 |   res.json({ encryptedDES: encryptedDES });
  21 |   let encryptedRC4 = CryptoJS.RC4.encrypt(target, keyString, {
  22 |     mode: CryptoJS.mode.CBC,
  23 |     padding: CryptoJS.pad.NoPadding,
  24 |   }).toString();
  25 |   res.json({ encryptedRC4: encryptedRC4 });
> 26 |   let encryptedRSA = CryptoJS.RSA.encrypt(target, keyString, {
  27 |     mode: CryptoJS.mode.CBC,
  28 |     padding: CryptoJS.pad.NoPadding,
  29 |   }).toString();
  30 |   res.json({ encryptedRSA: encryptedRSA });
  31 | });
  32 |
  33 | export default router;
     ^ Col 0
",typescript.typescript_insecure_encrypt
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_hash.ts,9,310,skims,052. Insecure encryption algorithm,Use of insecure encryption algorithm in namespace/skims/test/data/lib_root/f052/ts_insecure_hash.ts,"
   1 | import { Router } from ""express"";
   2 | import crypto from ""crypto"";
   3 |
   4 |
   5 | const router = Router();
   6 |
   7 | router.get(""/test139/:target"", function (req, res) {
   8 |   let target = req.params[""target""];
>  9 |   const hash = crypto.createHash(""RSA-MD4"");
  10 |
  11 |   hash.on(""readable"", () => {
  12 |     const data = hash.read();
  13 |     if (data) {
  14 |       res.json({ hash: data.toString(""hex"") });
  15 |     }
  16 |   });
  17 |   hash.write(target);
  18 |   hash.end();
  19 | });
  20 |
  21 | export default router
     ^ Col 0
",Typescript.typescript_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,14,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | ng System.Security.Cryptography;
   2 |
   3 | espace Cypher_Example
   4 |
   5 |  class CypherExample
   6 |  {
   7 |      public static void Main()
   8 |      {
   9 |          MD5 myAes = MD5.Create();
  10 |          SHA1 myAes = SHA1.Create();
  11 |          HMACMD5 myAes = HMACMD5.Create();
  12 |          DES myAes = DES.Create();
  13 |          TripleDES myAes = TripleDES.Create();
> 14 |          var hashProvider3 = new SHA1Managed();
  15 |          var hashProvider3 = new RC2CryptoServiceProvider();
  16 |      }
  17 |  }
  18 |
     ^ Col 3
",c_sharp.c_sharp_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,11,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
> 11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,10,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
   9 |             MD5 myAes = MD5.Create();
> 10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,9,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/c_sharp_insecure_hash.cs,"
   1 | using System.Security.Cryptography;
   2 |
   3 | namespace Cypher_Example
   4 | {
   5 |     class CypherExample
   6 |     {
   7 |         public static void Main()
   8 |         {
>  9 |             MD5 myAes = MD5.Create();
  10 |             SHA1 myAes = SHA1.Create();
  11 |             HMACMD5 myAes = HMACMD5.Create();
  12 |             DES myAes = DES.Create();
  13 |             TripleDES myAes = TripleDES.Create();
  14 |             var hashProvider3 = new SHA1Managed();
  15 |             var hashProvider3 = new RC2CryptoServiceProvider();
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,17,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,"
   3 | import (
   4 |  ""crypto/des""
   5 |  ""crypto/md4""
   6 |  ""crypto/md5""
   7 |  ""golang.org/x/crypto/ripemd160""
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 | )
  11 |
  12 | func main() {
  13 |
  14 |  Hripemd:= ripemd160.New()
  15 |  Hmd4 = md4.New()
  16 |  Hmd5 = md5.New()
> 17 |  Hsha1 := sha1.New()
  18 |  Hsha512 := sha512.New()
  19 |
  20 |  ede2Key := []byte(""example key 1234"")
  21 |
  22 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  23 | }
     ^ Col 0
",go.go_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,16,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,"
   3 | import (
   4 |  ""crypto/des""
   5 |  ""crypto/md4""
   6 |  ""crypto/md5""
   7 |  ""golang.org/x/crypto/ripemd160""
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 | )
  11 |
  12 | func main() {
  13 |
  14 |  Hripemd:= ripemd160.New()
  15 |  Hmd4 = md4.New()
> 16 |  Hmd5 = md5.New()
  17 |  Hsha1 := sha1.New()
  18 |  Hsha512 := sha512.New()
  19 |
  20 |  ede2Key := []byte(""example key 1234"")
  21 |
  22 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  23 | }
     ^ Col 0
",go.go_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,15,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,"
   3 | import (
   4 |  ""crypto/des""
   5 |  ""crypto/md4""
   6 |  ""crypto/md5""
   7 |  ""golang.org/x/crypto/ripemd160""
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 | )
  11 |
  12 | func main() {
  13 |
  14 |  Hripemd:= ripemd160.New()
> 15 |  Hmd4 = md4.New()
  16 |  Hmd5 = md5.New()
  17 |  Hsha1 := sha1.New()
  18 |  Hsha512 := sha512.New()
  19 |
  20 |  ede2Key := []byte(""example key 1234"")
  21 |
  22 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  23 | }
     ^ Col 0
",go.go_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,14,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/go_insecure_crypto.go,"
   3 | import (
   4 |  ""crypto/des""
   5 |  ""crypto/md4""
   6 |  ""crypto/md5""
   7 |  ""golang.org/x/crypto/ripemd160""
   8 |  ""crypto/sha1""
   9 |  ""crypto/sha512""
  10 | )
  11 |
  12 | func main() {
  13 |
> 14 |  Hripemd:= ripemd160.New()
  15 |  Hmd4 = md4.New()
  16 |  Hmd5 = md5.New()
  17 |  Hsha1 := sha1.New()
  18 |  Hsha512 := sha512.New()
  19 |
  20 |  ede2Key := []byte(""example key 1234"")
  21 |
  22 |  Cdes, _ := des.NewTripleDESCipher(ede2Key)
  23 | }
     ^ Col 0
",go.go_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,25,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  15 |         Cipher c = Cipher.getInstance(""DES/ECB/NoPadding"");//
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
> 25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
     ^ Col 0
",java.java_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,26,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  16 |         Cipher c = Cipher.getInstance(""DES/ECB/PKCS5Padding"");//
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
> 26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
     ^ Col 0
",java.java_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,27,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  17 |         Cipher c = Cipher.getInstance(""DESede/CBC/NoPadding"");//
  18 |         Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");//
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
> 27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
     ^ Col 0
",java.java_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,29,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  19 |         Cipher c = Cipher.getInstance(""DESede/ECB/NoPadding"");//
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
> 29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
     ^ Col 0
",java.java_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,30,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  20 |         Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");//
  21 |         Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");//
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
> 30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
     ^ Col 0
",java.java_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,9,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
> 9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,8,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
> 8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,7,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
> 7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,6,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
> 6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,5,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_require.js,"
  1 | const sha1 = require(""js-sha1"")
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
> 5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,9,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
> 9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,8,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
> 8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,7,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
  6 | sha1.hex("""");
> 7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,6,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
  5 | sha1("""");
> 6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,5,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/js_insecure_sha1_use.js,"
  1 | import sha1 from ""js-sha1"";
  2 |
  3 | // As js-sha1 library uses sha-1 algorithm all its uses must be marked.
  4 |
> 5 | sha1("""");
  6 | sha1.hex("""");
  7 | sha1.array("""");
  8 | sha1.digest("""");
  9 | sha1.arrayBuffer('');
    ^ Col 0
",javascript.javascript_insecure_hash_library
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,51,310,skims,052. Insecure encryption algorithm,Use of insecure hashing function in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  37 |     val k3 = ECGenParameterSpec(""secp521r1"")
  38 |     val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |     val spec1: ConnectionSpec = (
  41 |         ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |             .tlsVersions(TlsVersion.TLS_1_1)
  43 |             .build()
  44 |     )
  45 |     val spec2: ConnectionSpec = (
  46 |         ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |             .tlsVersions(TlsVersion.TLS_1_2)
  48 |             .build()
  49 |     )
  50 |
> 51 |     val md2: MessageDigest = MessageDigest.getInstance(""SHA1"")
  52 |     val md3: MessageDigest = MessageDigest.getInstance(""SHA-512"")
  53 | } catch (e: NoSuchAlgorithmException) {
  54 | } catch (e: NoSuchPaddingException) {
  55 | }
  56 |
  57 |
     ^ Col 8
",kotlin.kotlin_insecure_hash
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,34,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
> 34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
  43 |         MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
     ^ Col 0
",java.java_insecure_key_ec
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,32,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  22 |         javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();//
  23 |         SSLContext.getInstance(""SSLv3"");//
  24 |
  25 |         MessageDigest md = MessageDigest.getInstance(""ShA-1"", provider); //
  26 |         MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 |         MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
> 32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
     ^ Col 0
",java.java_insecure_key_rsa
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,38,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  28 |
  29 |         DigestUtils.sha1Hex(""test""); //
  30 |         Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 |         new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 |         new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
  36 |         ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
> 38 |         SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |     }
  40 |
  41 |     public static void safe(String[] args) {
  42 |
  43 |         MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
  45 |         DigestUtils.sha3_256(""test"");
  46 |         Hashing.sha256().hashString(password,StandardCharsets.UTF_8).toString();
  47 |
  48 |         Cipher c = Cipher.getInstance(""AES"");
     ^ Col 0
",java.java_insecure_key_secret
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_ec_keypair.js,6,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_ec_keypair.js,"
   1 | import { Router } from ""express"";
   2 | const router = Router();
   3 | const { generateKeyPair } = require(""crypto"");
   4 |
   5 | function test(req, res) {
>  6 |   generateKeyPair(
   7 |     ""ec"",
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
  20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
     ^ Col 0
",javascript.javascript_insecure_ec_keypair
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_ecdh.js,6,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_ecdh.js,"
   1 | import { Router } from ""express"";
   2 | import * as crypto from ""crypto"";
   3 | const router = Router();
   4 |
   5 | router.get(""/test127"", function (req, res) {
>  6 |   const bob = crypto.createECDH(""c2pnb163v2"");
   7 |   const bobKey = bob.generateKeys();
   8 |   res.send(bobKey.toString(""hex""));
   9 | });
  10 |
  11 | export default router;
     ^ Col 0
",javascript.javascript_insecure_ecdh_key
F052,lines,namespace/skims/test/data/lib_root/f052/js_insecure_rsa_keypair.js,20,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/js_insecure_rsa_keypair.js,"
  10 |       type: ""pkcs1"",
  11 |       format: ""pem"",
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
> 20 |   generateKeyPair(
  21 |     ""rsa"",
  22 |     key_options,
  23 |     (err, publicKey, _privateKey) => {
  24 |       if (err) console.log(""Error!"", err);
  25 |       res.send(publicKey);
  26 |     }
  27 |   );
  28 | }
  29 |
  30 | router.get(""/test130"", test);
     ^ Col 0
",javascript.javascript_insecure_rsa_keypair
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,36,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  26 |             val c13 = Cipher.getInstance(""DESede/CBC/NoPadding"")
  27 |             val c14 = Cipher.getInstance(""DESede/CBC/PKCS5Padding"")
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
> 36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
  38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
  41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
     ^ Col 0
",kotlin.kotlin_insecure_key
F052,lines,namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,38,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/kotlin_insecure_ciphers.kt,"
  28 |             val c15 = Cipher.getInstance(""DESede/ECB/NoPadding"")
  29 |             val c16 = Cipher.getInstance(""DESede/ECB/PKCS5Padding"")
  30 |             val c17 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"")
  31 |             val c18 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
  32 |             val c19 = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
  33 |
  34 |             val k1 = RSAKeyGenParameterSpec(2048, RSAKeyGenParameterSpec.F4)
  35 |             val key = 2047
  36 |             val k2 = RSAKeyGenParameterSpec(key, RSAKeyGenParameterSpec.F4)
  37 |             val k3 = ECGenParameterSpec(""secp521r1"")
> 38 |             val k4 = ECGenParameterSpec(""c2pnb208w1"")
  39 |
  40 |             val spec1: ConnectionSpec = (
  41 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  42 |                     .tlsVersions(TlsVersion.TLS_1_1)
  43 |                     .build()
  44 |             )
  45 |             val spec2: ConnectionSpec = (
  46 |                 ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
  47 |                     .tlsVersions(TlsVersion.TLS_1_2)
  48 |                     .build()
     ^ Col 0
",kotlin.kotlin_insecure_key
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_ec_keypair.ts,6,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_ec_keypair.ts,"
   1 | import { Router } from ""express"";
   2 | const router = Router();
   3 | const { generateKeyPair } = require(""crypto"");
   4 |
   5 | function test(req, res) {
>  6 |   generateKeyPair(
   7 |     ""ec"",
   8 |     {
   9 |       namedCurve: ""secp192k1"",
  10 |       publicKeyEncoding: {
  11 |         type: ""spki"",
  12 |         format: ""pem"",
  13 |       },
  14 |       privateKeyEncoding: {
  15 |         type: ""pkcs8"",
  16 |         format: ""pem"",
  17 |       },
  18 |     },
  19 |     (err, publicKey, privateKey) => {
  20 |       if (err) console.log(""Error!"", err);
  21 |       res.send(publicKey);
     ^ Col 0
",typescript.typescript_insecure_ec_keypair
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_ecdh.ts,6,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_ecdh.ts,"
   1 | import { Router } from ""express"";
   2 | import * as crypto from ""crypto"";
   3 | const router = Router();
   4 |
   5 | router.get(""/test127"", function test (req, res) {
>  6 |   const bob = crypto.createECDH(""c2pnb163v2"");
   7 |   const bobKey = bob.generateKeys();
   8 |   res.send(bobKey.toString(""hex""));
   9 | });
  10 |
  11 | export default router;
     ^ Col 0
",typescript.ts_insecure_ecdh_key
F052,lines,namespace/skims/test/data/lib_root/f052/ts_insecure_rsa_keypair.ts,20,310,skims,052. Insecure encryption algorithm,Use of insecure parameters in namespace/skims/test/data/lib_root/f052/ts_insecure_rsa_keypair.ts,"
   6 | router.get(""/test130"", (_req, res) => {
   7 |   let key_options = {
   8 |     modulusLength: 1024,
   9 |     publicKeyEncoding: {
  10 |       type: ""pkcs1"",
  11 |       format: ""pem"",
  12 |     },
  13 |     privateKeyEncoding: {
  14 |       type: ""pkcs1"",
  15 |       format: ""pem"",
  16 |       //cipher: ""aes-256-cbc"", //Optional
  17 |       //passphrase: """", //Optional
  18 |     },
  19 |   };
> 20 |   generateKeyPair(""rsa"", key_options, (err: any, publicKey: any, _privateKey: any) => {
  21 |     if (err) console.log(""Error!"", err);
  22 |     res.send(publicKey);
  23 |   });
  24 | });
  25 |
  26 | export default router;
     ^ Col 0
",typescript.ts_insecure_rsa_keypair
F052,lines,namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,36,310,skims,052. Insecure encryption algorithm,Use of insecure password encoder in namespace/skims/test/data/lib_root/f052/java_insecure_ciphers.java,"
  26 | MessageDigest md = MessageDigest.getInstance(""mD5""); //
  27 | MessageDigest md = MessageDigest.getInstance(""Md2""); //
  28 |
  29 | DigestUtils.sha1Hex(""test""); //
  30 | Hashing.md5().hashString(password,StandardCharsets.UTF_8).toString(); //
  31 |
  32 | new RSAKeyGenParameterSpec(2047, RSAKeyGenParameterSpec.F4);//
  33 |
  34 | new ECGenParameterSpec(""c2pnb208w1"");//
  35 |
> 36 | ShaPasswordEncoder encoder = new ShaPasswordEncoder(12);//
  37 |
  38 | SecretKey key = new SecretKeySpec(somekeyBytes, ""DESede"");//
  39 |
  40 |
  41 | ic static void safe(String[] args) {
  42 |
  43 | MessageDigest md = MessageDigest.getInstance(""ShA-256"");
  44 |
  45 | DigestUtils.sha3_256(""test"");
  46 | Hashing.sha256().hashString(password,StandardCharsets.UTF_8).toString();
     ^ Col 8
",java.java_insecure_pass
F148,lines,namespace/skims/test/data/lib_root/f148/c_sharp_ftp_insecure_method.cs,8,319,skims,148. Use of an insecure channel - FTP,"Customer information is transmitted over a channel that does not use encryption, so credentials and confidential information can be captured in plain text. in namespace/skims/test/data/lib_root/f148/c_sharp_ftp_insecure_method.cs","
   1 | sing System;
   2 | ystem.Net;
   3 | ystem.Net.FtpClient;
   4 |
   5 | ce Examples {
   6 | lic static class ConnectExample {
   7 |  public static void Connect() {
>  8 |      using (FtpClient conn = new FtpClient()) {
   9 |          conn.Host = ""localhost"";
  10 |          conn.Credentials = new NetworkCredential(""ftptest"", ""ftptest"");
  11 |          conn.Connect();
  12 |      }
  13 |  }
  14 |
  15 |
     ^ Col 7
",c_sharp.cs_insecure_channel
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs,18,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs","
   1 | ing System;
   2 | ass jwtbuild {
   3 |
   4 |   public static void Main() {
   5 |
   6 |       IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
   7 |
   8 |       var insecure_decode = decoder.Decode(token, secret, verify: false);
   9 |
  10 |       var secure_decode = decoder.Decode(token, secret, verify: true);
  11 |
  12 |       var insecure_decode2 = decoder.Decode(token, secret, false);
  13 |
  14 |       var secure_decode2 = decoder.Decode(token, secret, true);
  15 |
  16 |       bool verified = false;
  17 |       var insecure_decode3 = decoder.Decode(token, secret, verified);
> 18 |       var insecure_decode3 = decoder.Decode(token, secret, verify: verified);
  19 |   }
  20 |
     ^ Col 2
",c_sharp.c_sharp_verify_decoder
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs,17,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs","
   1 | ing System;
   2 | ass jwtbuild {
   3 |
   4 |   public static void Main() {
   5 |
   6 |       IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
   7 |
   8 |       var insecure_decode = decoder.Decode(token, secret, verify: false);
   9 |
  10 |       var secure_decode = decoder.Decode(token, secret, verify: true);
  11 |
  12 |       var insecure_decode2 = decoder.Decode(token, secret, false);
  13 |
  14 |       var secure_decode2 = decoder.Decode(token, secret, true);
  15 |
  16 |       bool verified = false;
> 17 |       var insecure_decode3 = decoder.Decode(token, secret, verified);
  18 |       var insecure_decode3 = decoder.Decode(token, secret, verify: verified);
  19 |   }
  20 |
     ^ Col 2
",c_sharp.c_sharp_verify_decoder
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs,12,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs","
   1 | ing System;
   2 | ass jwtbuild {
   3 |
   4 |   public static void Main() {
   5 |
   6 |       IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
   7 |
   8 |       var insecure_decode = decoder.Decode(token, secret, verify: false);
   9 |
  10 |       var secure_decode = decoder.Decode(token, secret, verify: true);
  11 |
> 12 |       var insecure_decode2 = decoder.Decode(token, secret, false);
  13 |
  14 |       var secure_decode2 = decoder.Decode(token, secret, true);
  15 |
  16 |       bool verified = false;
  17 |       var insecure_decode3 = decoder.Decode(token, secret, verified);
  18 |       var insecure_decode3 = decoder.Decode(token, secret, verify: verified);
  19 |   }
  20 |
     ^ Col 2
",c_sharp.c_sharp_verify_decoder
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs,8,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_decoder_test.cs","
   1 | sing System;
   2 | lass jwtbuild {
   3 |
   4 |    public static void Main() {
   5 |
   6 |        IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
   7 |
>  8 |        var insecure_decode = decoder.Decode(token, secret, verify: false);
   9 |
  10 |        var secure_decode = decoder.Decode(token, secret, verify: true);
  11 |
  12 |        var insecure_decode2 = decoder.Decode(token, secret, false);
  13 |
  14 |        var secure_decode2 = decoder.Decode(token, secret, true);
  15 |
  16 |        bool verified = false;
  17 |        var insecure_decode3 = decoder.Decode(token, secret, verified);
  18 |        var insecure_decode3 = decoder.Decode(token, secret, verify: verified);
  19 |    }
  20 |
     ^ Col 1
",c_sharp.c_sharp_verify_decoder
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs,15,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs","
   5 |
   6 |       var decodedtoken1 = decoder.Decode(token, secret, verify: false);
   7 |       var json_deco = decoder.Decode(token, secret, verify: true);
   8 |
   9 |       var decodedtoken2 = new JwtBuilder()
  10 |          .MustVerifySignature()
  11 |          .WithSecret(secret)
  12 |          .Decode(forgedtoken1);
  13 |
  14 |
> 15 |       var decodedtoken2 = new JwtBuilder()
  16 |          .WithSecret(secret)
  17 |          .Decode(forgedtoken1);
  18 |
  19 |       var json = JwtBuilder.Create()
  20 |          .WithAlgorithm(new HMACSHA256Algorithm())
  21 |          .WithSecret(secret)
  22 |          .MustVerifySignature()
  23 |          .Decode(token);
  24 |
  25 |       var json2 = JwtBuilder.Create()
     ^ Col 0
",c_sharp.c_sharp_jwt_signed
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs,30,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs","
  13 |
  14 |
  15 |       var decodedtoken2 = new JwtBuilder()
  16 |          .WithSecret(secret)
  17 |          .Decode(forgedtoken1);
  18 |
  19 |       var json = JwtBuilder.Create()
  20 |          .WithAlgorithm(new HMACSHA256Algorithm())
  21 |          .WithSecret(secret)
  22 |          .MustVerifySignature()
  23 |          .Decode(token);
  24 |
  25 |       var json2 = JwtBuilder.Create()
  26 |          .WithAlgorithm()
  27 |          .WithSecret(secret)
  28 |          .Decode(token);
  29 |
> 30 |       var json3 = JwtBuilder.Create();
  31 |
  32 |    }
  33 | }
     ^ Col 0
",c_sharp.c_sharp_jwt_signed
F017,lines,namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs,25,319,skims,017. Sensitive information sent insecurely,"The system sends sensitive information through a channel or method which does not guarantee its confidentiality or integrity.
 in namespace/skims/test/data/lib_root/f017/c_sharp_sensitive_jwt.cs","
  13 |
  14 |
  15 |       var decodedtoken2 = new JwtBuilder()
  16 |          .WithSecret(secret)
  17 |          .Decode(forgedtoken1);
  18 |
  19 |       var json = JwtBuilder.Create()
  20 |          .WithAlgorithm(new HMACSHA256Algorithm())
  21 |          .WithSecret(secret)
  22 |          .MustVerifySignature()
  23 |          .Decode(token);
  24 |
> 25 |       var json2 = JwtBuilder.Create()
  26 |          .WithAlgorithm()
  27 |          .WithSecret(secret)
  28 |          .Decode(token);
  29 |
  30 |       var json3 = JwtBuilder.Create();
  31 |
  32 |    }
  33 | }
     ^ Col 0
",c_sharp.c_sharp_jwt_signed
F022,lines,namespace/skims/test/data/lib_root/f022/kotlin.kt,10,319,skims,022. Use of an insecure channel,Use of unencrypted protocol in namespace/skims/test/data/lib_root/f022/kotlin.kt,"
   1 | package f022
   2 |
   3 | import org.apache.commons.net.ftp.FTPClient
   4 | import org.apache.commons.net.ftp.FTPSClient
   5 | import org.apache.commons.net.smtp.SMTPClient
   6 | import org.apache.commons.net.smtp.SMTPSClient
   7 | import org.apache.commons.net.telnet.TelnetClient
   8 |
   9 | fun main() {
> 10 |     val telnet = TelnetClient()
  11 |
  12 |     val ftpClient = FTPClient()
  13 |     val ftpsClient = FTPSClient()
  14 |
  15 |     val smtpClient = SMTPClient()
  16 |     val smtpsClient = SMTPSClient()
  17 |
  18 |     val spec1: ConnectionSpec = ConnectionSpec.Builder(
  19 |         ConnectionSpec.CLEARTEXT
  20 |     )
  21 |     val spec2: ConnectionSpec = ConnectionSpec.Builder(
     ^ Col 0
",kotlin.kotlin_unencrypted_channel
F022,lines,namespace/skims/test/data/lib_root/f022/kotlin.kt,12,319,skims,022. Use of an insecure channel,Use of unencrypted protocol in namespace/skims/test/data/lib_root/f022/kotlin.kt,"
   2 |
   3 | import org.apache.commons.net.ftp.FTPClient
   4 | import org.apache.commons.net.ftp.FTPSClient
   5 | import org.apache.commons.net.smtp.SMTPClient
   6 | import org.apache.commons.net.smtp.SMTPSClient
   7 | import org.apache.commons.net.telnet.TelnetClient
   8 |
   9 | fun main() {
  10 |     val telnet = TelnetClient()
  11 |
> 12 |     val ftpClient = FTPClient()
  13 |     val ftpsClient = FTPSClient()
  14 |
  15 |     val smtpClient = SMTPClient()
  16 |     val smtpsClient = SMTPSClient()
  17 |
  18 |     val spec1: ConnectionSpec = ConnectionSpec.Builder(
  19 |         ConnectionSpec.CLEARTEXT
  20 |     )
  21 |     val spec2: ConnectionSpec = ConnectionSpec.Builder(
  22 |         ConnectionSpec.MODERN_TLS
     ^ Col 0
",kotlin.kotlin_unencrypted_channel
F022,lines,namespace/skims/test/data/lib_root/f022/kotlin.kt,15,319,skims,022. Use of an insecure channel,Use of unencrypted protocol in namespace/skims/test/data/lib_root/f022/kotlin.kt,"
   4 | import org.apache.commons.net.ftp.FTPSClient
   5 | import org.apache.commons.net.smtp.SMTPClient
   6 | import org.apache.commons.net.smtp.SMTPSClient
   7 | import org.apache.commons.net.telnet.TelnetClient
   8 |
   9 | fun main() {
  10 |     val telnet = TelnetClient()
  11 |
  12 |     val ftpClient = FTPClient()
  13 |     val ftpsClient = FTPSClient()
  14 |
> 15 |     val smtpClient = SMTPClient()
  16 |     val smtpsClient = SMTPSClient()
  17 |
  18 |     val spec1: ConnectionSpec = ConnectionSpec.Builder(
  19 |         ConnectionSpec.CLEARTEXT
  20 |     )
  21 |     val spec2: ConnectionSpec = ConnectionSpec.Builder(
  22 |         ConnectionSpec.MODERN_TLS
  23 |     )
  24 | }
     ^ Col 0
",kotlin.kotlin_unencrypted_channel
F022,lines,namespace/skims/test/data/lib_root/f022/kotlin.kt,18,319,skims,022. Use of an insecure channel,Use of unencrypted protocol in namespace/skims/test/data/lib_root/f022/kotlin.kt,"
   4 | ort org.apache.commons.net.ftp.FTPSClient
   5 | ort org.apache.commons.net.smtp.SMTPClient
   6 | ort org.apache.commons.net.smtp.SMTPSClient
   7 | ort org.apache.commons.net.telnet.TelnetClient
   8 |
   9 |  main() {
  10 |  val telnet = TelnetClient()
  11 |
  12 |  val ftpClient = FTPClient()
  13 |  val ftpsClient = FTPSClient()
  14 |
  15 |  val smtpClient = SMTPClient()
  16 |  val smtpsClient = SMTPSClient()
  17 |
> 18 |  val spec1: ConnectionSpec = ConnectionSpec.Builder(
  19 |      ConnectionSpec.CLEARTEXT
  20 |  )
  21 |  val spec2: ConnectionSpec = ConnectionSpec.Builder(
  22 |      ConnectionSpec.MODERN_TLS
  23 |  )
  24 |
     ^ Col 3
",kotlin.kotlin_unencrypted_channel
F016,lines,namespace/skims/test/data/lib_root/f016/c_sharp_service_point_manager_disabled.cs,7,326,skims,016. Insecure encryption algorithm - SSL/TLS,"A AppContext.SetSwitch method call sets Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true
 in namespace/skims/test/data/lib_root/f016/c_sharp_service_point_manager_disabled.cs","
  1 | using System;
  2 |
  3 | public class ExampleClass
  4 | {
  5 |     public void ExampleMethod()
  6 |     {
> 7 |         AppContext.SetSwitch(""Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols"", true);
  8 |     }
  9 | }
    ^ Col 0
",c_sharp.c_sharp_service_point_manager_disabled
F016,lines,namespace/skims/test/data/lib_root/f016/c_sharp_weak_protocol.cs (Tls),10,326,skims,016. Insecure encryption algorithm - SSL/TLS,The application makes use of the Tls protocol which is insecure in namespace/skims/test/data/lib_root/f016/c_sharp_weak_protocol.cs,"
   1 |
   2 |
   3 |
   4 |
   5 | eService
   6 |
   7 |
   8 | ervice()
   9 |
> 10 | ntManager.SecurityProtocol = SecurityProtocolType.Tls;
  11 |
  12 |
  13 |
  14 |
     ^ Col 22
",c_sharp.c_sharp_weak_protocol
F016,lines,namespace/skims/test/data/lib_root/f016/c_sharp_httpclient_no_revocation_list.cs,9,326,skims,016. Insecure encryption algorithm - SSL/TLS,"Usar System.Net.Http.HttpClient con su propiedad CheckCertificateRevocationList no establecida en true permitirá que HttpClient acepte los certificados revocados como válidos.
 in namespace/skims/test/data/lib_root/f016/c_sharp_httpclient_no_revocation_list.cs","
   1 | ng System.Net.Http;
   2 |
   3 | ss ExampleClass
   4 |
   5 |  void ExampleMethod()
   6 |  {
   7 |      WinHttpHandler winHttpHandler = new WinHttpHandler();
   8 |      winHttpHandler.CheckCertificateRevocationList = false;
>  9 |      HttpClient httpClient = new HttpClient(winHttpHandler);
  10 |  }
  11 |
     ^ Col 3
",c_sharp.c_sharp_httpclient_no_revocation_list
F016,lines,namespace/skims/test/data/lib_root/f016/c_sharp_insecure_shared_access_protocol.cs,11,326,skims,016. Insecure encryption algorithm - SSL/TLS,"Using the GetSharedAccessSignature method to generate a Shared Access Signature (SAS) with specifying protocols as HttpsOrHttp.
 in namespace/skims/test/data/lib_root/f016/c_sharp_insecure_shared_access_protocol.cs","
   1 | using System;
   2 | using Microsoft.WindowsAzure.Storage;
   3 | using Microsoft.WindowsAzure.Storage.File;
   4 |
   5 | class ExampleClass
   6 | {
   7 |     public void ExampleMethod(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, string groupPolicyIdentifie
   8 |     {
   9 |         CloudFile cloudFile = new CloudFile(null);
  10 |         SharedAccessProtocol protocols = SharedAccessProtocol.HttpsOrHttp;
> 11 |         cloudFile.GetSharedAccessSignature(policy, headers, groupPolicyIdentifier, protocols, ipAddressOrRange);
  12 |     }
  13 | }
     ^ Col 0
",c_sharp.c_sharp_insecure_shared_access_protocol
F034,lines,namespace/skims/test/data/lib_root/f034/java_weak_random.java,9,330,skims,034. Insecure generation of random numbers,"The application uses insecure methods to generate random numbers and assigns them to sensitive parameters
 in namespace/skims/test/data/lib_root/f034/java_weak_random.java","
   1 | import java.util.Random;
   2 |
   3 | public class BenchmarkTest00167 extends HttpServlet {
   4 |  @Override
   5 |  public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
   6 |   long l = new java.util.Random().nextLong();
   7 |   String rememberMeKey = Long.toString(l);
   8 |   String cookieName = ""rememberMe"";
>  9 |     request.getSession().setAttribute(cookieName, rememberMeKey);
  10 |  }
  11 | }
     ^ Col 0
",java.java_weak_random
F034,lines,namespace/skims/test/data/lib_root/f034/js_weak_random.js,7,330,skims,034. Insecure generation of random numbers,Use of Javascript Math.random in namespace/skims/test/data/lib_root/f034/js_weak_random.js,"
   1 | import { Router } from ""express"";
   2 |
   3 | const router = Router();
   4 |
   5 | function routa(req, res) {
   6 |   let key = Math.random().toString();
>  7 |   res.cookie(""rememberKey"", key);
   8 |   res.json({ ok: true });
   9 | }
  10 | router.get(""/test148"", routa);
  11 |
  12 | //Should not report
  13 | const ran_numb = Math.random();
     ^ Col 0
",javascript.javascript_weak_random
F034,lines,namespace/skims/test/data/lib_root/f034/ts_weak_random.ts,6,330,skims,034. Insecure generation of random numbers,Use of Javascript Math.random in namespace/skims/test/data/lib_root/f034/ts_weak_random.ts,"
   1 | import { Router } from ""express"";
   2 |
   3 | const router = Router();
   4 | function routa(req, res) {
   5 |   let key = Math.random().toString();
>  6 |   res.cookie(""rememberKey"", key);
   7 |   res.json({ ok: true });
   8 | }
   9 | router.get(""/test148"", routa);
  10 |
  11 | export default router;
     ^ Col 0
",typescript.typescript_weak_random
F007,lines,namespace/skims/test/data/lib_root/f007/java_csrf_protections_disabled.java,11,352,skims,007. Cross-site request forgery,Disabling of protection mechanism against CSRF attacks in namespace/skims/test/data/lib_root/f007/java_csrf_protections_disabled.java,"
   1 | import java.net.URI;
   2 | import java.net.URISyntaxException;
   3 | import java.util.Map;
   4 | import java.util.Properties;
   5 | import java.time.Duration;
   6 |
   7 | public class MainApplication implements CommandLineRunner {
   8 |
   9 |     public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
  10 |         http.csrf().ignoringAntMatchers(""/route/"");
> 11 |         http.csrf().disable()
  12 |             .headers(headerCustomizer -> {
  13 |                 headerCustomizer.xssProtection().disable();
  14 |                 headerCustomizer.contentSecurityPolicy(""frame-ancestors 'none'"");
  15 |                 headerCustomizer.hsts()
  16 |                     .includeSubdomains(true)
  17 |                     .maxAge(Duration.ofDays(365));
  18 |             });
  19 |         return http.build();
  20 |     }
  21 | }
     ^ Col 0
",java.csrf_protections_disabled
F007,lines,namespace/skims/test/data/lib_root/f007/java_csrf_protections_disabled.java,10,352,skims,007. Cross-site request forgery,Disabling of protection mechanism against CSRF attacks in namespace/skims/test/data/lib_root/f007/java_csrf_protections_disabled.java,"
   1 | import java.net.URI;
   2 | import java.net.URISyntaxException;
   3 | import java.util.Map;
   4 | import java.util.Properties;
   5 | import java.time.Duration;
   6 |
   7 | public class MainApplication implements CommandLineRunner {
   8 |
   9 |     public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
> 10 |         http.csrf().ignoringAntMatchers(""/route/"");
  11 |         http.csrf().disable()
  12 |             .headers(headerCustomizer -> {
  13 |                 headerCustomizer.xssProtection().disable();
  14 |                 headerCustomizer.contentSecurityPolicy(""frame-ancestors 'none'"");
  15 |                 headerCustomizer.hsts()
  16 |                     .includeSubdomains(true)
  17 |                     .maxAge(Duration.ofDays(365));
  18 |             });
  19 |         return http.build();
  20 |     }
  21 | }
     ^ Col 0
",java.csrf_protections_disabled
F160,lines,namespace/skims/test/data/lib_root/f160/c_sharp_file_create_temp_file.cs,10,378,skims,160. Excessive privileges - Temporary Files,Use of C# Path.GetTempFileName in namespace/skims/test/data/lib_root/f160/c_sharp_file_create_temp_file.cs,"
   1 | using System;
   2 | using System.IO;
   3 |
   4 | namespace StreamReadWrite
   5 | {
   6 |     class Program
   7 |     {
   8 |         static void Main(string[] args)
   9 |         {
> 10 |             var tempPath = Path.GetTempFileName();
  11 |             var randomPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
  12 |
  13 |             using (var writer = new StreamWriter(tempPath))
  14 |             {
  15 |                writer.WriteLine(""content"");
  16 |             }
  17 |         }
  18 |     }
  19 | }
     ^ Col 0
",c_sharp.c_sharp_file_create_temp_file
F160,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,8,378,skims,160. Excessive privileges - Temporary Files,Use of Java File.createTempFile in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,"
   1 | import java.io.File;
   2 | import java.nio.file.Files.*;
   3 |
   4 | public class Test {
   5 |     public static void main(String[] args){
   6 |         try {
   7 |         // Insecure
>  8 |         System.out.println(createTempFile(""xxx"", null));
   9 |         } catch (Exception e) {}
  10 |
  11 |         try {
  12 |         // Secure
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
  18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
     ^ Col 0
",java.java_file_create_temp_file
F160,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,18,378,skims,160. Excessive privileges - Temporary Files,Use of Java File.createTempFile in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,"
   8 |         System.out.println(createTempFile(""xxx"", null));
   9 |         } catch (Exception e) {}
  10 |
  11 |         try {
  12 |         // Secure
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
> 18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
  22 |         // Insecure
  23 |         System.out.println(File.createTempFile(""xxx"", attrs=""xxx""));
  24 |         } catch (Exception e) {}
  25 |     }
  26 | }
  27 |
  28 | /*
     ^ Col 0
",java.java_file_create_temp_file
F160,lines,namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,23,378,skims,160. Excessive privileges - Temporary Files,Use of Java File.createTempFile in namespace/skims/test/data/lib_root/f160/java_create_temp_file.java,"
  13 |         System.out.println(createTempFile(""xxx"", attrs=""xxx""));
  14 |         } catch (Exception e) {}
  15 |
  16 |         try {
  17 |         // Insecure
  18 |         System.out.println(File.createTempFile(""xxx"", null));
  19 |         } catch (Exception e) {}
  20 |
  21 |         try {
  22 |         // Insecure
> 23 |         System.out.println(File.createTempFile(""xxx"", attrs=""xxx""));
  24 |         } catch (Exception e) {}
  25 |     }
  26 | }
  27 |
  28 | /*
  29 |  * $ ls -al $(javac Test.java && java Test)
  30 |  *
  31 |  * -rw-r--r-- 1 kamado kamado 0 Aug 28 14:44 /tmp/xxx948760279845756007.tmp
  32 |  *
  33 |  */
     ^ Col 0
",java.java_file_create_temp_file
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,21,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
  14 |         System.exit(0);
  15 |         Runtime.getRuntime().exit(0);
  16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
  19 | System.exit(0);
  20 | Runtime.getRuntime().exit(0);
> 21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,20,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
  14 |         System.exit(0);
  15 |         Runtime.getRuntime().exit(0);
  16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
  19 | System.exit(0);
> 20 | Runtime.getRuntime().exit(0);
  21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,19,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
  14 |         System.exit(0);
  15 |         Runtime.getRuntime().exit(0);
  16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
> 19 | System.exit(0);
  20 | Runtime.getRuntime().exit(0);
  21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,16,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
  14 |         System.exit(0);
  15 |         Runtime.getRuntime().exit(0);
> 16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
  19 | System.exit(0);
  20 | Runtime.getRuntime().exit(0);
  21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,15,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
  14 |         System.exit(0);
> 15 |         Runtime.getRuntime().exit(0);
  16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
  19 | System.exit(0);
  20 | Runtime.getRuntime().exit(0);
  21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F423,lines,namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,14,382,skims,423. Inappropriate coding practices - System exit,Application uses System.exit() in namespace/skims/test/data/lib_root/f423/java_unsafe_exit.java,"
   1 | public class Test{
   2 |     public static void main(String[] args){
   3 |         System.exit(0);
   4 |         Runtime.getRuntime().exit(0);
   5 |         Runtime.getRuntime().halt(0);
   6 |         try {
   7 |             throw new IOException();
   8 |         }
   9 |         catch (IOException e) {
  10 |             System.exit(0);
  11 |         }
  12 |     }
  13 |     public static void test(String[] args){
> 14 |         System.exit(0);
  15 |         Runtime.getRuntime().exit(0);
  16 |         Runtime.getRuntime().halt(0);
  17 |     }
  18 | }
  19 | System.exit(0);
  20 | Runtime.getRuntime().exit(0);
  21 | Runtime.getRuntime().halt(0);
     ^ Col 0
",java.java_uses_exit_method
F280,lines,namespace/skims/test/data/lib_root/f280/js_insecure_construction_of_cookies.js,5,384,skims,280. Session Fixation,"The variables used to create cookies or to set headers are not properly sanitized.
 in namespace/skims/test/data/lib_root/f280/js_insecure_construction_of_cookies.js","
  1 | function vuln (req, res) {
  2 |     const value = req.query.value;
  3 |
  4 |     res.setHeader(""Set-Cookie"", value);  // Noncompliant
> 5 |     res.cookie(""connect.sid"", value);  // Noncompliant
  6 |
  7 |     res.setHeader(""X-Data"", value); // Compliant
  8 |     res.cookie(""data"", value); // Compliant
  9 |   };
    ^ Col 0
",javascript.javascript_non_secure_construction_of_cookies
F280,lines,namespace/skims/test/data/lib_root/f280/js_insecure_construction_of_cookies.js,4,384,skims,280. Session Fixation,"The variables used to create cookies or to set headers are not properly sanitized.
 in namespace/skims/test/data/lib_root/f280/js_insecure_construction_of_cookies.js","
  1 | function vuln (req, res) {
  2 |     const value = req.query.value;
  3 |
> 4 |     res.setHeader(""Set-Cookie"", value);  // Noncompliant
  5 |     res.cookie(""connect.sid"", value);  // Noncompliant
  6 |
  7 |     res.setHeader(""X-Data"", value); // Compliant
  8 |     res.cookie(""data"", value); // Compliant
  9 |   };
    ^ Col 0
",javascript.javascript_non_secure_construction_of_cookies
F280,lines,namespace/skims/test/data/lib_root/f280/ts_insecure_construction_of_cookies.ts,7,384,skims,280. Session Fixation,"The variables used to create cookies or to set headers are not properly sanitized.
 in namespace/skims/test/data/lib_root/f280/ts_insecure_construction_of_cookies.ts","
   1 | declare var module: any;
   2 |
   3 | function ts_vuln (req, res) {
   4 |     const value = req.query.value;
   5 |
   6 |     res.setHeader(""Set-Cookie"", value);  // Noncompliant
>  7 |     res.cookie(""connect.sid"", value);  // Noncompliant
   8 |
   9 |     res.setHeader(""X-Data"", value); // Compliant
  10 |     res.cookie(""data"", value); // Compliant
  11 |   };
     ^ Col 0
",typescript.typescript_non_secure_construction_of_cookies
F280,lines,namespace/skims/test/data/lib_root/f280/ts_insecure_construction_of_cookies.ts,6,384,skims,280. Session Fixation,"The variables used to create cookies or to set headers are not properly sanitized.
 in namespace/skims/test/data/lib_root/f280/ts_insecure_construction_of_cookies.ts","
   1 | declare var module: any;
   2 |
   3 | function ts_vuln (req, res) {
   4 |     const value = req.query.value;
   5 |
>  6 |     res.setHeader(""Set-Cookie"", value);  // Noncompliant
   7 |     res.cookie(""connect.sid"", value);  // Noncompliant
   8 |
   9 |     res.setHeader(""X-Data"", value); // Compliant
  10 |     res.cookie(""data"", value); // Compliant
  11 |   };
     ^ Col 0
",typescript.typescript_non_secure_construction_of_cookies
F060,lines,namespace/skims/test/data/lib_root/f060/c_sharp_cert_validation.cs,8,396,skims,060. Insecure service configuration - Host verification,Server certificates should be verified during SSL/TLS connections in namespace/skims/test/data/lib_root/f060/c_sharp_cert_validation.cs,"
   1 | using System;
   2 | using System.IO;
   3 | using System.Security.Cryptography;
   4 | class Test {
   5 |
   6 |   public static void unsafe1() {
   7 |     //There is an option in the callback method that sets all certificates to true
>  8 |     ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, errors) => {return true;};
   9 |   }
  10 |
  11 |   public static void unsafe2() {
  12 |     // Directly setting the validation to all true
  13 |     ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, errors) => true;
  14 |   }
  15 |
  16 |   public static void safe() {
  17 |     // Trust only some certificates
  18 |     ServicePointManager.ServerCertificateValidationCallback +=
  19 |     (sender, certificate, chain, errors) =>
  20 |     {
  21 |         if (development) return true; // for development, trust all certificates
     ^ Col 0
",c_sharp.c_sharp_insecure_certificate_validation
F060,lines,namespace/skims/test/data/lib_root/f060/c_sharp_cert_validation.cs,13,396,skims,060. Insecure service configuration - Host verification,Server certificates should be verified during SSL/TLS connections in namespace/skims/test/data/lib_root/f060/c_sharp_cert_validation.cs,"
   3 | using System.Security.Cryptography;
   4 | class Test {
   5 |
   6 |   public static void unsafe1() {
   7 |     //There is an option in the callback method that sets all certificates to true
   8 |     ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, errors) => {return true;};
   9 |   }
  10 |
  11 |   public static void unsafe2() {
  12 |     // Directly setting the validation to all true
> 13 |     ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, errors) => true;
  14 |   }
  15 |
  16 |   public static void safe() {
  17 |     // Trust only some certificates
  18 |     ServicePointManager.ServerCertificateValidationCallback +=
  19 |     (sender, certificate, chain, errors) =>
  20 |     {
  21 |         if (development) return true; // for development, trust all certificates
  22 |         return errors == SslPolicyErrors.None && validCerts.Contains(certificate.GetCertHashString());
  23 |     };
     ^ Col 0
",c_sharp.c_sharp_insecure_certificate_validation
F060,lines,namespace/skims/test/data/lib_root/f060/js_unsafe_origin.js,2,396,skims,060. Insecure service configuration - Host verification,While performing communication between windows objects of different origins we must validate the identity of those origins. in namespace/skims/test/data/lib_root/f060/js_unsafe_origin.js,"
  1 | var iframe = document.getElementById(""testiframe"");
> 2 | iframe.contentWindow.postMessage(""secret"", ""*""); // Noncompliant: * is used
  3 |
  4 | var secframe = document.getElementById(""testsecureiframe"");
  5 | secframe.contentWindow.postMessage(""hello"", ""https://secure.example.com""); // Compliant
    ^ Col 0
",javascript.javascript_unsafe_origin
F060,lines,namespace/skims/test/data/lib_root/f060/ts_unsafe_origin.ts,2,396,skims,060. Insecure service configuration - Host verification,While performing communication between windows objects of different origins we must validate the identity of those origins. in namespace/skims/test/data/lib_root/f060/ts_unsafe_origin.ts,"
  1 | var iframe = document.getElementById(""testiframe"");
> 2 | iframe.contentWindow.postMessage(""secret"", ""*""); // Noncompliant: * is used
  3 |
  4 | var secframe = document.getElementById(""testsecureiframe"");
  5 | secframe.contentWindow.postMessage(""hello"", ""https://secure.example.com""); // Compliant
    ^ Col 0
",typescript.typescript_unsafe_origin
F211,lines,namespace/skims/test/data/lib_root/f211/c_sharp_regex_injection.cs,10,405,skims,211. Asymmetric denial of service - ReDoS,"Potentially untrusted HTTP request input reaches a regular expression.
 in namespace/skims/test/data/lib_root/f211/c_sharp_regex_injection.cs","
   1 | using System;
   2 | using System.Text.RegularExpressions;
   3 |
   4 | public partial class WebForm : System.Web.UI.Page
   5 | {
   6 |
   7 |     protected void Page_Load(object sender, EventArgs e)
   8 |     {
   9 |         string findTerm = Request.Form[""findTerm""];
> 10 |         Match m = Regex.Match(SearchableText, ""^term="" + findTerm);
  11 |     }
  12 | }
     ^ Col 0
",csharp.csharp_regex_injection
F211,lines,namespace/skims/test/data/lib_root/f211/js_regex_injection.js,12,405,skims,211. Asymmetric denial of service - ReDoS,"Potentially untrusted HTTP request input reaches a regular expression.
 in namespace/skims/test/data/lib_root/f211/js_regex_injection.js","
   1 | const escapeStringRegexp = require('escape-string-regexp');
   2 | const safe = require('safe-regex');
   3 |
   4 | function vuln_two(req, res) {
   5 |   const pattern1 = RegExp(req.query.pattern); // Noncompliant
   6 |   pattern1.test(req.query.input);
   7 | }
   8 |
   9 |
  10 | function vuln_one(req, res) {
  11 |   if(safe(req.query.pattern)) {
> 12 |     const regex = RegExp(req.query.pattern); // Noncompliant
  13 |     regex.test(req.query.input);
  14 |   }
  15 | }
  16 |
  17 |
  18 | function secure(req, res) {
  19 |   const pattern = RegExp(escapeStringRegexp(req.query.pattern)); // Compliant
  20 |   pattern.test(req.query.input);
  21 | }
     ^ Col 0
",javascript.js_regex_injection
F211,lines,namespace/skims/test/data/lib_root/f211/js_regex_injection.js,5,405,skims,211. Asymmetric denial of service - ReDoS,"Potentially untrusted HTTP request input reaches a regular expression.
 in namespace/skims/test/data/lib_root/f211/js_regex_injection.js","
   1 | const escapeStringRegexp = require('escape-string-regexp');
   2 | const safe = require('safe-regex');
   3 |
   4 | function vuln_two(req, res) {
>  5 |   const pattern1 = RegExp(req.query.pattern); // Noncompliant
   6 |   pattern1.test(req.query.input);
   7 | }
   8 |
   9 |
  10 | function vuln_one(req, res) {
  11 |   if(safe(req.query.pattern)) {
  12 |     const regex = RegExp(req.query.pattern); // Noncompliant
  13 |     regex.test(req.query.input);
  14 |   }
  15 | }
  16 |
  17 |
  18 | function secure(req, res) {
  19 |   const pattern = RegExp(escapeStringRegexp(req.query.pattern)); // Compliant
  20 |   pattern.test(req.query.input);
  21 | }
     ^ Col 0
",javascript.js_regex_injection
F211,lines,namespace/skims/test/data/lib_root/f211/ts_regex_injection.ts,12,405,skims,211. Asymmetric denial of service - ReDoS,"Potentially untrusted HTTP request input reaches a regular expression.
 in namespace/skims/test/data/lib_root/f211/ts_regex_injection.ts","
   1 | const escapeStringRegexp = require('escape-string-regexp');
   2 | const safe = require('safe-regex');
   3 |
   4 | function vuln_two(req, res) {
   5 |   const pattern1 = RegExp(req.query.pattern); // Noncompliant
   6 |   pattern1.test(req.query.input);
   7 | }
   8 |
   9 |
  10 | function vuln_one(req, res) {
  11 |   if(safe(req.query.pattern)) {
> 12 |     const regex = RegExp(req.query.pattern); // Noncompliant
  13 |     regex.test(req.query.input);
  14 |   }
  15 | }
  16 |
  17 |
  18 | function secure(req, res) {
  19 |   const pattern = RegExp(escapeStringRegexp(req.query.pattern)); // Compliant
  20 |   pattern.test(req.query.input);
  21 | }
     ^ Col 0
",typescript.ts_regex_injection
F211,lines,namespace/skims/test/data/lib_root/f211/ts_regex_injection.ts,5,405,skims,211. Asymmetric denial of service - ReDoS,"Potentially untrusted HTTP request input reaches a regular expression.
 in namespace/skims/test/data/lib_root/f211/ts_regex_injection.ts","
   1 | const escapeStringRegexp = require('escape-string-regexp');
   2 | const safe = require('safe-regex');
   3 |
   4 | function vuln_two(req, res) {
>  5 |   const pattern1 = RegExp(req.query.pattern); // Noncompliant
   6 |   pattern1.test(req.query.input);
   7 | }
   8 |
   9 |
  10 | function vuln_one(req, res) {
  11 |   if(safe(req.query.pattern)) {
  12 |     const regex = RegExp(req.query.pattern); // Noncompliant
  13 |     regex.test(req.query.input);
  14 |   }
  15 | }
  16 |
  17 |
  18 | function secure(req, res) {
  19 |   const pattern = RegExp(escapeStringRegexp(req.query.pattern)); // Compliant
  20 |   pattern.test(req.query.input);
  21 | }
     ^ Col 0
",typescript.ts_regex_injection
F211,lines,namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs,12,405,skims,211. Asymmetric denial of service - ReDoS,"Regular expressions should not be vulnerable to Denial of Service attacks
 in namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs","
   2 | namespace Controllers
   3 | {
   4 |     public class Controller : Controller
   5 |     {
   6 |         public IActionResult Validate(HttpRequest req, string regex)
   7 |         {
   8 |             string input = req.QueryString[""command""];
   9 |             var pattern = @""^(([a-z])+.)+[A-Z]([a-z])+$"";
  10 |
  11 |             Regex myreg = new Regex(pattern, RegexOptions.IgnoreCase);
> 12 |             bool unsafe = myreg.IsMatch(input);
  13 |
  14 |             bool unsafe2 = myreg.Matches(input, pattern);
  15 |             bool unsafe3 = myreg.Match(input, @""^(([a-z])+.)+"");
  16 |
  17 |             bool safe = myreg.IsMatch(""mystring"", pattern);
  18 |
  19 |             string safeInput = reg.Escape(pattern);
  20 |             bool safe2 = myreg.IsMatch(input, safeInput);
  21 |
  22 |             bool safe3 = myreg.IsMatch(input, pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(1));
     ^ Col 0
",c_sharp.csharp_vuln_regular_expression
F211,lines,namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs,14,405,skims,211. Asymmetric denial of service - ReDoS,"Regular expressions should not be vulnerable to Denial of Service attacks
 in namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs","
   4 |     public class Controller : Controller
   5 |     {
   6 |         public IActionResult Validate(HttpRequest req, string regex)
   7 |         {
   8 |             string input = req.QueryString[""command""];
   9 |             var pattern = @""^(([a-z])+.)+[A-Z]([a-z])+$"";
  10 |
  11 |             Regex myreg = new Regex(pattern, RegexOptions.IgnoreCase);
  12 |             bool unsafe = myreg.IsMatch(input);
  13 |
> 14 |             bool unsafe2 = myreg.Matches(input, pattern);
  15 |             bool unsafe3 = myreg.Match(input, @""^(([a-z])+.)+"");
  16 |
  17 |             bool safe = myreg.IsMatch(""mystring"", pattern);
  18 |
  19 |             string safeInput = reg.Escape(pattern);
  20 |             bool safe2 = myreg.IsMatch(input, safeInput);
  21 |
  22 |             bool safe3 = myreg.IsMatch(input, pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(1));
  23 |
  24 |             Regex myreg2 = new Regex(pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(1));
     ^ Col 0
",c_sharp.csharp_vuln_regular_expression
F211,lines,namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs,15,405,skims,211. Asymmetric denial of service - ReDoS,"Regular expressions should not be vulnerable to Denial of Service attacks
 in namespace/skims/test/data/lib_root/f211/c_sharp_vuln_regex.cs","
   5 |     {
   6 |         public IActionResult Validate(HttpRequest req, string regex)
   7 |         {
   8 |             string input = req.QueryString[""command""];
   9 |             var pattern = @""^(([a-z])+.)+[A-Z]([a-z])+$"";
  10 |
  11 |             Regex myreg = new Regex(pattern, RegexOptions.IgnoreCase);
  12 |             bool unsafe = myreg.IsMatch(input);
  13 |
  14 |             bool unsafe2 = myreg.Matches(input, pattern);
> 15 |             bool unsafe3 = myreg.Match(input, @""^(([a-z])+.)+"");
  16 |
  17 |             bool safe = myreg.IsMatch(""mystring"", pattern);
  18 |
  19 |             string safeInput = reg.Escape(pattern);
  20 |             bool safe2 = myreg.IsMatch(input, safeInput);
  21 |
  22 |             bool safe3 = myreg.IsMatch(input, pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(1));
  23 |
  24 |             Regex myreg2 = new Regex(pattern, RegexOptions.IgnoreCase, TimeSpan.FromSeconds(1));
  25 |             bool safe4 = myreg2.IsMatch(input);
     ^ Col 0
",c_sharp.csharp_vuln_regular_expression
F211,lines,namespace/skims/test/data/lib_root/f211/java_vuln_regex.java,6,405,skims,211. Asymmetric denial of service - ReDoS,"Regular expressions should not be vulnerable to Denial of Service attacks
 in namespace/skims/test/data/lib_root/f211/java_vuln_regex.java","
   1 | public class Test{
   2 | public boolean validate(javax.servlet.http.HttpServletRequest request) {
   3 |   String regex = ""(A+)+"";
   4 |   String input = request.getParameter(""input"");
   5 |
>  6 |   input.matches(regex);  // Not-safe
   7 | }
   8 |
   9 | public boolean validate(javax.servlet.http.HttpServletRequest request) {
  10 |   String regex = ""(A+)+"";
  11 |   String input = request.getParameter(""input"");
  12 |
  13 |   input.matches(Pattern.quote(regex));  // Safe
  14 |
  15 | }
  16 |
  17 | public boolean validate(javax.servlet.http.HttpServletRequest request) {
  18 |   String regex = Pattern.quote(""(A+)+"");
  19 |   String input = request.getParameter(""input"");
  20 |
  21 |   input.matches(regex);  // Safe
     ^ Col 0
",java.java_vuln_regex
F413,lines,namespace/skims/test/data/lib_root/f413/c_sharp_insecure_assembly_load.cs,10,434,skims,413. Insecure file upload - DLL Injection,Potentially untrusted HTTP request input reaches a method that loads an assembly. in namespace/skims/test/data/lib_root/f413/c_sharp_insecure_assembly_load.cs,"
   1 | using System;
   2 | using System.Reflection;
   3 |
   4 | public partial class WebForm : System.Web.UI.Page
   5 | {
   6 |     protected void Page_Load(object sender, EventArgs e)
   7 |     {
   8 |         string input = Request.Form[""in""];
   9 |         byte[] rawAssembly = Convert.FromBase64String(input);
> 10 |         Assembly.Load(rawAssembly);
  11 |     }
  12 | }
     ^ Col 0
",csharp.csharp_insecure_assembly_load
F343,lines,namespace/skims/test/data/lib_root/f343/js_insecure_plugin.js,6,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/js_insecure_plugin.js,"
   1 | const CompressionPlugin = require(""compression-webpack-plugin"");
   2 |
   3 | // must fail line 6
   4 | new CompressionPlugin({
   5 |     filename: ""[path][base].gz"",
>  6 |     algorithm: ""gzip"",
   7 |     test: /\.js$|\.css$|\.html$/,
   8 |     threshold: 10240,
   9 |     minRatio: 0.8,
  10 | });
     ^ Col 0
",javascript.javascript_insecure_compression_algorithm
F343,lines,namespace/skims/test/data/lib_root/f343/js_insecure_plugin_alias.js,6,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/js_insecure_plugin_alias.js,"
   1 | const anyName = require(""compression-webpack-plugin"");
   2 |
   3 | // must fail line 6
   4 | new anyName({
   5 |     filename: ""[path][base].gz"",
>  6 |     algorithm: ""gzip"",
   7 |     test: /\.js$|\.css$|\.html$/,
   8 |     threshold: 10240,
   9 |     minRatio: 0.8,
  10 | });
     ^ Col 0
",javascript.javascript_insecure_compression_algorithm
F343,lines,namespace/skims/test/data/lib_root/f343/js_insecure_plugin_default.js,4,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/js_insecure_plugin_default.js,"
  1 | const CompressionPlugin = require(""compression-webpack-plugin"");
  2 |
  3 | // must fail line 4
> 4 | new CompressionPlugin({
  5 |   filename: ""[path][base].gz"",
  6 |   test: /\.js$|\.css$|\.html$/,
  7 |   threshold: 10240,
  8 |   minRatio: 0.8,
  9 | });
    ^ Col 0
",javascript.javascript_insecure_compression_algorithm
F343,lines,namespace/skims/test/data/lib_root/f343/js_insecure_plugin_safe.js,6,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/js_insecure_plugin_safe.js,"
   1 | const CompressionPlugin = require(""compression-webpack-plugin"");
   2 |
   3 | // must fail line 6
   4 | const opt = {
   5 |   filename: ""[path][base].gz"",
>  6 |   algorithm: ""gzip"",
   7 |   test: /\.js$|\.css$|\.html$/,
   8 |   threshold: 10240,
   9 |   minRatio: 0.8,
  10 | };
  11 |
  12 | new CompressionPlugin(opt);
  13 |
  14 | // safe
  15 | const opt2 = {
  16 |   filename: ""[path][base].br"",
  17 |   algorithm: ""brotliCompress"",
  18 |   test: /\.(js|css|html|svg)$/,
  19 |   compressionOptions: {
  20 |     params: {
  21 |       [zlib.constants.BROTLI_PARAM_QUALITY]: 11,
     ^ Col 0
",javascript.javascript_insecure_compression_algorithm
F343,lines,namespace/skims/test/data/lib_root/f343/ts_insecure_plugin_alias.ts,6,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/ts_insecure_plugin_alias.ts,"
   1 | import CompressionPlugin from ""compression-webpack-plugin"";
   2 |
   3 | // Must fail line 6
   4 | new CompressionPlugin({
   5 |     filename: ""[path][base].gz"",
>  6 |     algorithm: ""gzip"",
   7 |     test: /\.js$|\.css$|\.html$/,
   8 |     threshold: 10240,
   9 |     minRatio: 0.8,
  10 | });
  11 |
  12 | const pluginOpts = {
  13 |     filename: ""[path][base].br"",
  14 |     algorithm: ""brotliCompress"",
  15 |     test: /\.(js|css|html|svg)$/,
  16 |     compressionOptions: {
  17 |       params: {
  18 |         [zlib.constants.BROTLI_PARAM_QUALITY]: 11,
  19 |       },
  20 |     },
  21 |     threshold: 10240,
     ^ Col 0
",typescript.typescript_insecure_compression_algorithm
F343,lines,namespace/skims/test/data/lib_root/f343/ts_insecure_plugin_alias.ts,29,444,skims,343. Insecure service configuration - BREACH Attack,The application uses an insecure compression algorithm. in namespace/skims/test/data/lib_root/f343/ts_insecure_plugin_alias.ts,"
  15 |     test: /\.(js|css|html|svg)$/,
  16 |     compressionOptions: {
  17 |       params: {
  18 |         [zlib.constants.BROTLI_PARAM_QUALITY]: 11,
  19 |       },
  20 |     },
  21 |     threshold: 10240,
  22 |     minRatio: 0.8,
  23 | };
  24 |
  25 | new CompressionPlugin(pluginOpts);
  26 |
  27 | const pluginOpts2 = {
  28 |     filename: ""[path][base].gz"",
> 29 |     algorithm: ""gzip"",
  30 |     test: /\.js$|\.css$|\.html$/,
  31 |     threshold: 10240,
  32 |     minRatio: 0.8,
  33 |   };
  34 |
  35 | new CompressionPlugin(pluginOpts2);
     ^ Col 0
",typescript.typescript_insecure_compression_algorithm
F089,lines,namespace/skims/test/data/lib_root/f089/java_trustbound_violation.java,9,501,skims,089. Lack of data validation - Trust boundary violation,"The application introduces untrusted data into session attributes, which could lead to injection attacks.
 in namespace/skims/test/data/lib_root/f089/java_trustbound_violation.java","
   1 | import java.io.IOException;
   2 | import javax.servlet.http.HttpServletRequest;
   3 |
   4 | public class test89 extends HttpServlet {
   5 |
   6 |   public void runUnsafe(HttpServletRequest request, HttpServletResponse response) throws IOException {
   7 |
   8 |     param = request.getHeader(""someheader"");
>  9 |     request.getSession().setAttribute( param, ""10340"");
  10 |
  11 |   }
  12 |
  13 | }
     ^ Col 0
",java.java_trust_boundary_violation
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,10,502,skims,096. Insecure deserialization,The way it's deserializing is insecure in namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,"
   1 | ass XmlSerializerTestCase : Controller
   2 |
   3 | c ActionResult unsecuredeserialization(HttpRequest typeName)
   4 |
   5 | /insecure
   6 | pe t = Type.GetType(typeName);
   7 | mlSerializer insec_serial = new XmlSerializer(t);
   8 |
   9 | /insecure
> 10 | mlSerializer insec_serial2 = new XmlSerializer(Type.GetType(typeName));
  11 |
  12 | /secure
  13 | xpectedType obj = null;
  14 | mlSerializer sec_serial = new XmlSerializer(typeof(HttpRequest));
  15 |
  16 | /insecure
  17 | ar req = new HttpRequest();
  18 | ar t2 = Type.GetType(req);
  19 | mlSerializer insec_serial3 = new XmlSerializer(t2);
  20 |
  21 | /secure
     ^ Col 9
",c_sharp.c_sharp_check_xml_serializer
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,7,502,skims,096. Insecure deserialization,The way it's deserializing is insecure in namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,"
   1 | lass XmlSerializerTestCase : Controller
   2 |
   3 | ic ActionResult unsecuredeserialization(HttpRequest typeName)
   4 |
   5 | //insecure
   6 | Tpe t = Type.GetType(typeName);
>  7 | XmlSerializer insec_serial = new XmlSerializer(t);
   8 |
   9 | //insecure
  10 | XmlSerializer insec_serial2 = new XmlSerializer(Type.GetType(typeName));
  11 |
  12 | //secure
  13 | ExpectedType obj = null;
  14 | XmlSerializer sec_serial = new XmlSerializer(typeof(HttpRequest));
  15 |
  16 | //insecure
  17 | var req = new HttpRequest();
  18 | var t2 = Type.GetType(req);
  19 | XmlSerializer insec_serial3 = new XmlSerializer(t2);
  20 |
  21 | //secure
     ^ Col 8
",c_sharp.c_sharp_check_xml_serializer
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,19,502,skims,096. Insecure deserialization,The way it's deserializing is insecure in namespace/skims/test/data/lib_root/f096/c_sharp_xmlserializer.cs,"
   5 | /insecure
   6 | pe t = Type.GetType(typeName);
   7 | mlSerializer insec_serial = new XmlSerializer(t);
   8 |
   9 | /insecure
  10 | mlSerializer insec_serial2 = new XmlSerializer(Type.GetType(typeName));
  11 |
  12 | /secure
  13 | xpectedType obj = null;
  14 | mlSerializer sec_serial = new XmlSerializer(typeof(HttpRequest));
  15 |
  16 | /insecure
  17 | ar req = new HttpRequest();
  18 | ar t2 = Type.GetType(req);
> 19 | mlSerializer insec_serial3 = new XmlSerializer(t2);
  20 |
  21 | /secure
  22 | tring greeting = ""hello"";
  23 | mlSerializer sec_serial2 = new XmlSerializer(Type.GetType(greeting));
  24 |
  25 |
     ^ Col 9
",c_sharp.c_sharp_check_xml_serializer
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_js_deserialization.cs,7,502,skims,096. Insecure deserialization,"A JavaScriptSerializer deserialization method was called or referenced after initializing with a SimpleTypeResolver.
 in namespace/skims/test/data/lib_root/f096/c_sharp_js_deserialization.cs","
   1 | g System.Web.Script.Serialization;
   2 |
   3 | ic class ExampleClass
   4 |
   5 | public T Deserialize<T>(string str)
   6 | {
>  7 |     JavaScriptSerializer s = new JavaScriptSerializer(new SimpleTypeResolver());
   8 |     return s.Deserialize<T>(str);
   9 | }
  10 |
     ^ Col 4
",c_sharp.c_sharp_js_deserialization
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_type_name_handling.cs,9,502,skims,096. Insecure deserialization,"A Newtonsoft.Json.TypeNameHandling enumeration value other than None should not be referenced.
 in namespace/skims/test/data/lib_root/f096/c_sharp_type_name_handling.cs","
   1 | using Newtonsoft.Json;
   2 |
   3 | public class ExampleClass
   4 | {
   5 |
   6 |     public void ExampleClass()
   7 |     {
   8 |         var Settings = new JsonSerializerSettings();
>  9 |         Settings.TypeNameHandling = TypeNameHandling.All;
  10 |     }
  11 | }
     ^ Col 0
",c_sharp.c_sharp_type_name_handling
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs,11,502,skims,096. Insecure deserialization,"The system deserializes objects without first validating their content nor casting them to a specific type.
 in namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs","
   1 | em.Runtime.Serialization.Formatters.Binary;
   2 | em.Runtime.Serialization.IFormatter;
   3 | Controllers
   4 |
   5 |  class Encrypt
   6 |
   7 | blic static void Process(string secret)
   8 |
   9 |   BinaryFormatter formatter = new BinaryFormatter();
  10 |   LosFormatter formatter2 = new LosFormatter();
> 11 |   SoapFormatter formatter3 = new SoapFormatter();
  12 |   NetDataContractSerializer formatter4  = new NetDataContractSerializer();
  13 |
  14 |
  15 |
     ^ Col 10
",c_sharp.c_sharp_insecure_deserialization
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs,9,502,skims,096. Insecure deserialization,"The system deserializes objects without first validating their content nor casting them to a specific type.
 in namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs","
   1 | m.Runtime.Serialization.Formatters.Binary;
   2 | m.Runtime.Serialization.IFormatter;
   3 | ontrollers
   4 |
   5 | class Encrypt
   6 |
   7 | lic static void Process(string secret)
   8 |
>  9 |  BinaryFormatter formatter = new BinaryFormatter();
  10 |  LosFormatter formatter2 = new LosFormatter();
  11 |  SoapFormatter formatter3 = new SoapFormatter();
  12 |  NetDataContractSerializer formatter4  = new NetDataContractSerializer();
  13 |
  14 |
  15 |
     ^ Col 11
",c_sharp.c_sharp_insecure_deserialization
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs,12,502,skims,096. Insecure deserialization,"The system deserializes objects without first validating their content nor casting them to a specific type.
 in namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs","
   1 | rialization.Formatters.Binary;
   2 | rialization.IFormatter;
   3 |
   4 |
   5 | t
   6 |
   7 | oid Process(string secret)
   8 |
   9 | tter formatter = new BinaryFormatter();
  10 | r formatter2 = new LosFormatter();
  11 | er formatter3 = new SoapFormatter();
> 12 | ractSerializer formatter4  = new NetDataContractSerializer();
  13 |
  14 |
  15 |
     ^ Col 23
",c_sharp.c_sharp_insecure_deserialization
F096,lines,namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs,10,502,skims,096. Insecure deserialization,"The system deserializes objects without first validating their content nor casting them to a specific type.
 in namespace/skims/test/data/lib_root/f096/c_sharp_insecure_deserialization.cs","
   1 | tem.Runtime.Serialization.Formatters.Binary;
   2 | tem.Runtime.Serialization.IFormatter;
   3 |  Controllers
   4 |
   5 | c class Encrypt
   6 |
   7 | ublic static void Process(string secret)
   8 |
   9 |    BinaryFormatter formatter = new BinaryFormatter();
> 10 |    LosFormatter formatter2 = new LosFormatter();
  11 |    SoapFormatter formatter3 = new SoapFormatter();
  12 |    NetDataContractSerializer formatter4  = new NetDataContractSerializer();
  13 |
  14 |
  15 |
     ^ Col 9
",c_sharp.c_sharp_insecure_deserialization
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,16,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
   6 | const unsafeWindowFeatures = ""noreferrer"";
   7 |
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
> 16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,17,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
   7 |
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
> 17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
  27 | window.open(externalUrl, safeName);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,18,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
> 18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
  27 | window.open(externalUrl, safeName);
  28 | window.open(externalUrl, unsafeName, safeWindowFeatures);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,33,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
  27 | window.open(externalUrl, safeName);
  28 | window.open(externalUrl, unsafeName, safeWindowFeatures);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
  31 | window.open(externalUrl, unsafeName, unsafeWindowFeatures);
  32 | window.open(externalUrl, unsafeName);
> 33 | window.open(externalUrl);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,32,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
  27 | window.open(externalUrl, safeName);
  28 | window.open(externalUrl, unsafeName, safeWindowFeatures);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
  31 | window.open(externalUrl, unsafeName, unsafeWindowFeatures);
> 32 | window.open(externalUrl, unsafeName);
  33 | window.open(externalUrl);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js,31,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/js_has_tabnabbing.js","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(internalUrl);
  25 | window.open(internalUrl, unsafeName, unsafeWindowFeatures);
  26 | window.open(externalUrl, safeName, unsafeWindowFeatures);
  27 | window.open(externalUrl, safeName);
  28 | window.open(externalUrl, unsafeName, safeWindowFeatures);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
> 31 | window.open(externalUrl, unsafeName, unsafeWindowFeatures);
  32 | window.open(externalUrl, unsafeName);
  33 | window.open(externalUrl);
     ^ Col 0
",javascript.javascript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,16,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
   6 | const unsafeWF: string = ""noreferrer"";
   7 |
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
> 16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,17,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
   7 |
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
> 17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
  27 | window.open(extUrl, safe);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,18,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
   8 | //String literals
   9 |
  10 | // Safe cases Skims must not mark any of following
  11 | window.open(""/internal"");
  12 | window.open(""https://External.com"", ""_parent"");
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
> 18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
  27 | window.open(extUrl, safe);
  28 | window.open(extUrl, unsafe, safeWF);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,33,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
  27 | window.open(extUrl, safe);
  28 | window.open(extUrl, unsafe, safeWF);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
  31 | window.open(extUrl, unsafe, unsafeWF);
  32 | window.open(extUrl, unsafe);
> 33 | window.open(extUrl);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,32,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
  27 | window.open(extUrl, safe);
  28 | window.open(extUrl, unsafe, safeWF);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
  31 | window.open(extUrl, unsafe, unsafeWF);
> 32 | window.open(extUrl, unsafe);
  33 | window.open(extUrl);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F097,lines,namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts,31,502,skims,097. Reverse tabnabbing,"Use of window.open() method without ""noopener, noreferrer"" window features allows target page to change the contents of original page.
 in namespace/skims/test/data/lib_root/f097/ts_has_tabnabbing.ts","
  13 | window.open(""https://External.com"", ""_blank"", ""noreferrer,noopener"");
  14 |
  15 | // Unsafe cases Skims must mark all following cases
  16 | window.open(""https://External.com"");
  17 | window.open(""https://External.com"", ""_blank"");
  18 | window.open(""https://External.com"", ""_blank"", ""Any"");
  19 |
  20 | // Data in variables
  21 |
  22 | // Safe cases Skims must not mark any of following
  23 | window.open();
  24 | window.open(intUrl);
  25 | window.open(intUrl, unsafe, unsafeWF);
  26 | window.open(extUrl, safe, unsafeWF);
  27 | window.open(extUrl, safe);
  28 | window.open(extUrl, unsafe, safeWF);
  29 |
  30 | // Unsafe cases Skims must mark all following cases
> 31 | window.open(extUrl, unsafe, unsafeWF);
  32 | window.open(extUrl, unsafe);
  33 | window.open(extUrl);
     ^ Col 0
",typescript.typescript_has_reverse_tabnabbing
F035,lines,namespace/skims/test/data/lib_root/f035/c_sharp_test_db.cs,10,521,skims,035. Weak credential policy,The system credential policy is not compliant with security regulations in namespace/skims/test/data/lib_root/f035/c_sharp_test_db.cs,"
   1 | namespace Controllers
   2 | {
   3 |     public class DBaccess
   4 |     {
   5 |         public void dbauth()
   6 |         {
   7 |             DbContextOptionsBuilder optionsBuilder = new DbContextOptionsBuilder();
   8 |             //insecure
   9 |             var con_str = ""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password="";
> 10 |             optionsBuilder.UseSqlServer(con_str);
  11 |
  12 |
  13 |             DbContextOptionsBuilder optionsBuilder2 = new DbContextOptionsBuilder();
  14 |             //insecure
  15 |             optionsBuilder2.UseSqlServer(""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password="");
  16 |
  17 |             DbContextOptionsBuilder optionsBuilder3 = new DbContextOptionsBuilder();
  18 |             //secure
  19 |             var con_str2 = ""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=5674_H5lloW0rld"";
  20 |             optionsBuilder3.UseSqlServer(con_str2);
  21 |
     ^ Col 0
",c_sharp.csharp_no_password
F035,lines,namespace/skims/test/data/lib_root/f035/c_sharp_test_db.cs,15,521,skims,035. Weak credential policy,The system credential policy is not compliant with security regulations in namespace/skims/test/data/lib_root/f035/c_sharp_test_db.cs,"
   5 |         public void dbauth()
   6 |         {
   7 |             DbContextOptionsBuilder optionsBuilder = new DbContextOptionsBuilder();
   8 |             //insecure
   9 |             var con_str = ""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password="";
  10 |             optionsBuilder.UseSqlServer(con_str);
  11 |
  12 |
  13 |             DbContextOptionsBuilder optionsBuilder2 = new DbContextOptionsBuilder();
  14 |             //insecure
> 15 |             optionsBuilder2.UseSqlServer(""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password="");
  16 |
  17 |             DbContextOptionsBuilder optionsBuilder3 = new DbContextOptionsBuilder();
  18 |             //secure
  19 |             var con_str2 = ""Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=5674_H5lloW0rld"";
  20 |             optionsBuilder3.UseSqlServer(con_str2);
  21 |
  22 |             DbContextOptionsBuilder optionsBuilder4 = new DbContextOptionsBuilder();
  23 |             //secure
  24 |             var password = ""5674_H5lloW0rld"";
  25 |             var con_str3 = con_str + password;
     ^ Col 0
",c_sharp.csharp_no_password
F035,lines,namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,14,521,skims,035. Weak credential policy,Weak password policy in namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,"
   1 | ï»¿public class Startup
   2 | {
   3 |     public void start(IServiceCollection services)
   4 |     {
   5 |         bool unsafe = false;
   6 |         services.Configure<IdentityOptions>( options =>
   7 |         {
   8 |             options.Password.RequireDigit = true;
   9 |             options.Password.RequireDigit = false;
  10 |             options.Password.RequiredLength = 8;
  11 |             options.Password.RequireNonAlphanumeric = true;
  12 |             options.Password.RequireUppercase = true;
  13 |             options.Password.RequireLowercase = unsafe;
> 14 |             options.Password.RequiredUniqueChars = 5;
  15 |             options.User.RequireUniqueEmail = false;
  16 |         });
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.csharp_weak_credential_policy
F035,lines,namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,13,521,skims,035. Weak credential policy,Weak password policy in namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,"
   1 | ï»¿public class Startup
   2 | {
   3 |     public void start(IServiceCollection services)
   4 |     {
   5 |         bool unsafe = false;
   6 |         services.Configure<IdentityOptions>( options =>
   7 |         {
   8 |             options.Password.RequireDigit = true;
   9 |             options.Password.RequireDigit = false;
  10 |             options.Password.RequiredLength = 8;
  11 |             options.Password.RequireNonAlphanumeric = true;
  12 |             options.Password.RequireUppercase = true;
> 13 |             options.Password.RequireLowercase = unsafe;
  14 |             options.Password.RequiredUniqueChars = 5;
  15 |             options.User.RequireUniqueEmail = false;
  16 |         });
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.csharp_weak_credential_policy
F035,lines,namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,9,521,skims,035. Weak credential policy,Weak password policy in namespace/skims/test/data/lib_root/f035/c_sharp_weak_credential.cs,"
   1 | ï»¿public class Startup
   2 | {
   3 |     public void start(IServiceCollection services)
   4 |     {
   5 |         bool unsafe = false;
   6 |         services.Configure<IdentityOptions>( options =>
   7 |         {
   8 |             options.Password.RequireDigit = true;
>  9 |             options.Password.RequireDigit = false;
  10 |             options.Password.RequiredLength = 8;
  11 |             options.Password.RequireNonAlphanumeric = true;
  12 |             options.Password.RequireUppercase = true;
  13 |             options.Password.RequireLowercase = unsafe;
  14 |             options.Password.RequiredUniqueChars = 5;
  15 |             options.User.RequireUniqueEmail = false;
  16 |         });
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.csharp_weak_credential_policy
F083,lines,namespace/skims/test/data/lib_root/f083/js_xml_parser_injection.js,12,611,skims,083. XML injection (XXE),"Access to external entities in XML parsing is enabled.
 in namespace/skims/test/data/lib_root/f083/js_xml_parser_injection.js","
   2 | const fs = require(""fs"");
   3 |
   4 | function xml_parser_vuln() {
   5 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
   6 |
   7 |   const config = {
   8 |     noblanks: true,
   9 |     noent: true,
  10 |     nocdata: true,
  11 |   };
> 12 |   const xmlDoc = libxmljs.parseXmlString(xml, config); // Noncompliant: noent set to true
  13 |
  14 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
  15 | }
  16 |
  17 | function xml_parser_fail() {
  18 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  19 |
  20 |   const xmlDoc = libxmljs.parseXmlString(xml, {
  21 |     noblanks: true,
  22 |     noent: true,
     ^ Col 0
",javascript.js_xml_parser
F083,lines,namespace/skims/test/data/lib_root/f083/js_xml_parser_injection.js,20,611,skims,083. XML injection (XXE),"Access to external entities in XML parsing is enabled.
 in namespace/skims/test/data/lib_root/f083/js_xml_parser_injection.js","
  10 |     nocdata: true,
  11 |   };
  12 |   const xmlDoc = libxmljs.parseXmlString(xml, config); // Noncompliant: noent set to true
  13 |
  14 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
  15 | }
  16 |
  17 | function xml_parser_fail() {
  18 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  19 |
> 20 |   const xmlDoc = libxmljs.parseXmlString(xml, {
  21 |     noblanks: true,
  22 |     noent: true,
  23 |     nocdata: true,
  24 |   });
  25 | }
  26 |
  27 | function xml_parser_good() {
  28 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  29 |
  30 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
     ^ Col 0
",javascript.js_xml_parser
F083,lines,namespace/skims/test/data/lib_root/f083/ts_xml_parser_injection.ts,14,611,skims,083. XML injection (XXE),"Access to external entities in XML parsing is enabled.
 in namespace/skims/test/data/lib_root/f083/ts_xml_parser_injection.ts","
   4 | const fs = require(""fs"");
   5 |
   6 | function xml_parser_vuln() {
   7 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
   8 |
   9 |   const config = {
  10 |     noblanks: true,
  11 |     noent: true,
  12 |     nocdata: true,
  13 |   };
> 14 |   const xmlDoc = libxmljs.parseXmlString(xml, config); // Noncompliant: noent set to true
  15 |
  16 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
  17 | }
  18 |
  19 | function xml_parser_fail() {
  20 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  21 |
  22 |   const xmlDoc = libxmljs.parseXmlString(xml, {
  23 |     noblanks: true,
  24 |     noent: true,
     ^ Col 0
",typescript.ts_xml_parser
F083,lines,namespace/skims/test/data/lib_root/f083/ts_xml_parser_injection.ts,22,611,skims,083. XML injection (XXE),"Access to external entities in XML parsing is enabled.
 in namespace/skims/test/data/lib_root/f083/ts_xml_parser_injection.ts","
  12 |     nocdata: true,
  13 |   };
  14 |   const xmlDoc = libxmljs.parseXmlString(xml, config); // Noncompliant: noent set to true
  15 |
  16 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
  17 | }
  18 |
  19 | function xml_parser_fail() {
  20 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  21 |
> 22 |   const xmlDoc = libxmljs.parseXmlString(xml, {
  23 |     noblanks: true,
  24 |     noent: true,
  25 |     nocdata: true,
  26 |   });
  27 | }
  28 |
  29 | function xml_parser_good() {
  30 |   const xml = fs.readFileSync(""xxe.xml"", ""utf8"");
  31 |
  32 |   const xmlGoodDoc = libxmljs.parseXmlString(xml); // Compliant: noent set to false by default
     ^ Col 0
",typescript.ts_xml_parser
F042,lines,namespace/skims/test/data/lib_root/f042/java_insecure_cookies.java,9,614,skims,042. Insecurely generated cookies,"The application does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/java_insecure_cookies.java","
   1 | import java.util.Random;
   2 |
   3 | public class test42 extends HttpServlet {
   4 |
   5 |  public void doPost(HttpServletRequest request, HttpServletResponse response) {
   6 |
   7 |   cookie.setSecure(false);
   8 |   cookie.setHttpOnly(true);
>  9 |   response.addCookie(cookie);
  10 |
  11 |  }
  12 |
  13 | }
     ^ Col 0
",java.java_insecure_cookie
F042,lines,namespace/skims/test/data/lib_root/f042/js_insecure_cookies.js,7,614,skims,042. Insecurely generated cookies,"The application does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/js_insecure_cookies.js","
   1 | import { Router } from ""express"";
   2 | var router = Router();
   3 |
   4 | router.get(""test042"", function (req, res) {
   5 |
   6 |   var secure = false;
>  7 |   res.cookie(""SomeCookie"", ""Some Value"", { secure: secure, httpOnly: true });
   8 |   res.send(""anything"");
   9 |
  10 | });
  11 |
  12 | export default router;
     ^ Col 0
",javascript.js_insecurely_generated_cookies
F042,lines,namespace/skims/test/data/lib_root/f042/ts_insecure_cookies.ts,7,614,skims,042. Insecurely generated cookies,"The application does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/ts_insecure_cookies.ts","
   1 | import { Router } from ""express"";
   2 | import { reqData, resData } from ""types.ts"";
   3 | var router = Router();
   4 |
   5 | router.get(""test042"", function (req: reqData, res: resData) {
   6 |   var secure: boolean = false;
>  7 |   res.cookie(""SomeCookie"", ""Some Value"", { secure: secure, httpOnly: true });
   8 |   res.send(""anything"");
   9 |
  10 | });
  11 |
  12 | export default router;
     ^ Col 0
",typescript.typescript_insecurely_generated_cookies
F042,lines,namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs,16,614,skims,042. Insecurely generated cookies,"The system does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs","
   6 |     public class CookieExample
   7 |     {
   8 |         public static void Main(string[] args)
   9 |         {
  10 |             var test = true;
  11 |             var secure_cookie = new HttpCookie(key , value);
  12 |             secure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  13 |             secure_cookie.HttpOnly = true;
  14 |             secure_cookie.Secure = true;
  15 |
> 16 |             var insecure_cookie = new HttpCookie(key , value);
  17 |             insecure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  18 |             insecure_cookie.HttpOnly = true;
  19 |
  20 |             var insecure = new HttpCookie(key , value);
  21 |
  22 |             var secure_cookie2 = new HttpCookie(key , value);
  23 |             secure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  24 |             secure_cookie2.HttpOnly = test;
  25 |             secure_cookie2.Secure = test;
  26 |
     ^ Col 0
",c_sharp.csharp_insecurely_generated_cookies
F042,lines,namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs,20,614,skims,042. Insecurely generated cookies,"The system does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs","
  10 |             var test = true;
  11 |             var secure_cookie = new HttpCookie(key , value);
  12 |             secure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  13 |             secure_cookie.HttpOnly = true;
  14 |             secure_cookie.Secure = true;
  15 |
  16 |             var insecure_cookie = new HttpCookie(key , value);
  17 |             insecure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  18 |             insecure_cookie.HttpOnly = true;
  19 |
> 20 |             var insecure = new HttpCookie(key , value);
  21 |
  22 |             var secure_cookie2 = new HttpCookie(key , value);
  23 |             secure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  24 |             secure_cookie2.HttpOnly = test;
  25 |             secure_cookie2.Secure = test;
  26 |
  27 |             var insecure_cookie2 = new HttpCookie(key , value);
  28 |             insecure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  29 |             insecure_cookie2.HttpOnly = test;
  30 |
     ^ Col 0
",c_sharp.csharp_insecurely_generated_cookies
F042,lines,namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs,31,614,skims,042. Insecurely generated cookies,"The system does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs","
  15 |
  16 |             var insecure_cookie = new HttpCookie(key , value);
  17 |             insecure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  18 |             insecure_cookie.HttpOnly = true;
  19 |
  20 |             var insecure = new HttpCookie(key , value);
  21 |
  22 |             var secure_cookie2 = new HttpCookie(key , value);
  23 |             secure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  24 |             secure_cookie2.HttpOnly = test;
  25 |             secure_cookie2.Secure = test;
  26 |
  27 |             var insecure_cookie2 = new HttpCookie(key , value);
  28 |             insecure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  29 |             insecure_cookie2.HttpOnly = test;
  30 |
> 31 |             var insecure2 = new HttpCookie(key , value);
  32 |             insecure2.Expires = DateTime.Now.AddDays(expireDay);
  33 |         }
  34 |     }
  35 | }
     ^ Col 0
",c_sharp.csharp_insecurely_generated_cookies
F042,lines,namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs,27,614,skims,042. Insecurely generated cookies,"The system does not set security attributes for sensitive cookies, which could cause them to be sent in plain text or disclosed by unauthorized users on the client side.
 in namespace/skims/test/data/lib_root/f042/c_sharp_insecure_cookies.cs","
  15 |
  16 |             var insecure_cookie = new HttpCookie(key , value);
  17 |             insecure_cookie.Expires = DateTime.Now.AddDays(expireDay);
  18 |             insecure_cookie.HttpOnly = true;
  19 |
  20 |             var insecure = new HttpCookie(key , value);
  21 |
  22 |             var secure_cookie2 = new HttpCookie(key , value);
  23 |             secure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  24 |             secure_cookie2.HttpOnly = test;
  25 |             secure_cookie2.Secure = test;
  26 |
> 27 |             var insecure_cookie2 = new HttpCookie(key , value);
  28 |             insecure_cookie2.Expires = DateTime.Now.AddDays(expireDay);
  29 |             insecure_cookie2.HttpOnly = test;
  30 |
  31 |             var insecure2 = new HttpCookie(key , value);
  32 |             insecure2.Expires = DateTime.Now.AddDays(expireDay);
  33 |         }
  34 |     }
  35 | }
     ^ Col 0
",c_sharp.csharp_insecurely_generated_cookies
F021,lines,namespace/skims/test/data/lib_root/f021/java_xpath_injection.java,15,643,skims,021. XPath injection,Dynamic XPath statements are generated without the required data validation. in namespace/skims/test/data/lib_root/f021/java_xpath_injection.java,"
   1 | import java.io.IOException;
   2 | import javax.servlet.http.HttpServletRequest;
   3 |
   4 | public class test21 extends HttpServlet {
   5 |
   6 |   public void runUnsafe(HttpServletRequest request, HttpServletResponse response) throws IOException {
   7 |
   8 |     String param = request.getHeader(""someheader"");
   9 |     javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
  10 |     org.w3c.dom.Document xmlDocument = builder.parse(file);
  11 |     javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
  12 |     javax.xml.xpath.XPath xp = xpf.newXPath();
  13 |
  14 |     String expression = ""/Employees/Employee[@emplid='""+param+""']"";
> 15 |     String result = xp.evaluate(expression, xmlDocument);
  16 |
  17 |   }
  18 |
  19 | }
     ^ Col 0
",java.java_xpath_injection
F021,lines,namespace/skims/test/data/lib_root/f021/js_dynamic_xpath.js,15,643,skims,021. XPath injection,Dynamic XPath statements are generated without the required data validation. in namespace/skims/test/data/lib_root/f021/js_dynamic_xpath.js,"
   2 | var xpath = require(""xpath"");
   3 | let fs = require(""fs"");
   4 | var router = Router();
   5 |
   6 | router.get(""/test142/"", function (req, res) {
   7 |
   8 |   let userData = req.body;
   9 |   let userName = userData.username;
  10 |   let password = userData.password;
  11 |
  12 |   fs.readFinding(""test"", (error, data) => {
  13 |
  14 |     var findUserXPath = `//Employee[UserName/text()='${userName}' and Password/text()='${password}']`;
> 15 |     let result = xpath.select(findUserXPath, doc);
  16 |     return result;
  17 |
  18 |   });
  19 |
  20 | });
  21 |
  22 | export default router;
     ^ Col 0
",javascript.javascript_dynamic_xpath
F021,lines,namespace/skims/test/data/lib_root/f021/ts_dynamic_xpath.ts,17,643,skims,021. XPath injection,Dynamic XPath statements are generated without the required data validation. in namespace/skims/test/data/lib_root/f021/ts_dynamic_xpath.ts,"
   4 | import { fs } from ""fs"";
   5 |
   6 |
   7 | var router = Router();
   8 | router.get(""test021"", function (req: reqData, res: resData) {
   9 |
  10 |   let userData = req.body;
  11 |   let userName = userData.username;
  12 |   let password = userData.password;
  13 |
  14 |   fs.readFinding(""test"", (error: Error, data: readData, doc: docFile) => {
  15 |
  16 |     var findUserXPath = `//Employee[UserName/text()='${userName}' and Password/text()='${password}']`;
> 17 |     let result = xpath.select(findUserXPath, doc);
  18 |     return result;
  19 |
  20 |   });
  21 |
  22 | });
  23 |
  24 | export default router;
     ^ Col 0
",typescript.typescript_dynamic_xpath
F021,lines,namespace/skims/test/data/lib_root/f021/c_sharp_xpath_injection.cs,12,643,skims,021. XPath injection,Potentially untrusted HTTP request input reaches an XPath query in namespace/skims/test/data/lib_root/f021/c_sharp_xpath_injection.cs,"
   1 | sing System;
   2 | sing System.Xml.XPath;
   3 |
   4 | ublic partial class WebForm : System.Web.UI.Page
   5 |
   6 |
   7 |    protected void Page_Load()
   8 |    {
   9 |        string operation = Request.Form[""operation""];
  10 |        XPathNavigator AuthorizedOperations  = new XPathNavigator();
  11 |        // Must report
> 12 |        XPathNavigator node = AuthorizedOperations.SelectSingleNode(operation);
  13 |    }
  14 |
     ^ Col 1
",c_sharp.c_sharp_xpath_injection
F135,lines,namespace/skims/test/data/lib_root/f135/js_unsafe_http_headers.js,5,644,skims,135. Insecure or unset HTTP headers - X-XSS Protection,"Ensure that the HttpHeaders constructor suppresses 'X-XSS-Protection' headers.
 in namespace/skims/test/data/lib_root/f135/js_unsafe_http_headers.js","
   1 | import { HttpHeaders } from ""@angular/common/http"";
   2 |
   3 | export class AppComponent {
   4 |   login(login) {
>  5 |     const headers = new HttpHeaders({
   6 |       ""Content-Type"": ""application/json"",
   7 |       ""X-XSS-Protection"": ""anything"", // Unsafe F135
   8 |       ""X-Frame-Options"": ""anything"", // Unsafe F152
   9 |     });
  10 |   }
  11 | }
     ^ Col 0
",javascript.javascript_unsafe_http_xss_protection
F135,lines,namespace/skims/test/data/lib_root/f135/ts_unsafe_http_headers.ts,9,644,skims,135. Insecure or unset HTTP headers - X-XSS Protection,"Ensure that the HttpHeaders constructor suppresses 'X-XSS-Protection' headers.
 in namespace/skims/test/data/lib_root/f135/ts_unsafe_http_headers.ts","
   1 | import { HttpHeaders } from '@angular/common/http';
   2 | import Observable from '../types.ts';
   3 |
   4 | type LoginModel ={};
   5 | export class AppComponent {
   6 |
   7 |   login(login: LoginModel): Observable<any>{
   8 |
>  9 |     const headers = new HttpHeaders({
  10 |       'Content-Type': 'application/json',
  11 |       'X-XSS-Protection': 'anything', // Unsafe F135
  12 |       'X-Frame-Options': 'anything', // Unsafe F152
  13 |     });
  14 |
  15 |   }
  16 | }
     ^ Col 0
",typescript.typescript_unsafe_http_xss_protection
F414,lines,namespace/skims/test/data/lib_root/f414/c_sharp_disabled_http_header_check.cs,9,644,skims,414. Insecure service configuration - Header Checking,"property EnableHeaderChecking set in false disabled the encoding of the carriage return and newline characters, \r and \n, that are found in response headers.
 in namespace/skims/test/data/lib_root/f414/c_sharp_disabled_http_header_check.cs","
   1 |
   2 | iguration;
   3 |
   4 |
   5 |
   6 | ethod()
   7 |
   8 | ction httpRuntimeSection = new HttpRuntimeSection();
>  9 | ction.EnableHeaderChecking = false;
  10 |
  11 |
     ^ Col 21
",csharp.csharp_disabled_http_header_check
F143,lines,namespace/skims/test/data/lib_root/f143/js_eval_open.js,12,676,skims,143. Inappropriate coding practices - Eval function,eval() calls in a file or directory. in namespace/skims/test/data/lib_root/f143/js_eval_open.js,"
   2 |     var a = 13
   3 |     var c = Math.floor((Math.random() * 100) + 1);
   4 |     localStorage.getItem('key');
   5 |     try {
   6 |         if(a == """") throw ""empty"";
   7 |         if(isNaN(a)) throw ""not a number"";
   8 |         c = Number(a);
   9 |         if(c < 5) throw ""too low"";
  10 |         if(c > 10) throw ""too high"";
  11 |         eval('alert(""Your query string was ' + unescape(document.location.search) + '"");');
> 12 |         eval(req.query.input)
  13 |         eval(""Your query string is a literal string and it is reasonably safe."") // Compliant
  14 |         // eval('alert(""Your query string was ' + unescape(document.location.search) + '"");');
  15 |     }
  16 |     catch(err) {
  17 |         // a comment
  18 |         /* a comment */
  19 |         /*
  20 |             a comment
  21 |         */
  22 |     }
     ^ Col 0
",javascript.js_uses_eval
F143,lines,namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,5,676,skims,143. Inappropriate coding practices - Eval function,eval() calls in a file or directory. in namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,"
  1 | function insec_use_of_eval(req){
  2 |     let input = req.query.input;
  3 |     eval(input); // Noncompliant
  4 |     (Function(input))(); // Noncompliant
> 5 |     (new Function(input))(); // Noncompliant
  6 | }
    ^ Col 0
",typescript.ts_uses_eval
F143,lines,namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,4,676,skims,143. Inappropriate coding practices - Eval function,eval() calls in a file or directory. in namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,"
  1 | function insec_use_of_eval(req){
  2 |     let input = req.query.input;
  3 |     eval(input); // Noncompliant
> 4 |     (Function(input))(); // Noncompliant
  5 |     (new Function(input))(); // Noncompliant
  6 | }
    ^ Col 0
",typescript.ts_uses_eval
F143,lines,namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,3,676,skims,143. Inappropriate coding practices - Eval function,eval() calls in a file or directory. in namespace/skims/test/data/lib_root/f143/ts_uses_eval.ts,"
  1 | function insec_use_of_eval(req){
  2 |     let input = req.query.input;
> 3 |     eval(input); // Noncompliant
  4 |     (Function(input))(); // Noncompliant
  5 |     (new Function(input))(); // Noncompliant
  6 | }
    ^ Col 0
",typescript.ts_uses_eval
F152,lines,namespace/skims/test/data/lib_root/f135/js_unsafe_http_headers.js,5,693,skims,152. Insecure or unset HTTP headers - X-Frame Options,"Ensure that the HttpHeaders constructor suppresses 'X-Frame-Options' headers.
 in namespace/skims/test/data/lib_root/f135/js_unsafe_http_headers.js","
   1 | import { HttpHeaders } from ""@angular/common/http"";
   2 |
   3 | export class AppComponent {
   4 |   login(login) {
>  5 |     const headers = new HttpHeaders({
   6 |       ""Content-Type"": ""application/json"",
   7 |       ""X-XSS-Protection"": ""anything"", // Unsafe F135
   8 |       ""X-Frame-Options"": ""anything"", // Unsafe F152
   9 |     });
  10 |   }
  11 | }
     ^ Col 0
",javascript.javascript_unsafe_http_xframe_options
F152,lines,namespace/skims/test/data/lib_root/f135/ts_unsafe_http_headers.ts,9,693,skims,152. Insecure or unset HTTP headers - X-Frame Options,"Ensure that the HttpHeaders constructor suppresses 'X-Frame-Options' headers.
 in namespace/skims/test/data/lib_root/f135/ts_unsafe_http_headers.ts","
   1 | import { HttpHeaders } from '@angular/common/http';
   2 | import Observable from '../types.ts';
   3 |
   4 | type LoginModel ={};
   5 | export class AppComponent {
   6 |
   7 |   login(login: LoginModel): Observable<any>{
   8 |
>  9 |     const headers = new HttpHeaders({
  10 |       'Content-Type': 'application/json',
  11 |       'X-XSS-Protection': 'anything', // Unsafe F135
  12 |       'X-Frame-Options': 'anything', // Unsafe F152
  13 |     });
  14 |
  15 |   }
  16 | }
     ^ Col 0
",typescript.typescript_unsafe_http_xframe_options
F366,lines,namespace/skims/test/data/lib_root/f366/c_sharp_transparency_conflict.cs,12,749,skims,366. Inappropriate coding practices - Transparency Conflict,Members should not have conflicting transparency annotations in namespace/skims/test/data/lib_root/f366/c_sharp_transparency_conflict.cs,"
   2 | using System.Security;
   3 |
   4 | namespace MyLibrary
   5 | {
   6 |     // Should fail pointing to lines 12 and 19
   7 |     [FilterOne]
   8 |     [SecurityCritical]
   9 |     [LastFilter]
  10 |     public class HaveFails
  11 |     {
> 12 |         [SecuritySafeCritical]
  13 |         [Fone]
  14 |         [Hello]
  15 |         public void FailsFirsFilter()
  16 |         {
  17 |         }
  18 |
  19 |         [SecuritySafeCritical]
  20 |         public void MethodWhithOneFilter()
  21 |         {
  22 |         }
     ^ Col 0
",c_sharp.csharp_conflicting_annotations
F366,lines,namespace/skims/test/data/lib_root/f366/c_sharp_transparency_conflict.cs,19,749,skims,366. Inappropriate coding practices - Transparency Conflict,Members should not have conflicting transparency annotations in namespace/skims/test/data/lib_root/f366/c_sharp_transparency_conflict.cs,"
   9 |     [LastFilter]
  10 |     public class HaveFails
  11 |     {
  12 |         [SecuritySafeCritical]
  13 |         [Fone]
  14 |         [Hello]
  15 |         public void FailsFirsFilter()
  16 |         {
  17 |         }
  18 |
> 19 |         [SecuritySafeCritical]
  20 |         public void MethodWhithOneFilter()
  21 |         {
  22 |         }
  23 |
  24 |         public void MethodWithoutFilters()
  25 |         {
  26 |         }
  27 |
  28 |         [FilterOne]
  29 |         [OtherFilter]
     ^ Col 0
",c_sharp.csharp_conflicting_annotations
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,12,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | amespace Controllers
   2 |
   3 |    public class Encrypt
   4 |    {
   5 |        public static void Process(string password)
   6 |        {
   7 |            var salt = Encoding.UTF8.GetBytes(""salt"");
   8 |            var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
  10 |            var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
> 12 |            var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |        }
  14 |    }
  15 |
     ^ Col 1
",c_sharp.csharp_check_hashes_salt
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,8,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | espace Controllers
   2 |
   3 |  public class Encrypt
   4 |  {
   5 |      public static void Process(string password)
   6 |      {
   7 |          var salt = Encoding.UTF8.GetBytes(""salt"");
>  8 |          var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
  10 |          var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
  12 |          var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |      }
  14 |  }
  15 |
     ^ Col 3
",c_sharp.csharp_check_hashes_salt
F338,lines,namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs,10,749,skims,338. Insecure service configuration - Salt,"Salt is generated in an insecure way, which makes the password easier to guess.
 in namespace/skims/test/data/lib_root/f338/c_sharp_insecure_rfc.cs","
   1 | mespace Controllers
   2 |
   3 |   public class Encrypt
   4 |   {
   5 |       public static void Process(string password)
   6 |       {
   7 |           var salt = Encoding.UTF8.GetBytes(""salt"");
   8 |           var fromHardcoded = new Rfc2898DeriveBytes(password, salt);
   9 |
> 10 |           var fromPassword = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(""test""));
  11 |
  12 |           var fromUnicode = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(""test""));
  13 |       }
  14 |   }
  15 |
     ^ Col 2
",c_sharp.csharp_check_hashes_salt
F354,lines,namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java,13,770,skims,354. Insecure file upload - Files Limit,"File size limits are not defined or are too high
 in namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java","
   3 | @Bean(name = ""multipartResolver"")
   4 | public CommonsMultipartResolver multipartResolver() {
   5 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
   6 |   multipartResolver.setMaxUploadSize(657600);
   7 |   return multipartResolver;
   8 | }
   9 |
  10 |
  11 | @Bean(name = ""multipartResolver"")
  12 | public CommonsMultipartResolver multipartResolver() {
> 13 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
  14 |   int size = 104857600;
  15 |   multipartResolver.setMaxUploadSize(size);
  16 |   return multipartResolver;
  17 | }
  18 |
  19 |
  20 | @Bean(name = ""multipartResolver"")
  21 | public CommonsMultipartResolver multipartResolver() {
  22 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if maxUploadSize
  23 |   return multipartResolver;
     ^ Col 0
",java.java_upload_size_limit
F354,lines,namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java,28,770,skims,354. Insecure file upload - Files Limit,"File size limits are not defined or are too high
 in namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java","
  11 | @Bean(name = ""multipartResolver"")
  12 | public CommonsMultipartResolver multipartResolver() {
  13 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
  14 |   int size = 104857600;
  15 |   multipartResolver.setMaxUploadSize(size);
  16 |   return multipartResolver;
  17 | }
  18 |
  19 |
  20 | @Bean(name = ""multipartResolver"")
  21 | public CommonsMultipartResolver multipartResolver() {
  22 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if maxUploadSize
  23 |   return multipartResolver;
  24 | }
  25 |
  26 | @Bean
  27 | public MultipartConfigElement multipartConfigElement() {
> 28 |   MultipartConfigFactory factory = new MultipartConfigFactory(); // Sensitive, no limit by default
  29 |   return factory.createMultipartConfig();
  30 | }
  31 | }
     ^ Col 0
",java.java_upload_size_limit
F354,lines,namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java,22,770,skims,354. Insecure file upload - Files Limit,"File size limits are not defined or are too high
 in namespace/skims/test/data/lib_root/f354/java_insecure_file_size.java","
  11 | @Bean(name = ""multipartResolver"")
  12 | public CommonsMultipartResolver multipartResolver() {
  13 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
  14 |   int size = 104857600;
  15 |   multipartResolver.setMaxUploadSize(size);
  16 |   return multipartResolver;
  17 | }
  18 |
  19 |
  20 | @Bean(name = ""multipartResolver"")
  21 | public CommonsMultipartResolver multipartResolver() {
> 22 |   CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if maxUploadSize
  23 |   return multipartResolver;
  24 | }
  25 |
  26 | @Bean
  27 | public MultipartConfigElement multipartConfigElement() {
  28 |   MultipartConfigFactory factory = new MultipartConfigFactory(); // Sensitive, no limit by default
  29 |   return factory.createMultipartConfig();
  30 | }
  31 | }
     ^ Col 0
",java.java_upload_size_limit
F004,lines,namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_1.cs,13,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_1.cs","
   1 | using System.Diagnostics;
   2 |
   3 | namespace Application
   4 | {
   5 |     public class Executor
   6 |     {
   7 |
   8 |         public bool Execute(HttpRequest req)
   9 |         {
  10 |             string command = req.QueryString[""command""];
  11 |             var p = Diagnostics.Process.Start(command);
  12 |             var executor = new Executor();
> 13 |             var result = executor.Execute(command);
  14 |         }
  15 |     }
  16 | }
     ^ Col 0
",c_sharp.c_sharp_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_1.cs,11,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_1.cs","
   1 | using System.Diagnostics;
   2 |
   3 | namespace Application
   4 | {
   5 |     public class Executor
   6 |     {
   7 |
   8 |         public bool Execute(HttpRequest req)
   9 |         {
  10 |             string command = req.QueryString[""command""];
> 11 |             var p = Diagnostics.Process.Start(command);
  12 |             var executor = new Executor();
  13 |             var result = executor.Execute(command);
  14 |         }
  15 |     }
  16 | }
     ^ Col 0
",c_sharp.c_sharp_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_2.cs,19,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/c_sharp_remote_command_2.cs","
   6 |     public class RSPEC2076OSCommandInjectionNoncompliantController : Controller
   7 |     {
   8 |         public IActionResult Index()
   9 |         {
  10 |             Requires.NotNullOrEmpty(key, nameof(key));
  11 |             return View();
  12 |         }
  13 |
  14 |         public IActionResult Run(HttpRequest binary)
  15 |         {
  16 |             Process p = new Process();
  17 |             p.StartInfo.FileName = binary;
  18 |             p.StartInfo.RedirectStandardOutput = true;
> 19 |             p.Start();
  20 |             string output = p.StandardOutput.ReadToEnd();
  21 |             p.Dispose();
  22 |
  23 |             return View();
  24 |         }
  25 |     }
  26 | }
     ^ Col 0
",c_sharp.c_sharp_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/java_remote_command.java,10,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/java_remote_command.java","
   1 | import java.io.IOException;
   2 | import javax.servlet.http.HttpServletRequest;
   3 |
   4 | public class test extends HttpServlet {
   5 |
   6 |   public void runUnsafe(HttpServletRequest request, HttpServletResponse response) throws IOException {
   7 |
   8 |     param = request.getHeader(""someheader"");
   9 |     ProcessBuilder pb = new ProcessBuilder();
> 10 |     pb.command(param);
  11 |
  12 |   }
  13 |
  14 | }
     ^ Col 0
",java.java_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/js_remote_command.js,6,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/js_remote_command.js","
   1 | import { Router } from ""express"";
   2 | var router = Router();
   3 |
   4 | router.get(""test"", function (req, res) {
   5 |   var user = req.params[""user""];
>  6 |   exec(""ls target/user_files/"" + user + ""/"", (error, stdout, stderr) => {
   7 |     res.json(data);
   8 |   });
   9 | });
  10 |
  11 | export default router;
     ^ Col 0
",javascript.javascript_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/ts_remote_command.ts,8,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/ts_remote_command.ts","
   1 | iant
   2 |
   3 | a = require('execa');
   4 |
   5 | tion injection_args(req, res) {
   6 | d = ""ls -la ""+req.query.arg;
   7 |
>  8 | tdout} = await execa.command(cmd);
   9 |
  10 |
  11 |  require('child_process');
  12 |
  13 | uln_injection_command(req, res) {
  14 | d = 'ls '+req.query.arg;
  15 |
  16 | t = cp.execSync(cmd);
  17 |
  18 |
  19 | t
  20 |
  21 | ec_injection_command(req, res) {
     ^ Col 10
",typescript.typescript_remote_command_execution
F004,lines,namespace/skims/test/data/lib_root/f004/ts_remote_command.ts,16,78,skims,004. Remote command execution,"The system builds system commands using inputs that can be manipulated externally, it does not properly override special elements that could modify the system command.
 in namespace/skims/test/data/lib_root/f004/ts_remote_command.ts","
   6 |   const cmd = ""ls -la ""+req.query.arg;
   7 |
   8 |   const {stdout} = await execa.command(cmd);
   9 | }
  10 |
  11 | const cp = require('child_process');
  12 |
  13 | function vuln_injection_command(req, res) {
  14 |   const cmd = 'ls '+req.query.arg;
  15 |
> 16 |   const out = cp.execSync(cmd);
  17 | }
  18 |
  19 | //Compliant
  20 |
  21 | function sec_injection_command(req, res) {
  22 |   const out = cp.execFileSync(""ls"", [req.query.arg]); // Compliant
  23 | }
  24 |
  25 |
  26 | async function sec_injection_args(req, res) {
     ^ Col 0
",typescript.typescript_remote_command_execution
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,18,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
> 18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,17,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
> 17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,16,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
> 16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,15,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,"
   3 | @Component({
   4 |   selector: ""my-app"",
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class Aplication {
  13 |   constructor(sanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
> 15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |   }
  23 | }
     ^ Col 0
",javascript.js_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,19,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/js_uses_bypass_security_truster.js,"
   3 | Component({
   4 |  selector: ""my-app"",
   5 |  template: `
   6 |    <h4>An untrusted URL:</h4>
   7 |    <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |    <h4>A trusted URL:</h4>
   9 |    <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |  `,
  11 | )
  12 | xport class Aplication {
  13 |  constructor(sanitizer) {
  14 |    this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |    this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |    this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |    this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
> 19 |    this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |      this.dangerousUrl
  21 |    );
  22 |  }
  23 |
     ^ Col 1
",javascript.js_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,18,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
> 18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typecript.ts_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,17,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
> 17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typecript.ts_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,16,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
> 16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typecript.ts_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,15,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,"
   4 |   selector: 'my-app',
   5 |   template: `
   6 |     <h4>An untrusted URL:</h4>
   7 |     <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |     <h4>A trusted URL:</h4>
   9 |     <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |   `,
  11 | })
  12 | export class App {
  13 |   constructor(private sanitizer: DomSanitizer) {
  14 |     this.dangerousUrl = 'javascript:alert(""Hi there"")';
> 15 |     this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |     this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |     this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |     this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
  19 |     this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |       this.dangerousUrl
  21 |     );
  22 |
  23 |   }
  24 | }
     ^ Col 0
",typecript.ts_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,19,79,skims,371. DOM-Based cross-site scripting (XSS),BypassSecurityTrust is used in the Angular sanitizer configuration. in namespace/skims/test/data/lib_root/f371/ts_uses_bypass_security_truster.ts,"
   4 |  selector: 'my-app',
   5 |  template: `
   6 |    <h4>An untrusted URL:</h4>
   7 |    <p><a class=""e2e-dangerous-url"" [href]=""dangerousUrl"">Click me</a></p>
   8 |    <h4>A trusted URL:</h4>
   9 |    <p><a class=""e2e-trusted-url"" [href]=""trustedUrl"">Click me</a></p>
  10 |  `,
  11 | )
  12 | xport class App {
  13 |  constructor(private sanitizer: DomSanitizer) {
  14 |    this.dangerousUrl = 'javascript:alert(""Hi there"")';
  15 |    this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
  16 |    this.trustedHtml = sanitizer.bypassSecurityTrustHtml(this.dangerousUrl);
  17 |    this.trustedScript = sanitizer.bypassSecurityTrustScript(this.dangerousUrl);
  18 |    this.trustedStyle = sanitizer.bypassSecurityTrustStyle(this.dangerousUrl);
> 19 |    this.trustedResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(
  20 |      this.dangerousUrl
  21 |    );
  22 |
  23 |  }
  24 |
     ^ Col 1
",typecript.ts_use_of_bypass_security_trust_url
F371,lines,namespace/skims/test/data/lib_root/f371/js_unsafe_set_innerhtml.jsx,11,79,skims,371. DOM-Based cross-site scripting (XSS),DangerouslySetInnerHtml is used in Jsx file. in namespace/skims/test/data/lib_root/f371/js_unsafe_set_innerhtml.jsx,"
   1 | import React from ""react"";
   2 |
   3 | const App = () => {
   4 |   const createMarkup = () => {
   5 |     return {
   6 |       __html: ""<img onerror='alert();' src='invalid-image' />"",
   7 |     };
   8 |   };
   9 |   return (
  10 |     <div>
> 11 |       <div dangerouslySetInnerHTML={createMarkup()}/>
  12 |     </div>
  13 |   );
  14 | };
  15 | export default App;
     ^ Col 0
",javascript.js_uses_dangerously_set_html
F371,lines,namespace/skims/test/data/lib_root/f371/js_unsafe_set_innerhtml.jsx,11,79,skims,371. DOM-Based cross-site scripting (XSS),DangerouslySetInnerHtml is used in Tsx file. in namespace/skims/test/data/lib_root/f371/js_unsafe_set_innerhtml.jsx,"
   1 | import React from ""react"";
   2 |
   3 | const App = () => {
   4 |   const createMarkup = () => {
   5 |     return {
   6 |       __html: ""<img onerror='alert();' src='invalid-image' />"",
   7 |     };
   8 |   };
   9 |   return (
  10 |     <div>
> 11 |       <div dangerouslySetInnerHTML={createMarkup()}/>
  12 |     </div>
  13 |   );
  14 | };
  15 | export default App;
     ^ Col 0
",typescript.ts_uses_dangerously_set_html
F008,lines,namespace/skims/test/data/lib_root/f008/c_sharp_reflected_xss.cs,11,79,skims,008. Reflected cross-site scripting (XSS),"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in namespace/skims/test/data/lib_root/f008/c_sharp_reflected_xss.cs","
   1 | namespace Controllers
   2 | {
   3 |     public class Calculate
   4 |     {
   5 |         public static void ProcessRequest(HttpRequest req, HttpResponse res)
   6 |         {
   7 |             string name = req.QueryString[""name""];
   8 |             res.Write(""Hello "" + name);
   9 |
  10 |             string value = req.QueryString[""value""];
> 11 |             res.AddHeader(""X-Header"", value);
  12 |         }
  13 |     }
  14 | }
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
F008,lines,namespace/skims/test/data/lib_root/f008/c_sharp_reflected_xss.cs,8,79,skims,008. Reflected cross-site scripting (XSS),"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in namespace/skims/test/data/lib_root/f008/c_sharp_reflected_xss.cs","
   1 | namespace Controllers
   2 | {
   3 |     public class Calculate
   4 |     {
   5 |         public static void ProcessRequest(HttpRequest req, HttpResponse res)
   6 |         {
   7 |             string name = req.QueryString[""name""];
>  8 |             res.Write(""Hello "" + name);
   9 |
  10 |             string value = req.QueryString[""value""];
  11 |             res.AddHeader(""X-Header"", value);
  12 |         }
  13 |     }
  14 | }
     ^ Col 0
",c_sharp.c_sharp_insec_addheader_write
F008,lines,namespace/skims/test/data/lib_root/f008/java_reflected_xss.java,10,79,skims,008. Reflected cross-site scripting (XSS),"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in namespace/skims/test/data/lib_root/f008/java_reflected_xss.java","
   1 | import java.io.IOException;
   2 | import javax.servlet.http.HttpServletRequest;
   3 |
   4 | public class test08 extends HttpServlet {
   5 |
   6 |   public void runUnsafe(HttpServletRequest request, HttpServletResponse response) throws IOException {
   7 |
   8 |     param = request.getHeader(""someheader"");
   9 |     response.setHeader(""X-XSS-Protection"", ""0"");
> 10 |     response.getWriter().format(param);
  11 |
  12 |   }
  13 |
  14 | }
     ^ Col 0
",java.java_unsafe_xss_content
F008,lines,namespace/skims/test/data/lib_root/f008/js_reflected_xss.js,7,79,skims,008. Reflected cross-site scripting (XSS),"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in namespace/skims/test/data/lib_root/f008/js_reflected_xss.js","
   1 | import { Router } from ""express"";
   2 | var router = Router();
   3 |
   4 | router.get(""test"", function (req, res) {
   5 |   var user = req.params[""user""];
   6 |   res.setHeader(""X-XSS-Protection"", ""0"");
>  7 |   res.send(`
   8 |     <!DOCTYPE html>
   9 |     <html>
  10 |       <body>
  11 |         <h1>Hello ${user}</h1>
  12 |       </body>
  13 |     </html>
  14 |     `
  15 |   );
  16 | });
  17 |
  18 | export default router;
     ^ Col 0
",javascript.javascript_unsafe_xss_content
F008,lines,namespace/skims/test/data/lib_root/f008/ts_reflected_xss.ts,8,79,skims,008. Reflected cross-site scripting (XSS),"The web application dynamically generates web content without validating the source of the potentially untrusted data
 in namespace/skims/test/data/lib_root/f008/ts_reflected_xss.ts","
   1 | import { Router } from ""express"";
   2 | import { reqData, resData } from ""types.ts"";
   3 | var router = Router();
   4 |
   5 | router.get(""test008"", function (req: reqData, res: resData) {
   6 |   var user: string = req.params[""user""];
   7 |   res.setHeader(""X-XSS-Protection"", ""0"");
>  8 |   res.send(`
   9 |     <!DOCTYPE html>
  10 |     <html>
  11 |       <body>
  12 |         <h1>Hello ${user}</h1>
  13 |       </body>
  14 |     </html>
  15 |     `
  16 |   );
  17 | });
  18 |
  19 | export default router;
     ^ Col 0
",typescript.typescript_unsafe_xss_content
F371,lines,namespace/skims/test/data/lib_root/f066/js_console_log_close.js,23,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f066/js_console_log_close.js","
   13 |     //console.log()
   14 |     //localStorage.setItem(""key"")
   15 |     //eval('alert(""Your query string was ' + unescape(document.location.search) + '"");');
   16 | }
   17 |
   18 | function functionBWithoutConsoleLog() {
   19 |     var a = 13
   20 |     var b = 31
   21 |     var message
   22 |     message = document.getElementById(""message"");
>  23 |     message.innerHTML = """";
   24 |     //console.log(a+b)
   25 |     try {
   26 |         if(a == """") {
   27 |             throw ""empty"";
   28 |         }
   29 |         else if(isNaN(a)) {
   30 |             throw ""not a number"";
   31 |         }
   32 |         else {
   33 |             c = Number(a);
      ^ Col 0
",javascript.js_uses_innerhtml
F371,lines,namespace/skims/test/data/lib_root/f066/js_console_log_close.js,42,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f066/js_console_log_close.js","
   32 |         else {
   33 |             c = Number(a);
   34 |         }
   35 |         if(c < 5) {
   36 |             throw ""too low"";
   37 |         }
   38 |         else if(c > 10) {
   39 |             throw ""too high"";
   40 |         }
   41 |         else {
>  42 |             message.innerHTML = c;
   43 |         }
   44 |     }
   45 |     catch(err) {
   46 |         message.innerHTML = ""Input is "" + err;
   47 |     }
   48 |
   49 |
   50 |     var promise = request();
   51 |     promise.catch(function(error) {
   52 |         // a comment
      ^ Col 0
",javascript.js_uses_innerhtml
F371,lines,namespace/skims/test/data/lib_root/f066/js_console_log_close.js,46,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f066/js_console_log_close.js","
   36 |             throw ""too low"";
   37 |         }
   38 |         else if(c > 10) {
   39 |             throw ""too high"";
   40 |         }
   41 |         else {
   42 |             message.innerHTML = c;
   43 |         }
   44 |     }
   45 |     catch(err) {
>  46 |         message.innerHTML = ""Input is "" + err;
   47 |     }
   48 |
   49 |
   50 |     var promise = request();
   51 |     promise.catch(function(error) {
   52 |         // a comment
   53 |         /* a comment */
   54 |         /*
   55 |             a comment
   56 |         */
      ^ Col 0
",javascript.js_uses_innerhtml
F371,lines,namespace/skims/test/data/lib_root/f066/js_console_log_close.js,57,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f066/js_console_log_close.js","
   47 |     }
   48 |
   49 |
   50 |     var promise = request();
   51 |     promise.catch(function(error) {
   52 |         // a comment
   53 |         /* a comment */
   54 |         /*
   55 |             a comment
   56 |         */
>  57 |        message.innerHTML = ""Input is "" + err;
   58 |     });
   59 |
   60 |     switch (new Date().getDay()) {
   61 |         case 0:
   62 |             day = ""Sunday"";
   63 |             break;
   64 |         case 1:
   65 |             day = ""Monday"";
   66 |             break;
   67 |         case 2:
      ^ Col 0
",javascript.js_uses_innerhtml
F371,lines,namespace/skims/test/data/lib_root/f371/js_uses_innerhtml.js,5,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f371/js_uses_innerhtml.js","
  1 | const main = document.getElementById('main');
  2 |
  3 | const externalHTML = `<img src='1' onerror='alert(""Error loading image"")'>`;
  4 | // shows the alert
> 5 | main.innerHTML = externalHTML;
    ^ Col 0
",javascript.js_uses_innerhtml
F371,lines,namespace/skims/test/data/lib_root/f371/ts_uses_innerhtml.ts,4,79,skims,371. DOM-Based cross-site scripting (XSS),"Use of innerHTML method, which its known as insecure. in namespace/skims/test/data/lib_root/f371/ts_uses_innerhtml.ts","
  1 | const rootDiv = document.getElementById('root');
  2 | const hash = decodeURIComponent(location.hash.substr(1));
  3 | if (rootDiv != null){
> 4 |   rootDiv.innerHTML = hash;
  5 | }
    ^ Col 0
",typescript.ts_uses_innerhtml
F009,lines,namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,8,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,"
   1 | import * as CryptoJS from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg) {
   4 |
   5 |   //Unsafe
   6 |   const Utf16LE = CryptoJS.enc.Utf16LE.parse(""a23ijl"");
   7 |   const Latin1 = CryptoJS.enc.Latin1.parse(""sec\""ret"");
>  8 |   const utf8 = CryptoJS.enc.Utf8.parse(""Fmljho"");
   9 |
  10 |   // Safe values
  11 |   const initDate = format(parse(""hello""));
  12 |   const base64 = CryptoJS.enc.base64.parse(arg);
  13 | }
     ^ Col 0
",javascript.javascript_crypto_js_credentials
F009,lines,namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,7,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,"
   1 | import * as CryptoJS from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg) {
   4 |
   5 |   //Unsafe
   6 |   const Utf16LE = CryptoJS.enc.Utf16LE.parse(""a23ijl"");
>  7 |   const Latin1 = CryptoJS.enc.Latin1.parse(""sec\""ret"");
   8 |   const utf8 = CryptoJS.enc.Utf8.parse(""Fmljho"");
   9 |
  10 |   // Safe values
  11 |   const initDate = format(parse(""hello""));
  12 |   const base64 = CryptoJS.enc.base64.parse(arg);
  13 | }
     ^ Col 0
",javascript.javascript_crypto_js_credentials
F009,lines,namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,6,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/js_uses_crypto_js_methods.js,"
   1 | import * as CryptoJS from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg) {
   4 |
   5 |   //Unsafe
>  6 |   const Utf16LE = CryptoJS.enc.Utf16LE.parse(""a23ijl"");
   7 |   const Latin1 = CryptoJS.enc.Latin1.parse(""sec\""ret"");
   8 |   const utf8 = CryptoJS.enc.Utf8.parse(""Fmljho"");
   9 |
  10 |   // Safe values
  11 |   const initDate = format(parse(""hello""));
  12 |   const base64 = CryptoJS.enc.base64.parse(arg);
  13 | }
     ^ Col 0
",javascript.javascript_crypto_js_credentials
F009,lines,namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,8,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,"
   1 | import {enc} from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg: string) {
   4 |
   5 |   // Danger values
   6 |   const base64 = enc.Base64.parse(""danger_value"");
   7 |   const Utf16 = enc.Utf16.parse(""danger_value"");
>  8 |   const hex = enc.Hex.parse(""danger_value"");
   9 |
  10 |   // Safe values
  11 |   const Latin1 = enc.Latin1.parse(arg);
  12 | }
     ^ Col 0
",typescript.typescript_crypto_ts_credentials
F009,lines,namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,7,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,"
   1 | import {enc} from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg: string) {
   4 |
   5 |   // Danger values
   6 |   const base64 = enc.Base64.parse(""danger_value"");
>  7 |   const Utf16 = enc.Utf16.parse(""danger_value"");
   8 |   const hex = enc.Hex.parse(""danger_value"");
   9 |
  10 |   // Safe values
  11 |   const Latin1 = enc.Latin1.parse(arg);
  12 | }
     ^ Col 0
",typescript.typescript_crypto_ts_credentials
F009,lines,namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,6,798,skims,009. Sensitive information in source code,CryptoJS plaintext data source in namespace/skims/test/data/lib_root/f009/ts_uses_crypto_js_methods.ts,"
   1 | import {enc} from ""crypto-js"";
   2 |
   3 | function hasCrytoJsFunctions(arg: string) {
   4 |
   5 |   // Danger values
>  6 |   const base64 = enc.Base64.parse(""danger_value"");
   7 |   const Utf16 = enc.Utf16.parse(""danger_value"");
   8 |   const hex = enc.Hex.parse(""danger_value"");
   9 |
  10 |   // Safe values
  11 |   const Latin1 = enc.Latin1.parse(arg);
  12 | }
     ^ Col 0
",typescript.typescript_crypto_ts_credentials
F127,lines,namespace/skims/test/data/lib_root/f127/go_query_float.go,11,843,skims,127. Lack of data validation - Type confusion,Lack of data validation - Type confusion in namespace/skims/test/data/lib_root/f127/go_query_float.go,"
   1 | package f127
   2 |
   3 | import (
   4 |  ""dabatase/sql""
   5 |  ""math""
   6 |  ""strconv""
   7 | )
   8 |
   9 | func Dangerous(request *http.Request) {
  10 |  amount := strconv.ParseFloat(request.Amount)
> 11 |  sql.QueryRow(`INSERT INTO tbl $1`, amount)
  12 | }
  13 |
  14 | func Dangerous2(request *http.Request) {
  15 |  amount = strconv.ParseFloat(request.Amount)
  16 |  sql.Exec(`INSERT INTO tbl $1, $2, $3`, amount)
  17 | }
  18 |
  19 | func SafeMethod(request *http.Request) {
  20 |  amount := strconv.ParseFloat(request.Amount)
  21 |  if math.IsNaN(amount) || math.IsInf(amount, 0) {
     ^ Col 0
",go.go_insecure_query_float
F127,lines,namespace/skims/test/data/lib_root/f127/go_query_float.go,16,843,skims,127. Lack of data validation - Type confusion,Lack of data validation - Type confusion in namespace/skims/test/data/lib_root/f127/go_query_float.go,"
   5 |  ""math""
   6 |  ""strconv""
   7 | )
   8 |
   9 | func Dangerous(request *http.Request) {
  10 |  amount := strconv.ParseFloat(request.Amount)
  11 |  sql.QueryRow(`INSERT INTO tbl $1`, amount)
  12 | }
  13 |
  14 | func Dangerous2(request *http.Request) {
  15 |  amount = strconv.ParseFloat(request.Amount)
> 16 |  sql.Exec(`INSERT INTO tbl $1, $2, $3`, amount)
  17 | }
  18 |
  19 | func SafeMethod(request *http.Request) {
  20 |  amount := strconv.ParseFloat(request.Amount)
  21 |  if math.IsNaN(amount) || math.IsInf(amount, 0) {
  22 |   return ""Not a valid value""
  23 |  }
  24 |  sql.QueryCol(`INSERT INTO tbl $1`, amount)
  25 | }
     ^ Col 0
",go.go_insecure_query_float
F297,lines,namespace/skims/test/data/lib_root/f297/js_sql_injection.js,9,89,skims,297. SQL injection - Code,Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures. in namespace/skims/test/data/lib_root/f297/js_sql_injection.js,"
   1 | var db = require('./mysql/dbConnection.js');
   2 |
   3 | function vuln (req, res) {
   4 |   var name = req.query.name; // user-controlled input
   5 |   var password = crypto.createHash('sha256').update(req.query.password).digest('base64');
   6 |
   7 |   var sql = ""select * from user where name = '"" + name + ""' and password = '"" + password + ""'"";
   8 |
>  9 |   db.query(sql, function(err, result) { // Noncompliant
  10 |      // something
  11 |   })
  12 | }
  13 |
  14 | function safe (req, res) {
  15 |   var name = req.query.name; // user-controlled input
  16 |   var password = crypto.createHash('sha256').update(req.query.password).digest('base64');
  17 |
  18 |   var sql = ""select * from user where name = ? and password = ?""; // the query is parameterized
  19 |
  20 |   db.query(sql, [name, password], function(err, result) { // Compliant
  21 |      // something
     ^ Col 0
",javascript.js_sql_injection
F297,lines,namespace/skims/test/data/lib_root/f297/ts_sql_injection.ts,9,89,skims,297. SQL injection - Code,Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures. in namespace/skims/test/data/lib_root/f297/ts_sql_injection.ts,"
   1 | var db = require('./mysql/dbConnection.js');
   2 |
   3 | function vuln (req, res) {
   4 |   var name = req.query.name; // user-controlled input
   5 |   var password = crypto.createHash('sha256').update(req.query.password).digest('base64');
   6 |
   7 |   var sql = ""select * from user where name = '"" + name + ""' and password = '"" + password + ""'"";
   8 |
>  9 |   db.query(sql, function(err, result) { // Noncompliant
  10 |      // something
  11 |   })
  12 | }
  13 |
  14 | function safe (req, res) {
  15 |   var name = req.query.name; // user-controlled input
  16 |   var password = crypto.createHash('sha256').update(req.query.password).digest('base64');
  17 |
  18 |   var sql = ""select * from user where name = ? and password = ?""; // the query is parameterized
  19 |
  20 |   db.query(sql, [name, password], function(err, result) { // Compliant
  21 |      // something
     ^ Col 0
",typescript.ts_sql_injection
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs,13,89,skims,001. SQL injection - C Sharp SQL API,"Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures.
 in namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs","
   3 | using WebApplication1.Controllers;
   4 |
   5 | namespace WebApplicationDotNetCore.Controllers
   6 | {
   7 |     public class RSPEC3649SQLiNoncompliant
   8 |     {
   9 |         public IActionResult Authenticate(UserAccountContext context, string user)
  10 |         {
  11 |             string insecure_query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'"";
  12 |
> 13 |             insecure_obj = new SqlCommand(insecure_query);
  14 |
  15 |             insecure_methd = sqcontext.Database.ExecuteSqlCommand(insecure_query);
  16 |
  17 |             string secure_query = ""UPDATE Sales.Store SET Demographics = @demographics "" + ""WHERE CustomerID = @ID;"";
  18 |
  19 |             secure_obj = new SqlCommand(secure_query);
  20 |
  21 |             secure_methd = sqcontext.Database.ExecuteSqlCommand(secure_query);
  22 |         }
  23 |     }
     ^ Col 0
",c_sharp.c_sharp_sql_injection
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs,15,89,skims,001. SQL injection - C Sharp SQL API,"Dynamic SQL statements are generated without the required data validation and without using parameterized statements or stored procedures.
 in namespace/skims/test/data/lib_root/f001/c_sharp_sql_injection.cs","
   4 |
   5 | namespace WebApplicationDotNetCore.Controllers
   6 | {
   7 |     public class RSPEC3649SQLiNoncompliant
   8 |     {
   9 |         public IActionResult Authenticate(UserAccountContext context, string user)
  10 |         {
  11 |             string insecure_query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'"";
  12 |
  13 |             insecure_obj = new SqlCommand(insecure_query);
  14 |
> 15 |             insecure_methd = sqcontext.Database.ExecuteSqlCommand(insecure_query);
  16 |
  17 |             string secure_query = ""UPDATE Sales.Store SET Demographics = @demographics "" + ""WHERE CustomerID = @ID;"";
  18 |
  19 |             secure_obj = new SqlCommand(secure_query);
  20 |
  21 |             secure_methd = sqcontext.Database.ExecuteSqlCommand(secure_query);
  22 |         }
  23 |     }
  24 | }
     ^ Col 0
",c_sharp.c_sharp_sql_injection
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,23,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   13 |     @Query(value = ""SELECT * FROM schema.table "" +
   14 |         ""WHERE CODE = ?1"", nativeQuery = true)
   15 |     List<Parameter> findByParameterType(String parameterTypeCode);
   16 |     /* Secure */
   17 |     @Query(""select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}"")
   18 |     List<User> findContainingEscaped(String namePart);
   19 |
   20 |     /* secure*/
   21 |     @Query(""select u from User u where u.lastname like :#{[0]}"")
   22 |     /* LIKE statement injection */
>  23 |     @SqlQuery(""select u from User u where u.lastname like %:#{[0]}%"")
   24 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   25 |     /* LIKE statement injection */
   26 |     @Query(""select u from User u where u.lastname like %:#{"" + ""[0]}%"")
   27 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   28 |     /* LIKE statement secure */
   29 |     @Query(""select u from User u where u.lastname like %?#{escape([0])}%"")
   30 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   31 |     /* LIKE statement secure */
   32 |     @Query(""select u from User u where u.firstname like %?#{esc"" + ""ape([0])}%"")
   33 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
      ^ Col 0
",java.java_jpa_like
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,26,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   16 |     /* Secure */
   17 |     @Query(""select u from User u where u.firstname like %?#{escape([0])}% escape ?#{escapeCharacter()}"")
   18 |     List<User> findContainingEscaped(String namePart);
   19 |
   20 |     /* secure*/
   21 |     @Query(""select u from User u where u.lastname like :#{[0]}"")
   22 |     /* LIKE statement injection */
   23 |     @SqlQuery(""select u from User u where u.lastname like %:#{[0]}%"")
   24 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   25 |     /* LIKE statement injection */
>  26 |     @Query(""select u from User u where u.lastname like %:#{"" + ""[0]}%"")
   27 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   28 |     /* LIKE statement secure */
   29 |     @Query(""select u from User u where u.lastname like %?#{escape([0])}%"")
   30 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   31 |     /* LIKE statement secure */
   32 |     @Query(""select u from User u where u.firstname like %?#{esc"" + ""ape([0])}%"")
   33 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   34 |
   35 |     /* LIKE statement injection */
   36 |     @Query(""select u from "" + ""User u where u.lastname like %:lastname%"")
      ^ Col 0
",java.java_jpa_like
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,36,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   26 |     @Query(""select u from User u where u.lastname like %:#{"" + ""[0]}%"")
   27 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   28 |     /* LIKE statement secure */
   29 |     @Query(""select u from User u where u.lastname like %?#{escape([0])}%"")
   30 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   31 |     /* LIKE statement secure */
   32 |     @Query(""select u from User u where u.firstname like %?#{esc"" + ""ape([0])}%"")
   33 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   34 |
   35 |     /* LIKE statement injection */
>  36 |     @Query(""select u from "" + ""User u where u.lastname like %:lastname%"")
   37 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   38 |     /* LIKE statement injection a little harder to find*/
   39 |     @Query(""select u from "" + ""User u where u.lastname like %:last"" + ""name%"")
   40 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   41 |     /* LIKE statement injection */
   42 |     @Query(""SELECT e FROM ExamplePage e WHERE e.id LIKE CONCAT('%',:id,'%')"")
   43 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   44 |     /* LIKE statement injection */
   45 |     @SqlQuery(x = 123, y = ""a"", value = ""SEL"" +
   46 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10%"",
      ^ Col 0
",java.java_jpa_like
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,39,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   29 |     @Query(""select u from User u where u.lastname like %?#{escape([0])}%"")
   30 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   31 |     /* LIKE statement secure */
   32 |     @Query(""select u from User u where u.firstname like %?#{esc"" + ""ape([0])}%"")
   33 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   34 |
   35 |     /* LIKE statement injection */
   36 |     @Query(""select u from "" + ""User u where u.lastname like %:lastname%"")
   37 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   38 |     /* LIKE statement injection a little harder to find*/
>  39 |     @Query(""select u from "" + ""User u where u.lastname like %:last"" + ""name%"")
   40 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   41 |     /* LIKE statement injection */
   42 |     @Query(""SELECT e FROM ExamplePage e WHERE e.id LIKE CONCAT('%',:id,'%')"")
   43 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   44 |     /* LIKE statement injection */
   45 |     @SqlQuery(x = 123, y = ""a"", value = ""SEL"" +
   46 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10%"",
   47 |         z = 123
   48 |     )
   49 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
      ^ Col 0
",java.java_jpa_like
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,42,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   32 |     @Query(""select u from User u where u.firstname like %?#{esc"" + ""ape([0])}%"")
   33 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   34 |
   35 |     /* LIKE statement injection */
   36 |     @Query(""select u from "" + ""User u where u.lastname like %:lastname%"")
   37 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   38 |     /* LIKE statement injection a little harder to find*/
   39 |     @Query(""select u from "" + ""User u where u.lastname like %:last"" + ""name%"")
   40 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   41 |     /* LIKE statement injection */
>  42 |     @Query(""SELECT e FROM ExamplePage e WHERE e.id LIKE CONCAT('%',:id,'%')"")
   43 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   44 |     /* LIKE statement injection */
   45 |     @SqlQuery(x = 123, y = ""a"", value = ""SEL"" +
   46 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10%"",
   47 |         z = 123
   48 |     )
   49 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   50 |     /* Secure */
   51 |     @SqlQuery(""SEL"" +
   52 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10"")
      ^ Col 0
",java.java_jpa_like
F012,lines,namespace/skims/test/data/lib_root/f012/java_sql_injection.java,45,89,skims,012. SQL injection - Java Persistence API,LIKE statement without escape in namespace/skims/test/data/lib_root/f012/java_sql_injection.java,"
   35 |     /* LIKE statement injection */
   36 |     @Query(""select u from "" + ""User u where u.lastname like %:lastname%"")
   37 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   38 |     /* LIKE statement injection a little harder to find*/
   39 |     @Query(""select u from "" + ""User u where u.lastname like %:last"" + ""name%"")
   40 |     List<User> findByLastnameWithSpelExpression(@Param(""lastname"") String lastname);
   41 |     /* LIKE statement injection */
   42 |     @Query(""SELECT e FROM ExamplePage e WHERE e.id LIKE CONCAT('%',:id,'%')"")
   43 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   44 |     /* LIKE statement injection */
>  45 |     @SqlQuery(x = 123, y = ""a"", value = ""SEL"" +
   46 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10%"",
   47 |         z = 123
   48 |     )
   49 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   50 |     /* Secure */
   51 |     @SqlQuery(""SEL"" +
   52 |         ""ECT e FROM ExamplePage e WHERE e.id LIKE ?10"")
   53 |     Page<ExamplePage> getRechargeEvents(@Param(""id"") Long id, Pageable pageable);
   54 | }
   55 |
      ^ Col 0
",java.java_jpa_like
F001,lines,namespace/skims/test/data/lib_root/f001/c_sharp_unsafe_sql.cs,18,89,skims,001. SQL injection - C Sharp SQL API,Use of attacker controlled parameters for querying the data base in namespace/skims/test/data/lib_root/f001/c_sharp_unsafe_sql.cs,"
   1 | ing TestCaseSupport;
   2 | ing System;
   3 | ing System.Data.SqlClient;
   4 | ing System.Data;
   5 | ing System.Web;
   6 |
   7 |
   8 | mespace testcase
   9 |
  10 |   class testcasef001
  11 |   {
  12 |       public override void Bad(HttpRequest req, HttpResponse resp)
  13 |       {
  14 |           SqlDataReader dr = command.ExecuteReader();
  15 |           string data = dr.GetString(1);
  16 |           string[] names = data.Split('-');
  17 |           badSqlCommand.CommandText += ""update users set hitcount=hitcount+1 where name='"" + names[i] + ""';"";
> 18 |           var affectedRows = badSqlCommand.ExecuteNonQuery();
  19 |       }
  20 |   }
  21 |
     ^ Col 2
",c_sharp.c_sharp_sql_user_params
F112,lines,namespace/skims/test/data/lib_root/f112/java_sql_injection.java,11,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in namespace/skims/test/data/lib_root/f112/java_sql_injection.java,"
   1 | import java.util.Random;
   2 |
   3 | public class test112 extends HttpServlet {
   4 |
   5 |  public void doPost(HttpServletRequest request, HttpServletResponse response) {
   6 |
   7 |   param = request.getHeader(""search"");
   8 |   String sql = ""{call "" + param + ""}"";
   9 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  10 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 11 |   java.sql.ResultSet rs = statement.executeQuery();
  12 |
  13 |  }
  14 |
  15 | }
     ^ Col 0
",java.java_sql_injection
F112,lines,namespace/skims/test/data/lib_root/f112/js_sql_injection.js,14,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in namespace/skims/test/data/lib_root/f112/js_sql_injection.js,"
   1 | import { Router } from ""express"";
   2 | var router = Router();
   3 | var mysql = require(""mysql"");
   4 | var connection = mysql.createConnection();
   5 |
   6 | router.get(""test112"", function (req, res) {
   7 |
   8 |   connection.connect();
   9 |   connection.resume();
  10 |   let userData = req.body;
  11 |   let userName = userData.username;
  12 |   let password = userData.password;
  13 |
> 14 |   connection.query(
  15 |     `SELECT * FROM users WHERE user_name='${userName}' AND password='${password}'`,
  16 |     function (error, results, fields) {res.json({ ok: results.length > 0 });}
  17 |   );
  18 | });
  19 |
  20 | export default router;
     ^ Col 0
",javascript.javascript_sql_api_injection
F112,lines,namespace/skims/test/data/lib_root/f112/ts_sql_injection.ts,15,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in namespace/skims/test/data/lib_root/f112/ts_sql_injection.ts,"
   1 | import { Router } from ""express"";
   2 | import { reqData, resData, dBConnection } from ""types.ts"";
   3 | import { mysql } from ""mysql"";
   4 | var router = Router();
   5 | var connection: dBConnection = mysql.createConnection();
   6 |
   7 | router.get(""test112"", function (req: reqData, res: resData) {
   8 |
   9 |   connection.connect();
  10 |   connection.resume();
  11 |   let userData = req.body;
  12 |   let userName = userData.username;
  13 |   let password = userData.password;
  14 |
> 15 |   connection.query(
  16 |     `SELECT * FROM users WHERE user_name='${userName}' AND password='${password}'`,
  17 |     function (err: Error) { res.send(err); }
  18 |   );
  19 | });
  20 |
  21 | export default router;
     ^ Col 0
",typescript.typescript_sql_api_injection
F320,lines,namespace/skims/test/data/lib_root/f320/c_sharp_insecure_ldap.cs,7,90,skims,320. Insecure service configuration - LDAP,"LDAP connections should be authenticated
 in namespace/skims/test/data/lib_root/f320/c_sharp_insecure_ldap.cs","
   1 | m;
   2 | r{
   3 |
   4 | oid Encrypt()
   5 |
   6 | oryEntry myDirectoryEntry = new DirectoryEntry(adPath);
>  7 | ryEntry.AuthenticationType = AuthenticationTypes.None;
   8 |
   9 | Entry sndDirectoryEntry = new DirectoryEntry(adPath, ""u"", ""p"", AuthenticationTypes.None);
  10 | toryEntry thrdDirectoryEntry = new DirectoryEntry(adPath, ""u"", ""p"", AuthenticationTypes.Secure);
  11 |
  12 |
  13 |
     ^ Col 11
",c_sharp.csharp_ldap_connections_authenticated
F320,lines,namespace/skims/test/data/lib_root/f320/c_sharp_insecure_ldap.cs,9,90,skims,320. Insecure service configuration - LDAP,"LDAP connections should be authenticated
 in namespace/skims/test/data/lib_root/f320/c_sharp_insecure_ldap.cs","
   1 |
   2 |
   3 |
   4 |
   5 |
   6 | rectoryEntry(adPath);
   7 | nticationTypes.None;
   8 |
>  9 | ctoryEntry(adPath, ""u"", ""p"", AuthenticationTypes.None);
  10 |  DirectoryEntry(adPath, ""u"", ""p"", AuthenticationTypes.Secure);
  11 |
  12 |
  13 |
     ^ Col 45
",c_sharp.csharp_ldap_connections_authenticated
F107,lines,namespace/skims/test/data/lib_root/f107/c_sharp_ldap_injection.cs,11,90,skims,107. LDAP injection,Potentially untrusted HTTP request input reaches an LDAP statement in namespace/skims/test/data/lib_root/f107/c_sharp_ldap_injection.cs,"
   1 | ;
   2 | .DirectoryServices;
   3 |
   4 | al class WebForm : System.Web.UI.Page
   5 |
   6 | d void Page_Load(HttpRequest Request)
   7 |
   8 | ng userName = Request.Params[""user""];
   9 | ng filter = ""(uid="" + userName + "")"";
  10 | ctorySearcher searcher = new DirectorySearcher(filter);
> 11 | chResultCollection results = searcher.FindAll();
  12 |
  13 |
     ^ Col 12
",c_sharp.c_sharp_ldap_injection
F107,lines,namespace/skims/test/data/lib_root/f107/java_ldap_injection.java,14,90,skims,107. LDAP injection,Potentially untrusted HTTP request input reaches an LDAP statement in namespace/skims/test/data/lib_root/f107/java_ldap_injection.java,"
   1 | il.Random;
   2 |
   3 | est107 extends HttpServlet {
   4 |
   5 | oPost(HttpServletRequest request, HttpServletResponse response) {
   6 |
   7 | umeration<String> headers = request.getHeaders(""BenchmarkTest00012"");
   8 |
   9 | != null && headers.hasMoreElements()) {
  10 | ders.nextElement();
  11 |
  12 |
  13 | r = ""(&(objectclass=person))(|(uid=""+param+"")(street={0}))"";
> 14 | .NamingEnumeration results = idc.search(base, filter);
  15 |
  16 |
  17 |
  18 |
     ^ Col 14
",java.java_ldap_injection
F100,lines,namespace/skims/test/data/lib_root/f100/c_sharp_ssrf.cs,11,918,skims,100. Server-side request forgery (SSRF),"It is possible to induce the application's server into making requests to an arbitrary domain
 in namespace/skims/test/data/lib_root/f100/c_sharp_ssrf.cs","
   1 | using System.Net;
   2 | using System;
   3 | namespace testmod
   4 | {
   5 |
   6 |     public class Controllers
   7 |     {
   8 |         public void ReadContentOfURL(HttpRequest url)
   9 |         {
  10 |             //insecure
> 11 |             WebRequest req = WebRequest.Create(url);
  12 |
  13 |             //secure
  14 |             string staticUrl = ""https://someurl.com"";
  15 |             WebRequest request = WebRequest.Create(staticUrl);
  16 |         }
  17 |     }
  18 | }
     ^ Col 0
",c_sharp.c_sharp_insec_create
F344,lines,namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,14,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,"
   1 | // unsafe object
   2 | const xhr = new XMLHttpRequest();
   3 | xhr.open(""GET"", ""http://example.com/test"", true);
   4 | xhr.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
  10 | localStorage.setItem(""unsafe"", xhr.response);
  11 | localStorage.setItem(""anyKey"", xhr.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
> 14 | localStorage.setItem(""unsafe"", JSON.stringify(xhr.response));
     ^ Col 0
",javascript.javascript_local_storage_with_sensitive_data
F344,lines,namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,11,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,"
   1 | // unsafe object
   2 | const xhr = new XMLHttpRequest();
   3 | xhr.open(""GET"", ""http://example.com/test"", true);
   4 | xhr.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
  10 | localStorage.setItem(""unsafe"", xhr.response);
> 11 | localStorage.setItem(""anyKey"", xhr.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
  14 | localStorage.setItem(""unsafe"", JSON.stringify(xhr.response));
     ^ Col 0
",javascript.javascript_local_storage_with_sensitive_data
F344,lines,namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,10,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/js_insecure_ls_usage.js,"
   1 | // unsafe object
   2 | const xhr = new XMLHttpRequest();
   3 | xhr.open(""GET"", ""http://example.com/test"", true);
   4 | xhr.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
> 10 | localStorage.setItem(""unsafe"", xhr.response);
  11 | localStorage.setItem(""anyKey"", xhr.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
  14 | localStorage.setItem(""unsafe"", JSON.stringify(xhr.response));
     ^ Col 0
",javascript.javascript_local_storage_with_sensitive_data
F344,lines,namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,14,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,"
   1 | // unsafe object
   2 | const res = new XMLHttpRequest();
   3 | res.open(""GET"", ""http://example.com/test"", true);
   4 | res.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
  10 | localStorage.setItem(""unsafe"", res.response);
  11 | localStorage.setItem(""anyKey"", res.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
> 14 | localStorage.setItem(""unsafe"", JSON.stringify(res.response));
     ^ Col 0
",typescript.typescript_local_storage_with_sensitive_data
F344,lines,namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,11,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,"
   1 | // unsafe object
   2 | const res = new XMLHttpRequest();
   3 | res.open(""GET"", ""http://example.com/test"", true);
   4 | res.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
  10 | localStorage.setItem(""unsafe"", res.response);
> 11 | localStorage.setItem(""anyKey"", res.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
  14 | localStorage.setItem(""unsafe"", JSON.stringify(res.response));
     ^ Col 0
",typescript.typescript_local_storage_with_sensitive_data
F344,lines,namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,10,922,skims,344. Lack of data validation - Non Sanitized Variables,The application stores data from a HTTP request using browser's Local Storage. in namespace/skims/test/data/lib_root/f344/ts_insecure_ls_usage.ts,"
   1 | // unsafe object
   2 | const res = new XMLHttpRequest();
   3 | res.open(""GET"", ""http://example.com/test"", true);
   4 | res.send(null);
   5 |
   6 | // strings storage is allowed (Safe line)
   7 | localStorage.setItem(""anyKey"", ""anyStringValue"");
   8 |
   9 | // Direct storage with http obj MUST FAIL
> 10 | localStorage.setItem(""unsafe"", res.response);
  11 | localStorage.setItem(""anyKey"", res.responseText);
  12 |
  13 | // JSON.parse usage with http obj MUST FAIL
  14 | localStorage.setItem(""unsafe"", JSON.stringify(res.response));
     ^ Col 0
",typescript.typescript_local_storage_with_sensitive_data
F085,lines,namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,6,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,"
  1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
  4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
> 6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",javascript.javascript_client_storage
F085,lines,namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,4,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,"
  1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
> 4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
  6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",javascript.javascript_client_storage
F085,lines,namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,1,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/js_client_storage.jsx,"
> 1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
  4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
  6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",javascript.javascript_client_storage
F085,lines,namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,6,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,"
  1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
  4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
> 6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",typescript.typescript_client_storage
F085,lines,namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,4,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,"
  1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
> 4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
  6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",typescript.typescript_client_storage
F085,lines,namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,1,922,skims,085. Sensitive data stored in client-side storage,Sensitive information storage in namespace/skims/test/data/lib_root/f085/tsx_client_storage.tsx,"
> 1 | localStorage.getItem('password');
  2 | localStorage.getItem('non-sensitive');
  3 | localStorage.getItem(non.sensitive);
  4 | localStorage.setItem('whatever', sessionID);
  5 | localStorage.setItem(token.jwt, '123');
  6 | localStorage.getItem(session_token);
  7 | localStorage.getItem('is_authenticated');
  8 | localStorage.getItem('_isAuthorized');
    ^ Col 0
",typescript.typescript_client_storage
F368,lines,namespace/skims/test/data/lib_root/f368/java_host_key.java,11,923,skims,368. Unrestricted access between network segments - StrictHostKeyChecking,Connections should not be made to unknown servers or servers that have changed their keys in namespace/skims/test/data/lib_root/f368/java_host_key.java,"
   1 | import com.jcraft.jsch.JSch;
   2 | import com.jcraft.jsch.Session;
   3 |
   4 | public class Insecureconfigs {
   5 |  public static void connection1(){
   6 |   JSch ssh = new JSch();
   7 |   Session session = ssh.getSession(ManagementProperties.getValues(""USER""), ManagementProperties.getValues(""SERVERNAME""),
   8 |   java.util.Properties config = new java.util.Properties();
   9 |   String check = ""No"";
  10 |   config.put(""StrictHostKeyChecking"", check);
> 11 |   session.setConfig(config);
  12 |  }
  13 |
  14 |  public static void connection2(){
  15 |   JSch ssh = new JSch();
  16 |   session = ssh.getSession( Utils.DEFAULT_USER, value.getPublicIpAddress() );
  17 |   session.setConfig(""StrictHostKeyChecking"", ""No"");
  18 |   session.connect();
  19 |  }
  20 |
  21 | }
     ^ Col 0
",java.java_host_key_checking
F368,lines,namespace/skims/test/data/lib_root/f368/java_host_key.java,17,923,skims,368. Unrestricted access between network segments - StrictHostKeyChecking,Connections should not be made to unknown servers or servers that have changed their keys in namespace/skims/test/data/lib_root/f368/java_host_key.java,"
   7 |   Session session = ssh.getSession(ManagementProperties.getValues(""USER""), ManagementProperties.getValues(""SERVERNAME""),
   8 |   java.util.Properties config = new java.util.Properties();
   9 |   String check = ""No"";
  10 |   config.put(""StrictHostKeyChecking"", check);
  11 |   session.setConfig(config);
  12 |  }
  13 |
  14 |  public static void connection2(){
  15 |   JSch ssh = new JSch();
  16 |   session = ssh.getSession( Utils.DEFAULT_USER, value.getPublicIpAddress() );
> 17 |   session.setConfig(""StrictHostKeyChecking"", ""No"");
  18 |   session.connect();
  19 |  }
  20 |
  21 | }
  22 |
  23 | public class Secureconfigs {
  24 |  public static void connectionSFTP(){
  25 |   JSch ssh = new JSch();
  26 |   Session session = ssh.getSession(Utils.DEFAULT_USER, value.getPublicIpAddress());
  27 |   java.util.Properties config = new java.util.Properties();
     ^ Col 0
",java.java_host_key_checking
F011,lines,namespace/skims/test/data/lib_root/f011/c_sharp_xsl_transform_object.cs,12,937,skims,011. Use of software with known vulnerabilities,"Instantiating an System.Xml.Xsl.XslTransform, which doesn't restrict potentially dangerous external references or prevent scripts.
 in namespace/skims/test/data/lib_root/f011/c_sharp_xsl_transform_object.cs","
   1 | ng System;
   2 | ng System.Xml;
   3 | ng System.Xml.XPath;
   4 | ng System.Xml.Xsl;
   5 |
   6 | espace TestForXslTransform
   7 |
   8 |  class Program
   9 |  {
  10 |      static void Main(string[] args)
  11 |      {
> 12 |          XslTransform xslt = new XslTransform();
  13 |          xslt.Load(""https://server/favorite.xsl"");
  14 |          XPathDocument mydata = new XPathDocument(""inputdata.xml"");
  15 |          XmlWriter writer = new XmlTextWriter(Console.Out);
  16 |          xslt.Transform(mydata, null, writer, null);
  17 |      }
  18 |  }
  19 |
     ^ Col 3
",c_sharp.c_sharp_xsl_transform_object
F011,lines,namespace/skims/test/data/lib_root/f011/c_sharp_schema_by_url.cs,8,937,skims,011. Use of software with known vulnerabilities,"Overload of XmlSchemaCollection.Add(String, String) is using XmlUrlResolver to specify external XML schema in the form of an URI. If the URI String is tainted, it may lead to parsing of a malicious XML schema
 in namespace/skims/test/data/lib_root/f011/c_sharp_schema_by_url.cs","
   1 | using System;
   2 |
   3 | class ExampleClass
   4 | {
   5 |     public void ExampleMethod()
   6 |     {
   7 |         XmlSchemaCollection xsc = new XmlSchemaCollection();
>  8 |         xsc.Add(""urn: bookstore - schema"", ""books.xsd"");
   9 |     }
  10 | }
     ^ Col 0
",c_sharp.c_sharp_schema_by_url
F416,lines,namespace/skims/test/data/lib_root/f416/c_sharp_xaml_injection.cs,11,94,skims,416. XAML injection,Potentially untrusted HTTP request input reaches a System.Windows.Markup.XamlReader Load method in namespace/skims/test/data/lib_root/f416/c_sharp_xaml_injection.cs,"
   1 | using System;
   2 | using System.IO;
   3 |
   4 | public partial class WebForm : System.Web.UI.Page
   5 | {
   6 |     protected void Page_Load(object sender, EventArgs e)
   7 |     {
   8 |         string input = Request.Form[""in""];
   9 |         byte[] bytes = Convert.FromBase64String(input);
  10 |         MemoryStream ms = new MemoryStream(bytes);
> 11 |         System.Windows.Markup.XamlReader.Load(ms);
  12 |     }
  13 | }
     ^ Col 0
",csharp.csharp_xaml_injection
