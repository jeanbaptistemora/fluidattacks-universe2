finding,kind,what,where,cwe,stream,title,description,snippet
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_01.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_01.cs,"
  21 |
  22 | 27_Use_Broken_Crypto
  23 |
  24 | Crypto__3DES_01 : AbstractTestCase
  25 |
  26 |
  27 |  Bad()
  28 |
  29 | HER_INPUT = ""ABCDEFG123456"";
  30 | ;
> 31 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
  32 |
  33 |  a weak crypto algorithm, 3DES */
  34 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
  35 | yStream ms = new MemoryStream())
  36 |
  37 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  38 |
  39 | g (StreamWriter sw = new StreamWriter(cs))
  40 |
  41 | sw.Write(CIPHER_INPUT);
     ^ Col 24
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_02.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_02.cs,"
   23 |
   24 | to__3DES_02 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 |
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_03.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_03.cs,"
   23 |
   24 | to__3DES_03 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 |
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_04.cs,39,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_04.cs,"
   29 |
   30 | TE_CONST_TRUE = true;
   31 | TE_CONST_FALSE = false;
   32 |
   33 | ()
   34 |
   35 | UE)
   36 |
   37 | HER_INPUT = ""ABCDEFG123456"";
   38 | ;
>  39 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   40 |
   41 |  a weak crypto algorithm, 3DES */
   42 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   43 | yStream ms = new MemoryStream())
   44 |
   45 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   46 |
   47 | g (StreamWriter sw = new StreamWriter(cs))
   48 |
   49 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_05.cs,39,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_05.cs,"
   29 |
   30 |  = true;
   31 | e = false;
   32 |
   33 | ()
   34 |
   35 |
   36 |
   37 | HER_INPUT = ""ABCDEFG123456"";
   38 | ;
>  39 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   40 |
   41 |  a weak crypto algorithm, 3DES */
   42 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   43 | yStream ms = new MemoryStream())
   44 |
   45 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   46 |
   47 | g (StreamWriter sw = new StreamWriter(cs))
   48 |
   49 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_06.cs,38,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_06.cs,"
   28 |
   29 |
   30 | E_CONST_FIVE = 5;
   31 |
   32 | ()
   33 |
   34 | VE == 5)
   35 |
   36 | HER_INPUT = ""ABCDEFG123456"";
   37 | ;
>  38 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   39 |
   40 |  a weak crypto algorithm, 3DES */
   41 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   42 | yStream ms = new MemoryStream())
   43 |
   44 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   45 |
   46 | g (StreamWriter sw = new StreamWriter(cs))
   47 |
   48 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_07.cs,38,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_07.cs,"
   28 |  its initialized value.
   29 |
   30 | = 5;
   31 |
   32 | ()
   33 |
   34 | )
   35 |
   36 | HER_INPUT = ""ABCDEFG123456"";
   37 | ;
>  38 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   39 |
   40 |  a weak crypto algorithm, 3DES */
   41 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   42 | yStream ms = new MemoryStream())
   43 |
   44 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   45 |
   46 | g (StreamWriter sw = new StreamWriter(cs))
   47 |
   48 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_08.cs,46,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_08.cs,"
   36 |
   37 |
   38 |
   39 |
   40 | ()
   41 |
   42 | ue())
   43 |
   44 | HER_INPUT = ""ABCDEFG123456"";
   45 | ;
>  46 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   47 |
   48 |  a weak crypto algorithm, 3DES */
   49 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   50 | yStream ms = new MemoryStream())
   51 |
   52 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   53 |
   54 | g (StreamWriter sw = new StreamWriter(cs))
   55 |
   56 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_09.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_09.cs,"
   23 |
   24 | to__3DES_09 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 | LY_TRUE)
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_10.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_10.cs,"
   23 |
   24 | to__3DES_10 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 |
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_11.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_11.cs,"
   23 |
   24 | to__3DES_11 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 | True())
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_12.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_12.cs,"
   23 |
   24 | to__3DES_12 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 | TrueOrFalse())
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_13.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_13.cs,"
   23 |
   24 | to__3DES_13 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 | LY_FIVE == 5)
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_14.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_14.cs,"
   23 |
   24 | to__3DES_14 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 |  5)
   30 |
   31 | HER_INPUT = ""ABCDEFG123456"";
   32 | ;
>  33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   34 |
   35 |  a weak crypto algorithm, 3DES */
   36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   37 | yStream ms = new MemoryStream())
   38 |
   39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 | g (StreamWriter sw = new StreamWriter(cs))
   42 |
   43 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_15.cs,34,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_15.cs,"
   24 | to__3DES_15 : AbstractTestCase
   25 |
   26 |
   27 | ()
   28 |
   29 |
   30 |
   31 |
   32 | HER_INPUT = ""ABCDEFG123456"";
   33 | ;
>  34 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
   35 |
   36 |  a weak crypto algorithm, 3DES */
   37 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
   38 | yStream ms = new MemoryStream())
   39 |
   40 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   41 |
   42 | g (StreamWriter sw = new StreamWriter(cs))
   43 |
   44 | sw.Write(CIPHER_INPUT);
      ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_16.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_16.cs,"
  23 |
  24 | to__3DES_16 : AbstractTestCase
  25 |
  26 |
  27 | ()
  28 |
  29 |
  30 |
  31 | HER_INPUT = ""ABCDEFG123456"";
  32 | ;
> 33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
  34 |
  35 |  a weak crypto algorithm, 3DES */
  36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
  37 | yStream ms = new MemoryStream())
  38 |
  39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  40 |
  41 | g (StreamWriter sw = new StreamWriter(cs))
  42 |
  43 | sw.Write(CIPHER_INPUT);
     ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_17.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__3DES_17.cs,"
  23 |
  24 | to__3DES_17 : AbstractTestCase
  25 |
  26 |
  27 | ()
  28 |
  29 | ; j++)
  30 |
  31 | HER_INPUT = ""ABCDEFG123456"";
  32 | ;
> 33 | CryptoServiceProvider tdes = new TripleDESCryptoServiceProvider())
  34 |
  35 |  a weak crypto algorithm, 3DES */
  36 | form encryptor = tdes.CreateEncryptor(tdes.Key, tdes.IV);
  37 | yStream ms = new MemoryStream())
  38 |
  39 | ryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  40 |
  41 | g (StreamWriter sw = new StreamWriter(cs))
  42 |
  43 | sw.Write(CIPHER_INPUT);
     ^ Col 28
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_01.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_01.cs,"
  21 |
  22 | es.CWE327_Use_Broken_Crypto
  23 |
  24 | Broken_Crypto__DES_01 : AbstractTestCase
  25 |
  26 |
  27 | de void Bad()
  28 |
  29 | ing CIPHER_INPUT = ""ABCDEFG123456"";
  30 | crypted;
> 31 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
  32 |
  33 | AW: Use a weak crypto algorithm, DES */
  34 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
  35 |  (MemoryStream ms = new MemoryStream())
  36 |
  37 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  38 |
  39 |    using (StreamWriter sw = new StreamWriter(cs))
  40 |    {
  41 |        sw.Write(CIPHER_INPUT);
     ^ Col 17
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_02.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_02.cs,"
   23 |
   24 | en_Crypto__DES_02 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 |
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_03.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_03.cs,"
   23 |
   24 | en_Crypto__DES_03 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 |
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_04.cs,39,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_04.cs,"
   29 |
   30 | l PRIVATE_CONST_TRUE = true;
   31 | l PRIVATE_CONST_FALSE = false;
   32 |
   33 | oid Bad()
   34 |
   35 | ONST_TRUE)
   36 |
   37 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   38 | crypted;
>  39 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   40 |
   41 | AW: Use a weak crypto algorithm, DES */
   42 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   43 |  (MemoryStream ms = new MemoryStream())
   44 |
   45 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   46 |
   47 |    using (StreamWriter sw = new StreamWriter(cs))
   48 |    {
   49 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_05.cs,39,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_05.cs,"
   29 |
   30 | ateTrue = true;
   31 | ateFalse = false;
   32 |
   33 | oid Bad()
   34 |
   35 | ue)
   36 |
   37 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   38 | crypted;
>  39 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   40 |
   41 | AW: Use a weak crypto algorithm, DES */
   42 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   43 |  (MemoryStream ms = new MemoryStream())
   44 |
   45 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   46 |
   47 |    using (StreamWriter sw = new StreamWriter(cs))
   48 |    {
   49 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_06.cs,38,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_06.cs,"
   28 |
   29 |
   30 |  PRIVATE_CONST_FIVE = 5;
   31 |
   32 | oid Bad()
   33 |
   34 | ONST_FIVE == 5)
   35 |
   36 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   37 | crypted;
>  38 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   39 |
   40 | AW: Use a weak crypto algorithm, DES */
   41 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   42 |  (MemoryStream ms = new MemoryStream())
   43 |
   44 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   45 |
   46 |    using (StreamWriter sw = new StreamWriter(cs))
   47 |    {
   48 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_07.cs,38,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_07.cs,"
   28 | ys give its initialized value.
   29 |
   30 | teFive = 5;
   31 |
   32 | oid Bad()
   33 |
   34 | ve == 5)
   35 |
   36 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   37 | crypted;
>  38 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   39 |
   40 | AW: Use a weak crypto algorithm, DES */
   41 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   42 |  (MemoryStream ms = new MemoryStream())
   43 |
   44 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   45 |
   46 |    using (StreamWriter sw = new StreamWriter(cs))
   47 |    {
   48 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_08.cs,46,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_08.cs,"
   36 |
   37 |
   38 |
   39 |
   40 | oid Bad()
   41 |
   42 | turnsTrue())
   43 |
   44 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   45 | crypted;
>  46 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   47 |
   48 | AW: Use a weak crypto algorithm, DES */
   49 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   50 |  (MemoryStream ms = new MemoryStream())
   51 |
   52 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   53 |
   54 |    using (StreamWriter sw = new StreamWriter(cs))
   55 |    {
   56 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_09.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_09.cs,"
   23 |
   24 | en_Crypto__DES_09 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | _READONLY_TRUE)
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_10.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_10.cs,"
   23 |
   24 | en_Crypto__DES_10 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | True)
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_11.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_11.cs,"
   23 |
   24 | en_Crypto__DES_11 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | ReturnsTrue())
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_12.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_12.cs,"
   23 |
   24 | en_Crypto__DES_12 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | ReturnsTrueOrFalse())
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_13.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_13.cs,"
   23 |
   24 | en_Crypto__DES_13 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | _READONLY_FIVE == 5)
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_14.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_14.cs,"
   23 |
   24 | en_Crypto__DES_14 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 | Five == 5)
   30 |
   31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   32 | crypted;
>  33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   34 |
   35 | AW: Use a weak crypto algorithm, DES */
   36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   37 |  (MemoryStream ms = new MemoryStream())
   38 |
   39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   40 |
   41 |    using (StreamWriter sw = new StreamWriter(cs))
   42 |    {
   43 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_15.cs,34,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_15.cs,"
   24 | en_Crypto__DES_15 : AbstractTestCase
   25 |
   26 |
   27 | oid Bad()
   28 |
   29 |
   30 |
   31 |
   32 | ing CIPHER_INPUT = ""ABCDEFG123456"";
   33 | crypted;
>  34 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
   35 |
   36 | AW: Use a weak crypto algorithm, DES */
   37 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
   38 |  (MemoryStream ms = new MemoryStream())
   39 |
   40 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
   41 |
   42 |    using (StreamWriter sw = new StreamWriter(cs))
   43 |    {
   44 |        sw.Write(CIPHER_INPUT);
      ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_16.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_16.cs,"
  23 |
  24 | en_Crypto__DES_16 : AbstractTestCase
  25 |
  26 |
  27 | oid Bad()
  28 |
  29 |
  30 |
  31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
  32 | crypted;
> 33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
  34 |
  35 | AW: Use a weak crypto algorithm, DES */
  36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
  37 |  (MemoryStream ms = new MemoryStream())
  38 |
  39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  40 |
  41 |    using (StreamWriter sw = new StreamWriter(cs))
  42 |    {
  43 |        sw.Write(CIPHER_INPUT);
     ^ Col 21
"
F052,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_17.cs,33,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure encryption algorithm in src/testcases/CWE327_Use_Broken_Crypto/CWE327_Use_Broken_Crypto__DES_17.cs,"
  23 |
  24 | en_Crypto__DES_17 : AbstractTestCase
  25 |
  26 |
  27 | oid Bad()
  28 |
  29 | ; j < 1; j++)
  30 |
  31 | ing CIPHER_INPUT = ""ABCDEFG123456"";
  32 | crypted;
> 33 | SCryptoServiceProvider des = new DESCryptoServiceProvider())
  34 |
  35 | AW: Use a weak crypto algorithm, DES */
  36 | toTransform encryptor = des.CreateEncryptor(des.Key, des.IV);
  37 |  (MemoryStream ms = new MemoryStream())
  38 |
  39 | sing (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
  40 |
  41 |    using (StreamWriter sw = new StreamWriter(cs))
  42 |    {
  43 |        sw.Write(CIPHER_INPUT);
     ^ Col 21
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_01.cs,29,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_01.cs,"
  19 | System.Text;
  20 | System.Security.Cryptography;
  21 |
  22 | ace testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | CWE328_Reversible_One_Way_Hash__MD5_01 : AbstractTestCase
  25 |
  26 | OMITBAD)
  27 | blic override void Bad()
  28 |
> 29 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  30 |   {
  31 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  32 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  33 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  34 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  35 |   }
  36 |
  37 |  //omitbad
  38 | OMITGOOD)
  39 | blic override void Good()
     ^ Col 6
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_02.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_02.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_02 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (true)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_03.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_03.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_03 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (5 == 5)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_04.cs,37,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_04.cs,"
  27 | able to identify that reads of these will always return their
  28 | tialized values.
  29 |
  30 | e const bool PRIVATE_CONST_TRUE = true;
  31 | e const bool PRIVATE_CONST_FALSE = false;
  32 | BAD)
  33 |  override void Bad()
  34 |
  35 |  (PRIVATE_CONST_TRUE)
  36 |
> 37 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  38 |   {
  39 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  40 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  41 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  42 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  43 |   }
  44 |
  45 |
  46 | mitbad
  47 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_05.cs,37,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_05.cs,"
  27 | igned any other value, so a tool should be able to identify that
  28 | ds of these will always return their initialized values.
  29 |
  30 | e bool privateTrue = true;
  31 | e bool privateFalse = false;
  32 | BAD)
  33 |  override void Bad()
  34 |
  35 |  (privateTrue)
  36 |
> 37 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  38 |   {
  39 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  40 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  41 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  42 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  43 |   }
  44 |
  45 |
  46 | mitbad
  47 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_06.cs,36,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_06.cs,"
  26 |  variable below is declared ""const"", so a tool should be able
  27 | identify that reads of this will always give its initialized
  28 | ue.
  29 |
  30 | e const int PRIVATE_CONST_FIVE = 5;
  31 | BAD)
  32 |  override void Bad()
  33 |
  34 |  (PRIVATE_CONST_FIVE == 5)
  35 |
> 36 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  37 |   {
  38 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  39 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  40 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  41 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  42 |   }
  43 |
  44 |
  45 | mitbad
  46 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_07.cs,36,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_07.cs,"
  26 |  variable below is not declared ""readonly"", but is never assigned
  27 |  other value so a tool should be able to identify that reads of
  28 | s will always give its initialized value.
  29 |
  30 | e int privateFive = 5;
  31 | BAD)
  32 |  override void Bad()
  33 |
  34 |  (privateFive == 5)
  35 |
> 36 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  37 |   {
  38 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  39 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  40 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  41 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  42 |   }
  43 |
  44 |
  45 | mitbad
  46 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_08.cs,44,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_08.cs,"
  34 |
  35 | e static bool PrivateReturnsFalse()
  36 |
  37 | turn false;
  38 |
  39 | BAD)
  40 |  override void Bad()
  41 |
  42 |  (PrivateReturnsTrue())
  43 |
> 44 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  45 |   {
  46 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  47 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  48 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  49 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  50 |   }
  51 |
  52 |
  53 | mitbad
  54 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_09.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_09.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_09 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.STATIC_READONLY_TRUE)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_10.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_10.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_10 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.staticTrue)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_11.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_11.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_11 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.StaticReturnsTrue())
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_12.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_12.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_12 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.StaticReturnsTrueOrFalse())
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 | se
  40 |
  41 |   using (HashAlgorithm sha512 = new SHA512CryptoServiceProvider())
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_13.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_13.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_13 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.STATIC_READONLY_FIVE == 5)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_14.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_14.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_14 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 |  (IO.staticFive == 5)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_15.cs,32,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_15.cs,"
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_15 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 | itch (7)
  30 |
  31 | se 7:
> 32 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  33 |   {
  34 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  35 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  36 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  37 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  38 |   }
  39 |   break;
  40 | fault:
  41 |   /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
  42 |   IO.WriteLine(""Benign, fixed string"");
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_16.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_16.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_16 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 | ile(true)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |   break;
  39 |
  40 |
  41 | mitbad
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_17.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__MD5_17.cs,"
  21 |
  22 | testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 28_Reversible_One_Way_Hash__MD5_17 : AbstractTestCase
  25 |
  26 | BAD)
  27 |  override void Bad()
  28 |
  29 | r(int j = 0; j < 1; j++)
  30 |
> 31 |   using (HashAlgorithm md5 = new MD5CryptoServiceProvider())
  32 |   {
  33 |       /* FLAW: Insecure cryptographic hashing algorithm (MD5) */
  34 |       byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm
  35 |       byte[] textWithReversibleHash = md5.ComputeHash(textWithUTF8);
  36 |       IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |   }
  38 |
  39 |
  40 | mitbad
  41 | GOOD)
     ^ Col 10
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_01.cs,29,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_01.cs,"
  19 | ystem.Text;
  20 | ystem.Security.Cryptography;
  21 |
  22 | ce testcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | WE328_Reversible_One_Way_Hash__SHA1_01 : AbstractTestCase
  25 |
  26 | MITBAD)
  27 | lic override void Bad()
  28 |
> 29 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  30 |  {
  31 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  32 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  33 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  34 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  35 |  }
  36 |
  37 | //omitbad
  38 | MITGOOD)
  39 | lic override void Good()
     ^ Col 7
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_02.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_02.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_02 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (true)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_03.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_03.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_03 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (5 == 5)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_04.cs,37,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_04.cs,"
  27 | ble to identify that reads of these will always return their
  28 | ialized values.
  29 |
  30 |  const bool PRIVATE_CONST_TRUE = true;
  31 |  const bool PRIVATE_CONST_FALSE = false;
  32 | AD)
  33 | override void Bad()
  34 |
  35 | (PRIVATE_CONST_TRUE)
  36 |
> 37 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  38 |  {
  39 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  40 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  41 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  42 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  43 |  }
  44 |
  45 |
  46 | itbad
  47 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_05.cs,37,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_05.cs,"
  27 | gned any other value, so a tool should be able to identify that
  28 | s of these will always return their initialized values.
  29 |
  30 |  bool privateTrue = true;
  31 |  bool privateFalse = false;
  32 | AD)
  33 | override void Bad()
  34 |
  35 | (privateTrue)
  36 |
> 37 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  38 |  {
  39 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  40 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  41 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  42 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  43 |  }
  44 |
  45 |
  46 | itbad
  47 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_06.cs,36,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_06.cs,"
  26 | variable below is declared ""const"", so a tool should be able
  27 | dentify that reads of this will always give its initialized
  28 | e.
  29 |
  30 |  const int PRIVATE_CONST_FIVE = 5;
  31 | AD)
  32 | override void Bad()
  33 |
  34 | (PRIVATE_CONST_FIVE == 5)
  35 |
> 36 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  37 |  {
  38 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  39 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  40 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  41 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  42 |  }
  43 |
  44 |
  45 | itbad
  46 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_07.cs,36,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_07.cs,"
  26 | variable below is not declared ""readonly"", but is never assigned
  27 | other value so a tool should be able to identify that reads of
  28 |  will always give its initialized value.
  29 |
  30 |  int privateFive = 5;
  31 | AD)
  32 | override void Bad()
  33 |
  34 | (privateFive == 5)
  35 |
> 36 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  37 |  {
  38 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  39 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  40 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  41 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  42 |  }
  43 |
  44 |
  45 | itbad
  46 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_08.cs,44,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_08.cs,"
  34 |
  35 |  static bool PrivateReturnsFalse()
  36 |
  37 | urn false;
  38 |
  39 | AD)
  40 | override void Bad()
  41 |
  42 | (PrivateReturnsTrue())
  43 |
> 44 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  45 |  {
  46 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  47 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  48 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  49 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  50 |  }
  51 |
  52 |
  53 | itbad
  54 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_09.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_09.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_09 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.STATIC_READONLY_TRUE)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_10.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_10.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_10 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.staticTrue)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_11.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_11.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_11 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.StaticReturnsTrue())
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_12.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_12.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_12 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.StaticReturnsTrueOrFalse())
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 | e
  40 |
  41 |  using (HashAlgorithm sha512 = new SHA512CryptoServiceProvider())
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_13.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_13.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_13 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.STATIC_READONLY_FIVE == 5)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_14.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_14.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_14 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (IO.staticFive == 5)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_15.cs,32,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_15.cs,"
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_15 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | tch (7)
  30 |
  31 | e 7:
> 32 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  33 |  {
  34 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  35 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  36 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  37 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  38 |  }
  39 |  break;
  40 | ault:
  41 |  /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
  42 |  IO.WriteLine(""Benign, fixed string"");
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_16.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_16.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_16 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | le(true)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |  break;
  39 |
  40 |
  41 | itbad
     ^ Col 11
"
F052,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_17.cs,31,310 + 327,skims,F052. Insecure encryption algorithm,Use of insecure hashing function in src/testcases/CWE328_Reversible_One_Way_Hash/CWE328_Reversible_One_Way_Hash__SHA1_17.cs,"
  21 |
  22 | estcases.CWE328_Reversible_One_Way_Hash
  23 |
  24 | 8_Reversible_One_Way_Hash__SHA1_17 : AbstractTestCase
  25 |
  26 | AD)
  27 | override void Bad()
  28 |
  29 | (int j = 0; j < 1; j++)
  30 |
> 31 |  using (HashAlgorithm sha1 = new SHA1CryptoServiceProvider())
  32 |  {
  33 |      /* FLAW: Insecure cryptographic hashing algorithm (SHA1) */
  34 |      byte[] textWithUTF8 = Encoding.UTF8.GetBytes(""Test Input""); /* INCIDENTAL FLAW: Hard-coded input to hash algorithm *
  35 |      byte[] textWithReversibleHash = sha1.ComputeHash(textWithUTF8);
  36 |      IO.WriteLine(IO.ToHex(textWithReversibleHash));
  37 |  }
  38 |
  39 |
  40 | itbad
  41 | OOD)
     ^ Col 11
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_01.cs,48,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_01.cs,"
  38 |             path = ""/home/user/doesntexistandneverwill.txt"";
  39 |         }
  40 |         try
  41 |         {
  42 |             using (StreamReader sr = new StreamReader(path))
  43 |             {
  44 |                 IO.WriteLine(""Created a StreamReader"");
  45 |             }
  46 |         }
  47 |         catch (FileNotFoundException exceptFileNotFound)
> 48 |         {
  49 |             /* FLAW: do nothing if the file doesn't exist */
  50 |         }
  51 |     }
  52 | #endif //omitbad
  53 | #if (!OMITGOOD)
  54 |     public override void Good()
  55 |     {
  56 |         Good1();
  57 |     }
  58 |
     ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_02.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_02.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* Good1() changes true to false */
   58 |     private void Good1()
   59 |     {
   60 |         if (false)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_03.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_03.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* Good1() changes 5==5 to 5!=5 */
   58 |     private void Good1()
   59 |     {
   60 |         if (5 != 5)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_04.cs,56,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_04.cs,"
   46 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   47 |             }
   48 |             try
   49 |             {
   50 |                 using (StreamReader sr = new StreamReader(path))
   51 |                 {
   52 |                     IO.WriteLine(""Created a StreamReader"");
   53 |                 }
   54 |             }
   55 |             catch (FileNotFoundException exceptFileNotFound)
>  56 |             {
   57 |                 /* FLAW: do nothing if the file doesn't exist */
   58 |             }
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* Good1() changes PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   64 |     private void Good1()
   65 |     {
   66 |         if (PRIVATE_CONST_FALSE)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_05.cs,56,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_05.cs,"
   46 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   47 |             }
   48 |             try
   49 |             {
   50 |                 using (StreamReader sr = new StreamReader(path))
   51 |                 {
   52 |                     IO.WriteLine(""Created a StreamReader"");
   53 |                 }
   54 |             }
   55 |             catch (FileNotFoundException exceptFileNotFound)
>  56 |             {
   57 |                 /* FLAW: do nothing if the file doesn't exist */
   58 |             }
   59 |         }
   60 |     }
   61 | #endif //omitbad
   62 | #if (!OMITGOOD)
   63 |     /* Good1() changes privateTrue to privateFalse */
   64 |     private void Good1()
   65 |     {
   66 |         if (privateFalse)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_06.cs,55,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_06.cs,"
   45 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   46 |             }
   47 |             try
   48 |             {
   49 |                 using (StreamReader sr = new StreamReader(path))
   50 |                 {
   51 |                     IO.WriteLine(""Created a StreamReader"");
   52 |                 }
   53 |             }
   54 |             catch (FileNotFoundException exceptFileNotFound)
>  55 |             {
   56 |                 /* FLAW: do nothing if the file doesn't exist */
   57 |             }
   58 |         }
   59 |     }
   60 | #endif //omitbad
   61 | #if (!OMITGOOD)
   62 |     /* Good1() changes PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   63 |     private void Good1()
   64 |     {
   65 |         if (PRIVATE_CONST_FIVE != 5)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_07.cs,55,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_07.cs,"
   45 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   46 |             }
   47 |             try
   48 |             {
   49 |                 using (StreamReader sr = new StreamReader(path))
   50 |                 {
   51 |                     IO.WriteLine(""Created a StreamReader"");
   52 |                 }
   53 |             }
   54 |             catch (FileNotFoundException exceptFileNotFound)
>  55 |             {
   56 |                 /* FLAW: do nothing if the file doesn't exist */
   57 |             }
   58 |         }
   59 |     }
   60 | #endif //omitbad
   61 | #if (!OMITGOOD)
   62 |     /* Good1() changes privateFive==5 to privateFive!=5 */
   63 |     private void Good1()
   64 |     {
   65 |         if (privateFive != 5)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_08.cs,63,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_08.cs,"
   53 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   54 |             }
   55 |             try
   56 |             {
   57 |                 using (StreamReader sr = new StreamReader(path))
   58 |                 {
   59 |                     IO.WriteLine(""Created a StreamReader"");
   60 |                 }
   61 |             }
   62 |             catch (FileNotFoundException exceptFileNotFound)
>  63 |             {
   64 |                 /* FLAW: do nothing if the file doesn't exist */
   65 |             }
   66 |         }
   67 |     }
   68 | #endif //omitbad
   69 | #if (!OMITGOOD)
   70 |     /* Good1() changes PrivateReturnsTrue() to privateReturnsFalse() */
   71 |     private void Good1()
   72 |     {
   73 |         if (PrivateReturnsFalse())
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_09.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_09.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* Good1() changes IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   58 |     private void Good1()
   59 |     {
   60 |         if (IO.STATIC_READONLY_FALSE)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_10.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_10.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* good1() changes IO.staticTrue to IO.staticFalse */
   58 |     private void Good1()
   59 |     {
   60 |         if (IO.staticFalse)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_11.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_11.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* good1() changes IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   58 |     private void Good1()
   59 |     {
   60 |         if (IO.StaticReturnsFalse())
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_12.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_12.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |         else
   55 |         {
   56 |             int p = (int)Environment.OSVersion.Platform;
   57 |             string path = null;
   58 |             if (p == (int)PlatformID.Win32NT || p == (int)PlatformID.Win32Windows || p == (int)PlatformID.Win32S || p ==
   59 |             {
   60 |                 /* running on Windows */
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_13.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_13.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* Good1() changes IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   58 |     private void Good1()
   59 |     {
   60 |         if (IO.STATIC_READONLY_FIVE != 5)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_14.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_14.cs,"
   40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   41 |             }
   42 |             try
   43 |             {
   44 |                 using (StreamReader sr = new StreamReader(path))
   45 |                 {
   46 |                     IO.WriteLine(""Created a StreamReader"");
   47 |                 }
   48 |             }
   49 |             catch (FileNotFoundException exceptFileNotFound)
>  50 |             {
   51 |                 /* FLAW: do nothing if the file doesn't exist */
   52 |             }
   53 |         }
   54 |     }
   55 | #endif //omitbad
   56 | #if (!OMITGOOD)
   57 |     /* Good1() changes IO.staticFive==5 to IO.staticFive!=5 */
   58 |     private void Good1()
   59 |     {
   60 |         if (IO.staticFive != 5)
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_15.cs,51,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_15.cs,"
   41 |                 path = ""/home/user/doesntexistandneverwill.txt"";
   42 |             }
   43 |             try
   44 |             {
   45 |                 using (StreamReader sr = new StreamReader(path))
   46 |                 {
   47 |                     IO.WriteLine(""Created a StreamReader"");
   48 |                 }
   49 |             }
   50 |             catch (FileNotFoundException exceptFileNotFound)
>  51 |             {
   52 |                 /* FLAW: do nothing if the file doesn't exist */
   53 |             }
   54 |             break;
   55 |         default:
   56 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
   57 |             IO.WriteLine(""Benign, fixed string"");
   58 |             break;
   59 |         }
   60 |     }
   61 | #endif //omitbad
      ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_16.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_16.cs,"
  40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
  41 |             }
  42 |             try
  43 |             {
  44 |                 using (StreamReader sr = new StreamReader(path))
  45 |                 {
  46 |                     IO.WriteLine(""Created a StreamReader"");
  47 |                 }
  48 |             }
  49 |             catch (FileNotFoundException exceptFileNotFound)
> 50 |             {
  51 |                 /* FLAW: do nothing if the file doesn't exist */
  52 |             }
  53 |             break;
  54 |         }
  55 |     }
  56 | #endif //omitbad
  57 | #if (!OMITGOOD)
  58 |     /* Good1() change the conditions on the while statements */
  59 |     private void Good1()
  60 |     {
     ^ Col 0
"
F061,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_17.cs,50,390,skims,F061. Errors without traceability,Empty CSharp catch in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__reader_17.cs,"
  40 |                 path = ""/home/user/doesntexistandneverwill.txt"";
  41 |             }
  42 |             try
  43 |             {
  44 |                 using (StreamReader sr = new StreamReader(path))
  45 |                 {
  46 |                     IO.WriteLine(""Created a StreamReader"");
  47 |                 }
  48 |             }
  49 |             catch (FileNotFoundException exceptFileNotFound)
> 50 |             {
  51 |                 /* FLAW: do nothing if the file doesn't exist */
  52 |             }
  53 |         }
  54 |     }
  55 | #endif //omitbad
  56 | #if (!OMITGOOD)
  57 |     /* Good1() use the GoodSinkBody in the for statement */
  58 |     private void Good1()
  59 |     {
  60 |         for(int k = 0; k < 1; k++)
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE327_Use_Broken_Crypto/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE327_Use_Broken_Crypto/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE328_Reversible_One_Way_Hash/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE328_Reversible_One_Way_Hash/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_01.cs,71,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_01.cs,"
  58 |             /* running on Windows */
  59 |             newDirectory = ""C:\\lvl_1\\lvl_2\\lvl_3\\"";
  60 |         }
  61 |         else
  62 |         {
  63 |             /* running on non-Windows */
  64 |             newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  65 |         }
  66 |         /* FIX: report the CreateDirectory failure and throw a new Exception */
  67 |         try
  68 |         {
  69 |             Directory.CreateDirectory(newDirectory);
  70 |         }
> 71 |         catch (Exception except)
  72 |         {
  73 |             throw except;
  74 |         }
  75 |     }
  76 | #endif //omitgood
  77 | }
  78 | }
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_02.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_02.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* Good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (true)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_02.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_02.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_03.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_03.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* Good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (5 == 5)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_03.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_03.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_04.cs,83,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_04.cs,"
   73 |             else
   74 |             {
   75 |                 /* running on non-Windows */
   76 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   77 |             }
   78 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   79 |             try
   80 |             {
   81 |                 Directory.CreateDirectory(newDirectory);
   82 |             }
>  83 |             catch (Exception except)
   84 |             {
   85 |                 throw except;
   86 |             }
   87 |         }
   88 |     }
   89 |
   90 |     /* Good2() reverses the bodies in the if statement */
   91 |     private void Good2()
   92 |     {
   93 |         if (PRIVATE_CONST_TRUE)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_04.cs,112,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_04.cs,"
  102 |             else
  103 |             {
  104 |                 /* running on non-Windows */
  105 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  106 |             }
  107 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  108 |             try
  109 |             {
  110 |                 Directory.CreateDirectory(newDirectory);
  111 |             }
> 112 |             catch (Exception except)
  113 |             {
  114 |                 throw except;
  115 |             }
  116 |         }
  117 |     }
  118 |
  119 |     public override void Good()
  120 |     {
  121 |         Good1();
  122 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_05.cs,83,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_05.cs,"
   73 |             else
   74 |             {
   75 |                 /* running on non-Windows */
   76 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   77 |             }
   78 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   79 |             try
   80 |             {
   81 |                 Directory.CreateDirectory(newDirectory);
   82 |             }
>  83 |             catch (Exception except)
   84 |             {
   85 |                 throw except;
   86 |             }
   87 |         }
   88 |     }
   89 |
   90 |     /* Good2() reverses the bodies in the if statement */
   91 |     private void Good2()
   92 |     {
   93 |         if (privateTrue)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_05.cs,112,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_05.cs,"
  102 |             else
  103 |             {
  104 |                 /* running on non-Windows */
  105 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  106 |             }
  107 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  108 |             try
  109 |             {
  110 |                 Directory.CreateDirectory(newDirectory);
  111 |             }
> 112 |             catch (Exception except)
  113 |             {
  114 |                 throw except;
  115 |             }
  116 |         }
  117 |     }
  118 |
  119 |     public override void Good()
  120 |     {
  121 |         Good1();
  122 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_06.cs,82,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_06.cs,"
   72 |             else
   73 |             {
   74 |                 /* running on non-Windows */
   75 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   76 |             }
   77 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   78 |             try
   79 |             {
   80 |                 Directory.CreateDirectory(newDirectory);
   81 |             }
>  82 |             catch (Exception except)
   83 |             {
   84 |                 throw except;
   85 |             }
   86 |         }
   87 |     }
   88 |
   89 |     /* Good2() reverses the bodies in the if statement */
   90 |     private void Good2()
   91 |     {
   92 |         if (PRIVATE_CONST_FIVE == 5)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_06.cs,111,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_06.cs,"
  101 |             else
  102 |             {
  103 |                 /* running on non-Windows */
  104 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  105 |             }
  106 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  107 |             try
  108 |             {
  109 |                 Directory.CreateDirectory(newDirectory);
  110 |             }
> 111 |             catch (Exception except)
  112 |             {
  113 |                 throw except;
  114 |             }
  115 |         }
  116 |     }
  117 |
  118 |     public override void Good()
  119 |     {
  120 |         Good1();
  121 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_07.cs,82,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_07.cs,"
   72 |             else
   73 |             {
   74 |                 /* running on non-Windows */
   75 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   76 |             }
   77 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   78 |             try
   79 |             {
   80 |                 Directory.CreateDirectory(newDirectory);
   81 |             }
>  82 |             catch (Exception except)
   83 |             {
   84 |                 throw except;
   85 |             }
   86 |         }
   87 |     }
   88 |
   89 |     /* Good2() reverses the bodies in the if statement */
   90 |     private void Good2()
   91 |     {
   92 |         if (privateFive == 5)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_07.cs,111,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_07.cs,"
  101 |             else
  102 |             {
  103 |                 /* running on non-Windows */
  104 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  105 |             }
  106 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  107 |             try
  108 |             {
  109 |                 Directory.CreateDirectory(newDirectory);
  110 |             }
> 111 |             catch (Exception except)
  112 |             {
  113 |                 throw except;
  114 |             }
  115 |         }
  116 |     }
  117 |
  118 |     public override void Good()
  119 |     {
  120 |         Good1();
  121 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_08.cs,90,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_08.cs,"
   80 |             else
   81 |             {
   82 |                 /* running on non-Windows */
   83 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   84 |             }
   85 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   86 |             try
   87 |             {
   88 |                 Directory.CreateDirectory(newDirectory);
   89 |             }
>  90 |             catch (Exception except)
   91 |             {
   92 |                 throw except;
   93 |             }
   94 |         }
   95 |     }
   96 |
   97 |     /* Good2() reverses the bodies in the if statement */
   98 |     private void Good2()
   99 |     {
  100 |         if (PrivateReturnsTrue())
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_08.cs,119,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_08.cs,"
  109 |             else
  110 |             {
  111 |                 /* running on non-Windows */
  112 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  113 |             }
  114 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  115 |             try
  116 |             {
  117 |                 Directory.CreateDirectory(newDirectory);
  118 |             }
> 119 |             catch (Exception except)
  120 |             {
  121 |                 throw except;
  122 |             }
  123 |         }
  124 |     }
  125 |
  126 |     public override void Good()
  127 |     {
  128 |         Good1();
  129 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_09.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_09.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* Good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (IO.STATIC_READONLY_TRUE)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_09.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_09.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_10.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_10.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (IO.staticTrue)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_10.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_10.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_11.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_11.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (IO.StaticReturnsTrue())
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_11.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_11.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,66,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,"
   56 |             else
   57 |             {
   58 |                 /* running on non-Windows */
   59 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   60 |             }
   61 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   62 |             try
   63 |             {
   64 |                 Directory.CreateDirectory(newDirectory);
   65 |             }
>  66 |             catch (Exception except)
   67 |             {
   68 |                 throw except;
   69 |             }
   70 |         }
   71 |     }
   72 | #endif //omitbad
   73 | #if (!OMITGOOD)
   74 |     /* Good1() changes the ""if"" so that both branches use the GoodSink */
   75 |     private void Good1()
   76 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,96,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,"
   86 |             else
   87 |             {
   88 |                 /* running on non-Windows */
   89 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   90 |             }
   91 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   92 |             try
   93 |             {
   94 |                 Directory.CreateDirectory(newDirectory);
   95 |             }
>  96 |             catch (Exception except)
   97 |             {
   98 |                 throw except;
   99 |             }
  100 |         }
  101 |         else
  102 |         {
  103 |             int p = (int)Environment.OSVersion.Platform;
  104 |             string newDirectory = null;
  105 |             if (p == (int)PlatformID.Win32NT || p == (int)PlatformID.Win32Windows || p == (int)PlatformID.Win32S || p ==
  106 |             {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,120,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_12.cs,"
  110 |             else
  111 |             {
  112 |                 /* running on non-Windows */
  113 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  114 |             }
  115 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  116 |             try
  117 |             {
  118 |                 Directory.CreateDirectory(newDirectory);
  119 |             }
> 120 |             catch (Exception except)
  121 |             {
  122 |                 throw except;
  123 |             }
  124 |         }
  125 |     }
  126 |
  127 |     public override void Good()
  128 |     {
  129 |         Good1();
  130 |     }
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_13.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_13.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* Good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (IO.STATIC_READONLY_FIVE == 5)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_13.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_13.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_14.cs,77,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_14.cs,"
   67 |             else
   68 |             {
   69 |                 /* running on non-Windows */
   70 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   71 |             }
   72 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   73 |             try
   74 |             {
   75 |                 Directory.CreateDirectory(newDirectory);
   76 |             }
>  77 |             catch (Exception except)
   78 |             {
   79 |                 throw except;
   80 |             }
   81 |         }
   82 |     }
   83 |
   84 |     /* Good2() reverses the bodies in the if statement */
   85 |     private void Good2()
   86 |     {
   87 |         if (IO.staticFive == 5)
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_14.cs,106,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_14.cs,"
   96 |             else
   97 |             {
   98 |                 /* running on non-Windows */
   99 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  100 |             }
  101 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  102 |             try
  103 |             {
  104 |                 Directory.CreateDirectory(newDirectory);
  105 |             }
> 106 |             catch (Exception except)
  107 |             {
  108 |                 throw except;
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     public override void Good()
  114 |     {
  115 |         Good1();
  116 |         Good2();
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_15.cs,83,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_15.cs,"
   73 |             else
   74 |             {
   75 |                 /* running on non-Windows */
   76 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
   77 |             }
   78 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
   79 |             try
   80 |             {
   81 |                 Directory.CreateDirectory(newDirectory);
   82 |             }
>  83 |             catch (Exception except)
   84 |             {
   85 |                 throw except;
   86 |             }
   87 |             break;
   88 |         }
   89 |     }
   90 |
   91 |     /* Good2() reverses the blocks in the switch  */
   92 |     private void Good2()
   93 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_15.cs,114,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_15.cs,"
  104 |             else
  105 |             {
  106 |                 /* running on non-Windows */
  107 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  108 |             }
  109 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  110 |             try
  111 |             {
  112 |                 Directory.CreateDirectory(newDirectory);
  113 |             }
> 114 |             catch (Exception except)
  115 |             {
  116 |                 throw except;
  117 |             }
  118 |             break;
  119 |         default:
  120 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
  121 |             IO.WriteLine(""Benign, fixed string"");
  122 |             break;
  123 |         }
  124 |     }
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_16.cs,73,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_16.cs,"
  63 |             else
  64 |             {
  65 |                 /* running on non-Windows */
  66 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  67 |             }
  68 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  69 |             try
  70 |             {
  71 |                 Directory.CreateDirectory(newDirectory);
  72 |             }
> 73 |             catch (Exception except)
  74 |             {
  75 |                 throw except;
  76 |             }
  77 |             break;
  78 |         }
  79 |     }
  80 |
  81 |     public override void Good()
  82 |     {
  83 |         Good1();
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_17.cs,72,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__CreateDirectory_17.cs,"
  62 |             else
  63 |             {
  64 |                 /* running on non-Windows */
  65 |                 newDirectory = ""/home/user/lvl_1/lvl_2/lvl_3/"";
  66 |             }
  67 |             /* FIX: report the CreateDirectory failure and throw a new Exception */
  68 |             try
  69 |             {
  70 |                 Directory.CreateDirectory(newDirectory);
  71 |             }
> 72 |             catch (Exception except)
  73 |             {
  74 |                 throw except;
  75 |             }
  76 |         }
  77 |     }
  78 |
  79 |     public override void Good()
  80 |     {
  81 |         Good1();
  82 |     }
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE390_Error_Without_Action/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE390_Error_Without_Action/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_01.cs,39,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_01.cs,"
  29 |             catchingNull = ""CWE395"";
  30 |         }
  31 |         try
  32 |         {
  33 |             /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
  34 |             if (catchingNull.Equals(""CWE395""))
  35 |             {
  36 |                 IO.WriteLine(""catchingNull is CWE395"");
  37 |             }
  38 |         }
> 39 |         catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
  40 |         {
  41 |             IO.WriteLine(""catchingNull is null"");
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     public override void Good()
  47 |     {
  48 |         Good1();
  49 |     }
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_02.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_02.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* Good1() changes true to false */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_03.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_03.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* Good1() changes 5==5 to 5!=5 */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_04.cs,47,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_04.cs,"
   37 |                 catchingNull = ""CWE395"";
   38 |             }
   39 |             try
   40 |             {
   41 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   42 |                 if (catchingNull.Equals(""CWE395""))
   43 |                 {
   44 |                     IO.WriteLine(""catchingNull is CWE395"");
   45 |                 }
   46 |             }
>  47 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   48 |             {
   49 |                 IO.WriteLine(""catchingNull is null"");
   50 |             }
   51 |         }
   52 |     }
   53 | #endif //omitbad
   54 | #if (!OMITGOOD)
   55 |     /* Good1() changes PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
   56 |     private void Good1()
   57 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_05.cs,47,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_05.cs,"
   37 |                 catchingNull = ""CWE395"";
   38 |             }
   39 |             try
   40 |             {
   41 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   42 |                 if (catchingNull.Equals(""CWE395""))
   43 |                 {
   44 |                     IO.WriteLine(""catchingNull is CWE395"");
   45 |                 }
   46 |             }
>  47 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   48 |             {
   49 |                 IO.WriteLine(""catchingNull is null"");
   50 |             }
   51 |         }
   52 |     }
   53 | #endif //omitbad
   54 | #if (!OMITGOOD)
   55 |     /* Good1() changes privateTrue to privateFalse */
   56 |     private void Good1()
   57 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_06.cs,46,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_06.cs,"
   36 |                 catchingNull = ""CWE395"";
   37 |             }
   38 |             try
   39 |             {
   40 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   41 |                 if (catchingNull.Equals(""CWE395""))
   42 |                 {
   43 |                     IO.WriteLine(""catchingNull is CWE395"");
   44 |                 }
   45 |             }
>  46 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   47 |             {
   48 |                 IO.WriteLine(""catchingNull is null"");
   49 |             }
   50 |         }
   51 |     }
   52 | #endif //omitbad
   53 | #if (!OMITGOOD)
   54 |     /* Good1() changes PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
   55 |     private void Good1()
   56 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_07.cs,46,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_07.cs,"
   36 |                 catchingNull = ""CWE395"";
   37 |             }
   38 |             try
   39 |             {
   40 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   41 |                 if (catchingNull.Equals(""CWE395""))
   42 |                 {
   43 |                     IO.WriteLine(""catchingNull is CWE395"");
   44 |                 }
   45 |             }
>  46 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   47 |             {
   48 |                 IO.WriteLine(""catchingNull is null"");
   49 |             }
   50 |         }
   51 |     }
   52 | #endif //omitbad
   53 | #if (!OMITGOOD)
   54 |     /* Good1() changes privateFive==5 to privateFive!=5 */
   55 |     private void Good1()
   56 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_08.cs,54,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_08.cs,"
   44 |                 catchingNull = ""CWE395"";
   45 |             }
   46 |             try
   47 |             {
   48 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   49 |                 if (catchingNull.Equals(""CWE395""))
   50 |                 {
   51 |                     IO.WriteLine(""catchingNull is CWE395"");
   52 |                 }
   53 |             }
>  54 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   55 |             {
   56 |                 IO.WriteLine(""catchingNull is null"");
   57 |             }
   58 |         }
   59 |     }
   60 | #endif //omitbad
   61 | #if (!OMITGOOD)
   62 |     /* Good1() changes PrivateReturnsTrue() to privateReturnsFalse() */
   63 |     private void Good1()
   64 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_09.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_09.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* Good1() changes IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_10.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_10.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* good1() changes IO.staticTrue to IO.staticFalse */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_11.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_11.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* good1() changes IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_12.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_12.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |         else
   47 |         {
   48 |             String catchingNull = null;
   49 |             if (new Random().Next(2) == 1)
   50 |             {
   51 |                 catchingNull = ""CWE395"";
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_13.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_13.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* Good1() changes IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_14.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_14.cs,"
   31 |                 catchingNull = ""CWE395"";
   32 |             }
   33 |             try
   34 |             {
   35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   36 |                 if (catchingNull.Equals(""CWE395""))
   37 |                 {
   38 |                     IO.WriteLine(""catchingNull is CWE395"");
   39 |                 }
   40 |             }
>  41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   42 |             {
   43 |                 IO.WriteLine(""catchingNull is null"");
   44 |             }
   45 |         }
   46 |     }
   47 | #endif //omitbad
   48 | #if (!OMITGOOD)
   49 |     /* Good1() changes IO.staticFive==5 to IO.staticFive!=5 */
   50 |     private void Good1()
   51 |     {
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_15.cs,42,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_15.cs,"
   32 |                 catchingNull = ""CWE395"";
   33 |             }
   34 |             try
   35 |             {
   36 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
   37 |                 if (catchingNull.Equals(""CWE395""))
   38 |                 {
   39 |                     IO.WriteLine(""catchingNull is CWE395"");
   40 |                 }
   41 |             }
>  42 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
   43 |             {
   44 |                 IO.WriteLine(""catchingNull is null"");
   45 |             }
   46 |             break;
   47 |         default:
   48 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
   49 |             IO.WriteLine(""Benign, fixed string"");
   50 |             break;
   51 |         }
   52 |     }
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_16.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_16.cs,"
  31 |                 catchingNull = ""CWE395"";
  32 |             }
  33 |             try
  34 |             {
  35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
  36 |                 if (catchingNull.Equals(""CWE395""))
  37 |                 {
  38 |                     IO.WriteLine(""catchingNull is CWE395"");
  39 |                 }
  40 |             }
> 41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
  42 |             {
  43 |                 IO.WriteLine(""catchingNull is null"");
  44 |             }
  45 |             break;
  46 |         }
  47 |     }
  48 | #endif //omitbad
  49 | #if (!OMITGOOD)
  50 |     /* Good1() change the conditions on the while statements */
  51 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_17.cs,41,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/CWE395_Catch_NullPointerException__basic_17.cs,"
  31 |                 catchingNull = ""CWE395"";
  32 |             }
  33 |             try
  34 |             {
  35 |                 /* INCIDENTAL: Possible Null Pointer Dereference (CWE476 / CWE690) */
  36 |                 if (catchingNull.Equals(""CWE395""))
  37 |                 {
  38 |                     IO.WriteLine(""catchingNull is CWE395"");
  39 |                 }
  40 |             }
> 41 |             catch (NullReferenceException exceptNullPointer) /* FLAW: Use of catch block to detect null dereferences */
  42 |             {
  43 |                 IO.WriteLine(""catchingNull is null"");
  44 |             }
  45 |         }
  46 |     }
  47 | #endif //omitbad
  48 | #if (!OMITGOOD)
  49 |     /* Good1() use the GoodSinkBody in the for statement */
  50 |     private void Good1()
  51 |     {
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE395_Catch_NullPointerException/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE395_Catch_NullPointerException/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_01.cs,30,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_01.cs,"
  20 | {
  21 | class CWE396_Catch_Generic_Exception__Exception_01 : AbstractTestCase
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         try
  27 |         {
  28 |             int.Parse(""Test""); /* Will throw FormatException */
  29 |         }
> 30 |         catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  31 |         {
  32 |             IO.WriteLine(""Caught Exception"");
  33 |             throw exception; /* Rethrow */
  34 |         }
  35 |     }
  36 | #endif //omitbad
  37 | #if (!OMITGOOD)
  38 |     public override void Good()
  39 |     {
  40 |         Good1();
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_02.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_02.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (true)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() changes true to false */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_03.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_03.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (5 == 5)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() changes 5==5 to 5!=5 */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_04.cs,38,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_04.cs,"
  28 |     private const bool PRIVATE_CONST_FALSE = false;
  29 | #if (!OMITBAD)
  30 |     public override void Bad()
  31 |     {
  32 |         if (PRIVATE_CONST_TRUE)
  33 |         {
  34 |             try
  35 |             {
  36 |                 int.Parse(""Test""); /* Will throw FormatException */
  37 |             }
> 38 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  39 |             {
  40 |                 IO.WriteLine(""Caught Exception"");
  41 |                 throw exception; /* Rethrow */
  42 |             }
  43 |         }
  44 |     }
  45 | #endif //omitbad
  46 | #if (!OMITGOOD)
  47 |     /* Good1() changes PRIVATE_CONST_TRUE to PRIVATE_CONST_FALSE */
  48 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_05.cs,38,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_05.cs,"
  28 |     private bool privateFalse = false;
  29 | #if (!OMITBAD)
  30 |     public override void Bad()
  31 |     {
  32 |         if (privateTrue)
  33 |         {
  34 |             try
  35 |             {
  36 |                 int.Parse(""Test""); /* Will throw FormatException */
  37 |             }
> 38 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  39 |             {
  40 |                 IO.WriteLine(""Caught Exception"");
  41 |                 throw exception; /* Rethrow */
  42 |             }
  43 |         }
  44 |     }
  45 | #endif //omitbad
  46 | #if (!OMITGOOD)
  47 |     /* Good1() changes privateTrue to privateFalse */
  48 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_06.cs,37,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_06.cs,"
  27 |     private const int PRIVATE_CONST_FIVE = 5;
  28 | #if (!OMITBAD)
  29 |     public override void Bad()
  30 |     {
  31 |         if (PRIVATE_CONST_FIVE == 5)
  32 |         {
  33 |             try
  34 |             {
  35 |                 int.Parse(""Test""); /* Will throw FormatException */
  36 |             }
> 37 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  38 |             {
  39 |                 IO.WriteLine(""Caught Exception"");
  40 |                 throw exception; /* Rethrow */
  41 |             }
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* Good1() changes PRIVATE_CONST_FIVE==5 to PRIVATE_CONST_FIVE!=5 */
  47 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_07.cs,37,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_07.cs,"
  27 |     private int privateFive = 5;
  28 | #if (!OMITBAD)
  29 |     public override void Bad()
  30 |     {
  31 |         if (privateFive == 5)
  32 |         {
  33 |             try
  34 |             {
  35 |                 int.Parse(""Test""); /* Will throw FormatException */
  36 |             }
> 37 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  38 |             {
  39 |                 IO.WriteLine(""Caught Exception"");
  40 |                 throw exception; /* Rethrow */
  41 |             }
  42 |         }
  43 |     }
  44 | #endif //omitbad
  45 | #if (!OMITGOOD)
  46 |     /* Good1() changes privateFive==5 to privateFive!=5 */
  47 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_08.cs,45,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_08.cs,"
   35 |     }
   36 | #if (!OMITBAD)
   37 |     public override void Bad()
   38 |     {
   39 |         if (PrivateReturnsTrue())
   40 |         {
   41 |             try
   42 |             {
   43 |                 int.Parse(""Test""); /* Will throw FormatException */
   44 |             }
>  45 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
   46 |             {
   47 |                 IO.WriteLine(""Caught Exception"");
   48 |                 throw exception; /* Rethrow */
   49 |             }
   50 |         }
   51 |     }
   52 | #endif //omitbad
   53 | #if (!OMITGOOD)
   54 |     /* Good1() changes PrivateReturnsTrue() to privateReturnsFalse() */
   55 |     private void Good1()
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_09.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_09.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.STATIC_READONLY_TRUE)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() changes IO.STATIC_READONLY_TRUE to IO.STATIC_READONLY_FALSE */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_10.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_10.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.staticTrue)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* good1() changes IO.staticTrue to IO.staticFalse */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_11.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_11.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.StaticReturnsTrue())
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* good1() changes IO.StaticReturnsTrue() to IO.StaticReturnsFalse() */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_12.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_12.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.StaticReturnsTrueOrFalse())
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |         else
  39 |         {
  40 |             try
  41 |             {
  42 |                 int.Parse(""Test""); /* Will throw FormatException */
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_13.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_13.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.STATIC_READONLY_FIVE == 5)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() changes IO.STATIC_READONLY_FIVE==5 to IO.STATIC_READONLY_FIVE!=5 */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_14.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_14.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         if (IO.staticFive == 5)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() changes IO.staticFive==5 to IO.staticFive!=5 */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_15.cs,33,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_15.cs,"
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         switch (7)
   27 |         {
   28 |         case 7:
   29 |             try
   30 |             {
   31 |                 int.Parse(""Test""); /* Will throw FormatException */
   32 |             }
>  33 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
   34 |             {
   35 |                 IO.WriteLine(""Caught Exception"");
   36 |                 throw exception; /* Rethrow */
   37 |             }
   38 |             break;
   39 |         default:
   40 |             /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
   41 |             IO.WriteLine(""Benign, fixed string"");
   42 |             break;
   43 |         }
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_16.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_16.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         while(true)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |             break;
  38 |         }
  39 |     }
  40 | #endif //omitbad
  41 | #if (!OMITGOOD)
  42 |     /* Good1() change the conditions on the while statements */
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_17.cs,32,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/CWE396_Catch_Generic_Exception__Exception_17.cs,"
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         for(int j = 0; j < 1; j++)
  27 |         {
  28 |             try
  29 |             {
  30 |                 int.Parse(""Test""); /* Will throw FormatException */
  31 |             }
> 32 |             catch (Exception exception) /* FLAW: Catch Exception, which is overly generic */
  33 |             {
  34 |                 IO.WriteLine(""Caught Exception"");
  35 |                 throw exception; /* Rethrow */
  36 |             }
  37 |         }
  38 |     }
  39 | #endif //omitbad
  40 | #if (!OMITGOOD)
  41 |     /* Good1() use the GoodSinkBody in the for statement */
  42 |     private void Good1()
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE396_Catch_Generic_Exception/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE396_Catch_Generic_Exception/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE397_Throw_Generic_Exception/CWE397_Throw_Generic_Exception__throw_Exception_01.cs,24,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE397_Throw_Generic_Exception/CWE397_Throw_Generic_Exception__throw_Exception_01.cs,"
  14 | #if (!OMITBAD)
  15 |         public override void Bad()
  16 |         {
  17 |             try
  18 |             {
  19 |                 using (StreamReader streamFileInput = new StreamReader(""filename.txt""))
  20 |     {
  21 |      IO.WriteLine(""File 'filename.txt' exists"");
  22 |     }
  23 |             }
> 24 |             catch (Exception exception)
  25 |             {
  26 |                 throw exception; /* FLAW: Throwing a very generic exception */
  27 |             }
  28 |         }
  29 | #endif // OMITBAD
  30 |
  31 | #if (!OMITGOOD)
  32 |         private void Good1()
  33 |         {
  34 |             try
     ^ Col 0
"
F060,lines,NIST/src/testcases/CWE397_Throw_Generic_Exception/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE397_Throw_Generic_Exception/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F060,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/Program.cs,50,396,skims,F060. Insecure exceptions,Insecure CSharp exception in src/testcases/CWE478_Missing_Default_Case_in_Switch/Program.cs,"
   40 |       /* Console.WriteLine(""classNameWithPackage = "" + classNameWithPackage); */
   41 |
   42 |       Type myClass = Type.GetType(className);
   43 |       object myObject = Activator.CreateInstance(myClass);
   44 |       myClass.InvokeMember(""runTest"",
   45 |        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public,
   46 |        null,
   47 |        myObject,
   48 |        new object[] { className });
   49 |
>  50 |      } catch (Exception ex) {
   51 |
   52 |       Console.WriteLine(""Could not run test for class "" + className);
   53 |       Console.WriteLine(ex.StackTrace);
   54 |
   55 |      }
   56 |
   57 |      Console.WriteLine(""""); /* leave a blank line between classes */
   58 |
   59 |     }
   60 |
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_01.cs,28,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_01.cs,"
  18 |
  19 | namespace testcases.CWE478_Missing_Default_Case_in_Switch
  20 | {
  21 | class CWE478_Missing_Default_Case_in_Switch__basic_01 : AbstractTestCase
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         string stringIntValue = """";
  27 |         int x = (new Random()).Next(3);
> 28 |         switch (x)
  29 |         {
  30 |         case 0:
  31 |             stringIntValue = ""0"";
  32 |             break;
  33 |         case 1:
  34 |             stringIntValue = ""1"";
  35 |             break;
  36 |             /* FLAW: x could be 2, and there is no 'default' case for that */
  37 |         }
  38 |         IO.WriteLine(stringIntValue);
     ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_02.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_02 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (true)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_03.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_03.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_03 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (5 == 5)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_04.cs,36,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_04.cs,"
   26 |      */
   27 |     private const bool PRIVATE_CONST_TRUE = true;
   28 |     private const bool PRIVATE_CONST_FALSE = false;
   29 | #if (!OMITBAD)
   30 |     public override void Bad()
   31 |     {
   32 |         if (PRIVATE_CONST_TRUE)
   33 |         {
   34 |             string stringIntValue = """";
   35 |             int x = (new Random()).Next(3);
>  36 |             switch (x)
   37 |             {
   38 |             case 0:
   39 |                 stringIntValue = ""0"";
   40 |                 break;
   41 |             case 1:
   42 |                 stringIntValue = ""1"";
   43 |                 break;
   44 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   45 |             }
   46 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_05.cs,36,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_05.cs,"
   26 |      */
   27 |     private bool privateTrue = true;
   28 |     private bool privateFalse = false;
   29 | #if (!OMITBAD)
   30 |     public override void Bad()
   31 |     {
   32 |         if (privateTrue)
   33 |         {
   34 |             string stringIntValue = """";
   35 |             int x = (new Random()).Next(3);
>  36 |             switch (x)
   37 |             {
   38 |             case 0:
   39 |                 stringIntValue = ""0"";
   40 |                 break;
   41 |             case 1:
   42 |                 stringIntValue = ""1"";
   43 |                 break;
   44 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   45 |             }
   46 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_06.cs,35,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_06.cs,"
   25 |      * value.
   26 |      */
   27 |     private const int PRIVATE_CONST_FIVE = 5;
   28 | #if (!OMITBAD)
   29 |     public override void Bad()
   30 |     {
   31 |         if (PRIVATE_CONST_FIVE == 5)
   32 |         {
   33 |             string stringIntValue = """";
   34 |             int x = (new Random()).Next(3);
>  35 |             switch (x)
   36 |             {
   37 |             case 0:
   38 |                 stringIntValue = ""0"";
   39 |                 break;
   40 |             case 1:
   41 |                 stringIntValue = ""1"";
   42 |                 break;
   43 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   44 |             }
   45 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_07.cs,35,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_07.cs,"
   25 |      * this will always give its initialized value.
   26 |      */
   27 |     private int privateFive = 5;
   28 | #if (!OMITBAD)
   29 |     public override void Bad()
   30 |     {
   31 |         if (privateFive == 5)
   32 |         {
   33 |             string stringIntValue = """";
   34 |             int x = (new Random()).Next(3);
>  35 |             switch (x)
   36 |             {
   37 |             case 0:
   38 |                 stringIntValue = ""0"";
   39 |                 break;
   40 |             case 1:
   41 |                 stringIntValue = ""1"";
   42 |                 break;
   43 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   44 |             }
   45 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_08.cs,43,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_08.cs,"
   33 |     {
   34 |         return false;
   35 |     }
   36 | #if (!OMITBAD)
   37 |     public override void Bad()
   38 |     {
   39 |         if (PrivateReturnsTrue())
   40 |         {
   41 |             string stringIntValue = """";
   42 |             int x = (new Random()).Next(3);
>  43 |             switch (x)
   44 |             {
   45 |             case 0:
   46 |                 stringIntValue = ""0"";
   47 |                 break;
   48 |             case 1:
   49 |                 stringIntValue = ""1"";
   50 |                 break;
   51 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   52 |             }
   53 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_09.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_09.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_09 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.STATIC_READONLY_TRUE)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_10.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_10.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_10 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.staticTrue)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_11.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_11.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_11 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.StaticReturnsTrue())
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_12.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_12 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.StaticReturnsTrueOrFalse())
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_13.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_13.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_13 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.STATIC_READONLY_FIVE == 5)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_14.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_14.cs,"
   20 | {
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_14 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         if (IO.staticFive == 5)
   27 |         {
   28 |             string stringIntValue = """";
   29 |             int x = (new Random()).Next(3);
>  30 |             switch (x)
   31 |             {
   32 |             case 0:
   33 |                 stringIntValue = ""0"";
   34 |                 break;
   35 |             case 1:
   36 |                 stringIntValue = ""1"";
   37 |                 break;
   38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   39 |             }
   40 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_15.cs,31,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_15.cs,"
   21 | class CWE478_Missing_Default_Case_in_Switch__basic_15 : AbstractTestCase
   22 | {
   23 | #if (!OMITBAD)
   24 |     public override void Bad()
   25 |     {
   26 |         switch (7)
   27 |         {
   28 |         case 7:
   29 |             string stringIntValue = """";
   30 |             int x = (new Random()).Next(3);
>  31 |             switch (x)
   32 |             {
   33 |             case 0:
   34 |                 stringIntValue = ""0"";
   35 |                 break;
   36 |             case 1:
   37 |                 stringIntValue = ""1"";
   38 |                 break;
   39 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
   40 |             }
   41 |             IO.WriteLine(stringIntValue);
      ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.cs,"
  20 | {
  21 | class CWE478_Missing_Default_Case_in_Switch__basic_16 : AbstractTestCase
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         while(true)
  27 |         {
  28 |             string stringIntValue = """";
  29 |             int x = (new Random()).Next(3);
> 30 |             switch (x)
  31 |             {
  32 |             case 0:
  33 |                 stringIntValue = ""0"";
  34 |                 break;
  35 |             case 1:
  36 |                 stringIntValue = ""1"";
  37 |                 break;
  38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
  39 |             }
  40 |             IO.WriteLine(stringIntValue);
     ^ Col 0
"
F073,lines,NIST/src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_17.cs,30,478,skims,F073. Conditional statement without a default option,Switch without default in src/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_17.cs,"
  20 | {
  21 | class CWE478_Missing_Default_Case_in_Switch__basic_17 : AbstractTestCase
  22 | {
  23 | #if (!OMITBAD)
  24 |     public override void Bad()
  25 |     {
  26 |         for(int j = 0; j < 1; j++)
  27 |         {
  28 |             string stringIntValue = """";
  29 |             int x = (new Random()).Next(3);
> 30 |             switch (x)
  31 |             {
  32 |             case 0:
  33 |                 stringIntValue = ""0"";
  34 |                 break;
  35 |             case 1:
  36 |                 stringIntValue = ""1"";
  37 |                 break;
  38 |                 /* FLAW: x could be 2, and there is no 'default' case for that */
  39 |             }
  40 |             IO.WriteLine(stringIntValue);
     ^ Col 0
"
