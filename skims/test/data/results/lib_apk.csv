finding,kind,what,where,cwe,stream,title,description,snippet
F048,inputs,examples/android/Invalid/Invalid.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/Invalid/Invalid.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$100', 'access$200', 'access$300', 'acce
    | ss$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addAnimation', 'addBack
    | StackState', 'addChild', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addMove
    | ment', 'addNewItem', 'addNextIntent', 'addOnBackStackChangedListener', 'addOp', 'addParentStack', 'addStream', 'addToBac
    | kStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackIndex', 'append', 'appendRecord', 'appendSelectio
    | nArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachFragment', 'await', 'beginFakeDrag', 'beginTransa
    | ction', 'binarySearch', 'bindView', 'buildShortClassTag', 'bumpBackStackNesting', 'calculatePageOffsets', 'call', 'callO
    | nLoadFinished', 'canScroll', 'canScrollHorizontally', 'canScrollVertically', 'cancel', 'cancelLoad', 'changeCursor', 'ch
    | angeCursorAndColumns', 'charAt', 'checkLayoutParams', 'checkStateLoss', 'clear', 'clearAnimation', 'clearThreadStatsTag'
    ^ Col 0
"
F048,inputs,examples/android/TC/bin/TC-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/TC/bin/TC-debug.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'T1', 'TCE_t1', 'TCE_t2', 'TCE_t3', 'append', 'equal', 'equals', 'onCreate', 'print', 'println', 'setContentV
    | iew', 'toString']
    ^ Col 0
"
F048,inputs,examples/android/TCDiff/bin/TCDiff-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/TCDiff/bin/TCDiff-debug.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'T1', 'TCE_t1', 'TCE_t2', 'TCE_t3', 'append', 'equal', 'equals', 'onCreate', 'print', 'println', 'setContentV
    | iew', 'toString']
    ^ Col 0
"
F048,inputs,examples/android/TestsAndroguard/bin/TestActivity.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/TestsAndroguard/bin/TestActivity.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
    | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
    | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
    | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
    | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
    | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
    | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
    | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
    | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
    ^ Col 0
"
F048,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
    | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
    | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
    | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
    | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
    | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
    | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
    | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
    | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
    ^ Col 0
"
F048,inputs,examples/android/abcore/app-prod-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/android/abcore/app-prod-debug.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
    | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
    | ccess$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$1002', 'access$101', 'access$102', 'access$
    | 106', 'access$1100', 'access$1102', 'access$1200', 'access$1302', 'access$1400', 'access$1500', 'access$1600', 'access$2
    | 00', 'access$202', 'access$300', 'access$301', 'access$302', 'access$400', 'access$402', 'access$408', 'access$500', 'ac
    | cess$502', 'access$600', 'access$602', 'access$700', 'access$702', 'access$708', 'access$800', 'access$802', 'access$900
    | ', 'account', 'accumField', 'acos', 'acquire', 'acquireTempRect', 'acquireTile', 'actionFormatChanged', 'add', 'addAcces
    | sibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'addAddition', '
    | addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation', 'addArchiveEntry', 'addAsFirstExtraField', 'addBackRefere
    ^ Col 0
"
F048,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/axml/AndroidManifest_ShortName.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/dalvik/test/bin/Test-debug-unaligned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/dalvik/test/bin/Test-debug-unaligned.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'append', 'go', 'onCreate', 'println', 'setContentView', 'test1', 'test_base', 'toString']
    ^ Col 0
"
F048,inputs,examples/dalvik/test/bin/Test-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/dalvik/test/bin/Test-debug.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'append', 'go', 'onCreate', 'println', 'setContentView', 'test1', 'test_base', 'toString']
    ^ Col 0
"
F048,inputs,examples/signing/TestActivity_signed_both.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/TestActivity_signed_both.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
    | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
    | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
    | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
    | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
    | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
    | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
    | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
    | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
    ^ Col 0
"
F048,inputs,examples/signing/apksig/debuggable-boolean.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/debuggable-boolean.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/debuggable-resource.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/debuggable-resource.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/empty-unsigned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/empty-unsigned.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-in.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-in.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-rsa-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-in.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v3-lineage-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v3-out.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/mismatched-compression-method.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/mismatched-compression-method.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/original.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/original.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/targetSandboxVersion-2.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/two-signers-second-signer-v2-broken.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/two-signers-second-signer-v2-broken.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/two-signers.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/unsigned-targetSandboxVersion-2.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-empty.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-max-sized-eocd-comment.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-max-sized-eocd-comment.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-targetSandboxVersion-2.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-two-signers.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-cr-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-cr-in-entry-name.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-lf-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-lf-in-entry-name.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-nul-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-nul-in-entry-name.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-goo
    | d.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk'
    | )[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-go
    | od.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.
    | apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk')[
    | 2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk')[2
    | ]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk
    | ')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-empty.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-max-sized-eocd-comment.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-missing-classes.dex.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-no-certs-in-sig.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-targetSandboxVersion-2.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-targetSandboxVersion-3.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-unknown-additional-attr.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-stripped.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2v3-signed-v3-block-stripped.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2v3-unknown-additional-attr.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-empty.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-no-certs-in-sig.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-no-supported-sig-algs.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-unknown-additional-attr.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/v3-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-stripped.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/signing/apksig/weird-compression-method.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/signing/apksig/weird-compression-method.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'finish', 'onCreate']
    ^ Col 0
"
F048,inputs,examples/tests/a2dp.Vol_137.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/a2dp.Vol_137.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'DoConnected', 'DoDisconnected', 'GetColumns', 'GetName', 'HSLToColor', 'LABToColor', 'LABToXYZ',
    |  'LoadPrefs', 'Locationbtn', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'Save', 'TextReader', 'XYZToColor', 'XYZToLAB', 'abando
    | n', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'accept', 'acceptMatch', 'access$000', 'access$002', 'access$
    | 100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$13
    | 02', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'access$1600', 'access$1602', 'access$1700', 'access$18
    | 00', 'access$1900', 'access$200', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', '
    | access$500', 'access$600', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'accumField', 'acquire'
    | , 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActions', 'addActionsToBuilder', 'addAll', 'addAnimatio
    | n', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild', 'addChildrenForAccessibilit
    ^ Col 0
"
F048,inputs,examples/tests/com.android.example.text.styling.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.android.example.text.styling.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
    | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'accept', 'acceptMatch', 'access$000', 'ac
    | cess$001', 'access$002', 'access$100', 'access$101', 'access$102', 'access$200', 'access$202', 'access$300', 'access$301
    | ', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'acce
    | ss$702', 'access$800', 'access$802', 'accumField', 'acos', 'acquire', 'acquireSolverVariable', 'actionFormatChanged', 'a
    | dd', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'a
    | ddAll', 'addAnchors', 'addAnimation', 'addBackStackState', 'addCategory', 'addCentering', 'addChain', 'addChild', 'addCh
    | ildrenForAccessibility', 'addChildrenForExpandedActionView', 'addChildrenToSolver', 'addCircle', 'addClientEquation', 'a
    | ddColorStateListToCache', 'addCommand', 'addCompatExtras', 'addConstraint', 'addContentView', 'addCustomViewsWithGravity
    ^ Col 0
"
F048,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.tvleanback.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
    | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abortUnlessCommitted', 'abs', 'absoluteValue', '
    | absorbGlows', 'accept', 'acceptMatch', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$10
    | 02', 'access$101', 'access$102', 'access$108', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$1302'
    | , 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000',
    |  'access$202', 'access$2100', 'access$2200', 'access$2300', 'access$2400', 'access$2500', 'access$2600', 'access$2700',
    | 'access$2800', 'access$2900', 'access$300', 'access$301', 'access$302', 'access$400', 'access$402', 'access$500', 'acces
    | s$502', 'access$600', 'access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902',
    | 'accumField', 'acos', 'acquire', 'acquireSession', 'acquireTile', 'actionFormatChanged', 'adapterPosition', 'add', 'addA
    ^ Col 0
"
F048,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.wearable.wear.weardrawers.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
    | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
    | ccess$000', 'access$002', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'acces
    | s$1200', 'access$1202', 'access$1300', 'access$1302', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'acces
    | s$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000', 'access$201', 'access$202', 'access$2
    | 100', 'access$2200', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', '
    | access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', '
    | acquire', 'acquireTile', 'activateComplications', 'adapterChanged', 'add', 'addAccessibilityStateChangeListener', 'addAc
    | tion', 'addActions', 'addAdapter', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation',
    ^ Col 0
"
F048,inputs,examples/tests/com.politedroid_4.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.politedroid_4.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'a', 'add', 'addPreferencesFromResource', 'append', 'appendId', 'asList', 'b', 'build', 'buildUpo
    | n', 'callChangeListener', 'cancel', 'close', 'commit', 'currentTimeMillis', 'edit', 'equals', 'finalize', 'forName', 'ge
    | t', 'getApplicationContext', 'getBoolean', 'getBooleanExtra', 'getBroadcast', 'getColumnIndex', 'getContentResolver', 'g
    | etContext', 'getCount', 'getDefaultSharedPreferences', 'getEntries', 'getEntryValues', 'getField', 'getInstance', 'getIn
    | t', 'getLong', 'getPreferenceScreen', 'getResources', 'getRingerMode', 'getSharedPreferences', 'getString', 'getStringAr
    | ray', 'getSystemService', 'getTimeInMillis', 'getValue', 'hasNext', 'iterator', 'length', 'longValue', 'min', 'moveToNex
    | t', 'next', 'onClick', 'onCreate', 'onDialogClosed', 'onPause', 'onPrepareDialogBuilder', 'onReceive', 'onResume', 'onSh
    | aredPreferenceChanged', 'parse', 'parseInt', 'putBoolean', 'putExtra', 'putInt', 'query', 'registerOnSharedPreferenceCha
    | ngeListener', 'sendBroadcast', 'set', 'setEntries', 'setEntryValues', 'setInexactRepeating', 'setMultiChoiceItems', 'set
    ^ Col 0
"
F048,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.teleca.jamendo_35.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'access$000', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$12
    | 00', 'access$1300', 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$20
    | 0', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'ac
    | cess$600', 'access$602', 'access$608', 'access$700', 'access$702', 'access$800', 'access$900', 'acquire', 'add', 'addAll
    | ', 'addOnClick', 'addOnGesturePerformedListener', 'addPlaylistEntry', 'addPreferencesFromResource', 'addRadioToRecent',
    | 'addSection', 'addTab', 'addToDownloadQueue', 'addToFavorites', 'addToLibrary', 'addToPlaylist', 'addTrack', 'addTracks'
    | , 'albumClickHandler', 'albumSearch', 'animateClose', 'animateToggle', 'append', 'artistClickHandler', 'asList', 'build'
    | , 'calculateOrder', 'cancel', 'cleanUp', 'clear', 'clone', 'close', 'commit', 'compare', 'connect', 'construct', 'contai
    | ns', 'containsKey', 'convertStreamToString', 'create', 'createBitmap', 'createChooser', 'createFromResource', 'createPla
    ^ Col 0
"
F048,inputs,examples/tests/com.test.intent_filter.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/com.test.intent_filter.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
    | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
    | ccess$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'access$102', 'access$1100', 'access$
    | 1200', 'access$1300', 'access$1400', 'access$200', 'access$201', 'access$202', 'access$300', 'access$302', 'access$400',
    |  'access$500', 'access$502', 'access$600', 'access$700', 'access$800', 'access$900', 'accumField', 'acos', 'acquire', 'a
    | cquireSolverVariable', 'acquireTempRect', 'acquireTile', 'actionBarOnMenuKeyEventPre28', 'actionFormatChanged', 'activeS
    | tateChanged', 'activitySuperDispatchKeyEventPre28', 'actualDraw', 'actualIsOpaque', 'add', 'addAccessibilityStateChangeL
    | istener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnch
    | ors', 'addAnimatingView', 'addAnimation', 'addArc', 'addBackStackState', 'addCallback', 'addCategory', 'addCenterPoint',
    ^ Col 0
"
F048,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/duplicate.permisssions_9999999.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'access$100', 'addObserver', 'append', 'close', 'createDir', 'd', 'doInBackground', 'e', 'entries
    | ', 'execute', 'exists', 'getData', 'getFilesDir', 'getInputStream', 'getIntent', 'getName', 'getParentFile', 'getPath',
    | 'hasMoreElements', 'i', 'isDirectory', 'lastIndexOf', 'mkdirs', 'nextElement', 'notifyObservers', 'onCreate', 'onPostExe
    | cute', 'parseBoolean', 'read', 'setChanged', 'stripExtension', 'substring', 'toString', 'unzip', 'unzipEntry', 'unzipWeb
    | File', 'update', 'v', 'valueOf', 'write']
    ^ Col 0
"
F048,inputs,examples/tests/hello-world.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/hello-world.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'NodesToString', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'XYZ
    | ToColor', 'XYZToLAB', 'abandon', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'absorbGlows', 'accept', 'accept
    | Match', 'acceptNestedScroll', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'acce
    | ss$102', 'access$1102', 'access$1200', 'access$1300', 'access$1400', 'access$200', 'access$202', 'access$300', 'access$3
    | 02', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'access$702', 'ac
    | cess$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', 'acquire', 'acquireTempRect', 'acquireTile',
    | 'actionFormatChanged', 'activateNewButton', 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHide
    | Offset', 'addActions', 'addActionsToBuilder', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation', 'addBackSt
    | ackState', 'addBigPictureStyle', 'addBigStyleToBuilderJellybean', 'addBigStyleToBuilderLollipop', 'addBigTextStyle', 'ad
    ^ Col 0
"
F048,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/lineageos_nexus5_framework-res.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | []
    ^ Col 0
"
F048,inputs,examples/tests/multidex/multidex.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/multidex/multidex.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'othermethod', 'println', 'somemethod']
    ^ Col 0
"
F048,inputs,examples/tests/partialsignature.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/partialsignature.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<clinit>', '<init>', 'DoConnected', 'DoDisconnected', 'GetColumns', 'GetName', 'HSLToColor', 'LABToColor', 'LABToXYZ',
    |  'LoadPrefs', 'Locationbtn', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'Save', 'TextReader', 'XYZToColor', 'XYZToLAB', 'abando
    | n', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'accept', 'acceptMatch', 'access$000', 'access$002', 'access$
    | 100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$13
    | 02', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'access$1600', 'access$1602', 'access$1700', 'access$18
    | 00', 'access$1900', 'access$200', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', '
    | access$500', 'access$600', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'accumField', 'acquire'
    | , 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActions', 'addActionsToBuilder', 'addAll', 'addAnimatio
    | n', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild', 'addChildrenForAccessibilit
    ^ Col 0
"
F048,inputs,examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b57-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",F048. Lack of root detection,Missing rooted device detection,"
  1 | $ python3.8
  2 | >>> from androguard.misc import AnalyzeAPK  # 3.3.5
  3 | >>> dex = AnalyzeAPK('examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b5
    | 7-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk')[2]
> 4 | >>> sorted(set(method.name for method in dex.get_methods()))
  5 | # No method checks root detection
  6 | ['<init>', 'access$100', 'addObserver', 'append', 'close', 'createDir', 'd', 'doInBackground', 'e', 'entries', 'execute'
    | , 'exists', 'getData', 'getFilesDir', 'getInputStream', 'getIntent', 'getName', 'getParentFile', 'getPath', 'hasMoreElem
    | ents', 'i', 'isDirectory', 'lastIndexOf', 'mkdirs', 'nextElement', 'notifyObservers', 'onCreate', 'onPostExecute', 'read
    | ', 'setChanged', 'stripExtension', 'substring', 'toString', 'unzip', 'unzipEntry', 'unzipWebFile', 'update', 'v', 'value
    | Of', 'write']
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/axml/AndroidManifest_ShortName.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/empty-unsigned.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/empty-unsigned.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-in.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-in.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-in.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-lineage-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-out.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/unsigned-targetSandboxVersion-2.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-empty.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-empty.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-max-sized-eocd-comment.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-missing-classes.dex.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-no-certs-in-sig.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-2.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-3.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-additional-attr.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2v3-signed-v3-block-stripped.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v2v3-unknown-additional-attr.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-empty.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-empty.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-no-certs-in-sig.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-no-supported-sig-algs.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-additional-attr.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/signing/apksig/v3-stripped.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/signing/apksig/v3-stripped.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/tests/com.test.intent_filter.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/tests/com.test.intent_filter.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
F103_APK_UNSIGNED,inputs,examples/tests/multidex/multidex.apk (namespace),Not signed,325,"home,apk,bytecodes",F103. Insufficient data authenticity validation - APK signing,Not signed,"
  1 | $ python3.8
  2 | >>> from androguard.core.bytecodes.apk import APK  # 3.3.5
  3 | >>> apk = APK('examples/tests/multidex/multidex.apk')
> 4 | >>> apk.get_signature_names()
  5 | []  # Empty list
    ^ Col 0
"
