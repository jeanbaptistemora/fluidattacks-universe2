finding,kind,what,where,cwe,stream,title,description,snippet,method
F046,inputs,examples/android/abcore/app-prod-debug.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.android.example.text.styling.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.test.intent_filter.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/hello-world.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/a2dp.Vol_137.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   7 |
   8 |     static RestrictTo$Scope()
   9 |     {
  10 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 0);
  11 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 1);
  12 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 2);
  13 |         android.support.annotation.RestrictTo$Scope[] v0_3 = new android.support.annotation.RestrictTo$Scope[3];
  14 |         v0_3[0] = android.support.annotation.RestrictTo$Scope.GROUP_ID;
  15 |         v0_3[1] = android.support.annotation.RestrictTo$Scope.TESTS;
  16 |         v0_3[2] = android.support.annotation.RestrictTo$Scope.SUBCLASSES;
  17 |         android.support.annotation.RestrictTo$Scope.$VALUES = v0_3;
  18 |         return;
  19 |     }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/partialsignature.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   7 |
   8 |     static RestrictTo$Scope()
   9 |     {
  10 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 0);
  11 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 1);
  12 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 2);
  13 |         android.support.annotation.RestrictTo$Scope[] v0_3 = new android.support.annotation.RestrictTo$Scope[3];
  14 |         v0_3[0] = android.support.annotation.RestrictTo$Scope.GROUP_ID;
  15 |         v0_3[1] = android.support.annotation.RestrictTo$Scope.TESTS;
  16 |         v0_3[2] = android.support.annotation.RestrictTo$Scope.SUBCLASSES;
  17 |         android.support.annotation.RestrictTo$Scope.$VALUES = v0_3;
  18 |         return;
  19 |     }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),android/support/compat/R$attr is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/compat/R$attr is not obfuscated,"
>  1 | package android.support.compat;
   2 | public final class R$attr {
   3 |     public static final int font = 2130968643;
   4 |     public static final int fontProviderAuthority = 2130968644;
   5 |     public static final int fontProviderCerts = 2130968645;
   6 |     public static final int fontProviderFetchStrategy = 2130968646;
   7 |     public static final int fontProviderFetchTimeout = 2130968647;
   8 |     public static final int fontProviderPackage = 2130968648;
   9 |     public static final int fontProviderQuery = 2130968649;
  10 |     public static final int fontStyle = 2130968650;
  11 |     public static final int fontWeight = 2130968651;
  12 |
  13 |     public R$attr()
  14 |     {
  15 |         return;
  16 |     }
  17 | }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/android/abcore/app-prod-debug.apk (namespace),android/support/compat/R$attr is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/compat/R$attr is not obfuscated,"
>  1 | package android.support.compat;
   2 | public final class R$attr {
   3 |     public static final int font = 2130968718;
   4 |     public static final int fontProviderAuthority = 2130968720;
   5 |     public static final int fontProviderCerts = 2130968721;
   6 |     public static final int fontProviderFetchStrategy = 2130968722;
   7 |     public static final int fontProviderFetchTimeout = 2130968723;
   8 |     public static final int fontProviderPackage = 2130968724;
   9 |     public static final int fontProviderQuery = 2130968725;
  10 |     public static final int fontStyle = 2130968726;
  11 |     public static final int fontWeight = 2130968727;
  12 |
  13 |     public R$attr()
  14 |     {
  15 |         return;
  16 |     }
  17 | }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/android/TestsAndroguard/bin/TestActivity.apk (namespace),android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,"
>  1 | package android.support.v4.accessibilityservice;
   2 | public class AccessibilityServiceInfoCompat {
   3 |     public static final int FEEDBACK_ALL_MASK = 255;
   4 |     private static final android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfo
     | VersionImpl IMPL;
   5 |
   6 |     static AccessibilityServiceInfoCompat()
   7 |     {
   8 |         if (android.os.Build$VERSION.SDK_INT < 14) {
   9 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl();
  10 |         } else {
  11 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl();
  12 |         }
  13 |         return;
  14 |     }
  15 |
  16 |     private AccessibilityServiceInfoCompat()
  17 |     {
  18 |         return;
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,"
>  1 | package android.support.v4.accessibilityservice;
   2 | public class AccessibilityServiceInfoCompat {
   3 |     public static final int FEEDBACK_ALL_MASK = 255;
   4 |     private static final android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfo
     | VersionImpl IMPL;
   5 |
   6 |     static AccessibilityServiceInfoCompat()
   7 |     {
   8 |         if (android.os.Build$VERSION.SDK_INT < 14) {
   9 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl();
  10 |         } else {
  11 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl();
  12 |         }
  13 |         return;
  14 |     }
  15 |
  16 |     private AccessibilityServiceInfoCompat()
  17 |     {
  18 |         return;
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/signing/TestActivity_signed_both.apk (namespace),android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat is not obfuscated,"
>  1 | package android.support.v4.accessibilityservice;
   2 | public class AccessibilityServiceInfoCompat {
   3 |     public static final int FEEDBACK_ALL_MASK = 255;
   4 |     private static final android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfo
     | VersionImpl IMPL;
   5 |
   6 |     static AccessibilityServiceInfoCompat()
   7 |     {
   8 |         if (android.os.Build$VERSION.SDK_INT < 14) {
   9 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl();
  10 |         } else {
  11 |             android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessi
     | bilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl();
  12 |         }
  13 |         return;
  14 |     }
  15 |
  16 |     private AccessibilityServiceInfoCompat()
  17 |     {
  18 |         return;
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/android/Invalid/Invalid.apk (namespace),android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl is not obfuscated,"
>  1 | package android.support.v4.accessibilityservice;
   2 |  class AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl implements android.support.v4.accessibilityservic
     | e.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl {
   3 |
   4 |     AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl()
   5 |     {
   6 |         return;
   7 |     }
   8 |
   9 |     public boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p2)
  10 |     {
  11 |         return 0;
  12 |     }
  13 |
  14 |     public String getDescription(android.accessibilityservice.AccessibilityServiceInfo p2)
  15 |     {
  16 |         return 0;
  17 |     }
  18 |
  19 |     public String getId(android.accessibilityservice.AccessibilityServiceInfo p2)
  20 |     {
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),android/support/v4/app/INotificationSideChannel$Stub$Proxy is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/app/INotificationSideChannel$Stub$Proxy is not obfuscated,"
>  1 | package android.support.v4.app;
   2 |  class INotificationSideChannel$Stub$Proxy implements android.support.v4.app.INotificationSideChannel {
   3 |     private android.os.IBinder mRemote;
   4 |
   5 |     INotificationSideChannel$Stub$Proxy(android.os.IBinder p1)
   6 |     {
   7 |         this.mRemote = p1;
   8 |         return;
   9 |     }
  10 |
  11 |     public android.os.IBinder asBinder()
  12 |     {
  13 |         return this.mRemote;
  14 |     }
  15 |
  16 |     public void cancel(String p6, int p7, String p8)
  17 |     {
  18 |         android.os.Parcel v0 = android.os.Parcel.obtain();
  19 |         try {
  20 |             v0.writeInterfaceToken(""android.support.v4.app.INotificationSideChannel"");
  21 |             v0.writeString(p6);
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F048,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('../product/skims/test/data/lib_apk/has_frida.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['$$triggerInterfaceInit', '<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToX
     | YZ', 'S_ISREG', 'XYZToColor', 'XYZToLAB', 'abandon', 'abbreviate', 'abort', 'abortAnimatedScroll', 'abortAnimation', 'ab
     | ortCaptures', 'abortCreation', 'abortImageCaptureRequests', 'aboutToAcquire', 'aboveAll', 'aboveValue', 'abs', 'absent',
     |  'absorbGlows', 'accept', 'acceptMatch', 'access$000', 'access$001', 'access$100', 'access$1000', 'access$10000', 'acces
     | s$101', 'access$10100', 'access$102', 'access$10200', 'access$10300', 'access$10400', 'access$10500', 'access$10600', 'a
     | ccess$10700', 'access$10800', 'access$10900', 'access$1100', 'access$11000', 'access$11100', 'access$11200', 'access$113
     | 00', 'access$11400', 'access$11500', 'access$11600', 'access$11700', 'access$11800', 'access$11900', 'access$1200', 'acc
     | ess$12000', 'access$12100', 'access$12200', 'access$12300', 'access$12400', 'access$12500', 'access$12600', 'access$1270
     | 0', 'access$12800', 'access$12900', 'access$1300', 'access$13000', 'access$13100', 'access$13200', 'access$13300', 'acce
     | ss$13400', 'access$13500', 'access$13600', 'access$13700', 'access$13800', 'access$13900', 'access$1400', 'access$14000'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/Invalid/Invalid.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/Invalid/Invalid.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$100', 'access$200', 'access$300', 'acce
     | ss$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addAnimation', 'addBack
     | StackState', 'addChild', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addMove
     | ment', 'addNewItem', 'addNextIntent', 'addOnBackStackChangedListener', 'addOp', 'addParentStack', 'addStream', 'addToBac
     | kStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackIndex', 'append', 'appendRecord', 'appendSelectio
     | nArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachFragment', 'await', 'beginFakeDrag', 'beginTransa
     | ction', 'binarySearch', 'bindView', 'buildShortClassTag', 'bumpBackStackNesting', 'calculatePageOffsets', 'call', 'callO
     | nLoadFinished', 'canScroll', 'canScrollHorizontally', 'canScrollVertically', 'cancel', 'cancelLoad', 'changeCursor', 'ch
     | angeCursorAndColumns', 'charAt', 'checkLayoutParams', 'checkStateLoss', 'clear', 'clearAnimation', 'clearThreadStatsTag'
     | , 'clone', 'close', 'combineArrayExtra', 'commit', 'commitAllowingStateLoss', 'commitInternal', 'compare', 'completeScro
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/TC/bin/TC-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/TC/bin/TC-debug.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'T1', 'TCE_t1', 'TCE_t2', 'TCE_t3', 'append', 'equal', 'equals', 'onCreate', 'print', 'println', 'setContentV
     | iew', 'toString']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/TCDiff/bin/TCDiff-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/TCDiff/bin/TCDiff-debug.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'T1', 'TCE_t1', 'TCE_t2', 'TCE_t3', 'append', 'equal', 'equals', 'onCreate', 'print', 'println', 'setContentV
     | iew', 'toString']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/TestsAndroguard/bin/TestActivity.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/TestsAndroguard/bin/TestActivity.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
     | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
     | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
     | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
     | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
     | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
     | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
     | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
     | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
     | ragment', 'available', 'await', 'beginFakeDrag', 'beginTransaction', 'bigPicture', 'bigText', 'binarySearch', 'bindView'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
     | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
     | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
     | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
     | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
     | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
     | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
     | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
     | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
     | ragment', 'available', 'await', 'beginFakeDrag', 'beginTransaction', 'bigPicture', 'bigText', 'binarySearch', 'bindView'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/android/abcore/app-prod-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/android/abcore/app-prod-debug.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
     | ccess$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$1002', 'access$101', 'access$102', 'access$
     | 106', 'access$1100', 'access$1102', 'access$1200', 'access$1302', 'access$1400', 'access$1500', 'access$1600', 'access$2
     | 00', 'access$202', 'access$300', 'access$301', 'access$302', 'access$400', 'access$402', 'access$408', 'access$500', 'ac
     | cess$502', 'access$600', 'access$602', 'access$700', 'access$702', 'access$708', 'access$800', 'access$802', 'access$900
     | ', 'account', 'accumField', 'acos', 'acquire', 'acquireTempRect', 'acquireTile', 'actionFormatChanged', 'add', 'addAcces
     | sibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'addAddition', '
     | addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation', 'addArchiveEntry', 'addAsFirstExtraField', 'addBackRefere
     | nce', 'addBackStackState', 'addCallback', 'addCategory', 'addChangePayload', 'addChild', 'addChildDrawingOrderCallback',
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/axml/AndroidManifest_ShortName.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/dalvik/test/bin/Test-debug-unaligned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/dalvik/test/bin/Test-debug-unaligned.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'append', 'go', 'onCreate', 'println', 'setContentView', 'test1', 'test_base', 'toString']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/dalvik/test/bin/Test-debug.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/dalvik/test/bin/Test-debug.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'append', 'go', 'onCreate', 'println', 'setContentView', 'test1', 'test_base', 'toString']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/TestActivity_signed_both.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/TestActivity_signed_both.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'Main', 'Partition', 'QuickSort', 'Swap', 'Test', 'TestBridge', 'TestInvoke1', 'TestInvoke2', 'Te
     | stInvoke3', 'TestInvoke4', 'TestInvoke5', 'TestInvoke6', 'TestInvoke7', 'TestInvoke8', 'TestSynthetic1', 'TestSynthetic2
     | ', 'TestSynthetic3', 'TestSynthetic4', 'abandon', 'abortAnimation', 'abs', 'access$000', 'access$1', 'access$100', 'acce
     | ss$102', 'access$200', 'access$300', 'access$400', 'access$500', 'accumField', 'add', 'addAccessibilityStateChangeListen
     | er', 'addAction', 'addAnimation', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild
     | ', 'addEmailBcc', 'addEmailCc', 'addEmailTo', 'addFlags', 'addFocusables', 'addFragment', 'addInboxStyle', 'addLine', 'a
     | ddMovement', 'addNewItem', 'addNextIntent', 'addNextIntentWithParentStack', 'addOnBackStackChangedListener', 'addOp', 'a
     | ddParentStack', 'addStream', 'addTab', 'addToBackStack', 'addTouchables', 'addView', 'addViewInLayout', 'allocBackStackI
     | ndex', 'append', 'appendRecord', 'appendSelectionArgs', 'arraycopy', 'arrowScroll', 'attach', 'attachActivity', 'attachF
     | ragment', 'available', 'await', 'beginFakeDrag', 'beginTransaction', 'bigPicture', 'bigText', 'binarySearch', 'bindView'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/debuggable-boolean.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/debuggable-boolean.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/debuggable-resource.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/debuggable-resource.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/empty-unsigned.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/empty-unsigned.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-in.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v1v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-aligned-v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-in.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-legacy-aligned-v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-rsa-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-rsa-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-in.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v1-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v1v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v2v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v3-lineage-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/golden-unaligned-v3-out.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/mismatched-compression-method.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/mismatched-compression-method.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/original.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/original.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/targetSandboxVersion-2.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/two-signers-second-signer-v2-broken.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/two-signers-second-signer-v2-broken.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/two-signers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/unsigned-targetSandboxVersion-2.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-empty.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-max-sized-eocd-comment.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-max-sized-eocd-comment.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-targetSandboxVersion-2.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-two-signers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-cr-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-cr-in-entry-name.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-lf-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-lf-in-entry-name.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-nul-in-entry-name.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-nul-in-entry-name.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-goo
     | d.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk'
     | )[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-go
     | od.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.
     | apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk')[
     | 2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk')[2
     | ]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk
     | ')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-only-with-signed-attrs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-only-with-signed-attrs.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-empty.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-max-sized-eocd-comment.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-missing-classes.dex.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-no-certs-in-sig.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-targetSandboxVersion-2.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-targetSandboxVersion-3.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-two-signers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-unknown-additional-attr.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2-stripped.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2v3-signed-v3-block-stripped.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v2v3-unknown-additional-attr.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-empty.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-empty.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-no-certs-in-sig.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-no-supported-sig-algs.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-unknown-additional-attr.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/v3-stripped.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/v3-stripped.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/signing/apksig/weird-compression-method.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/signing/apksig/weird-compression-method.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'finish', 'onCreate']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/a2dp.Vol_137.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/a2dp.Vol_137.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'DoConnected', 'DoDisconnected', 'GetColumns', 'GetName', 'HSLToColor', 'LABToColor', 'LABToXYZ',
     |  'LoadPrefs', 'Locationbtn', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'Save', 'TextReader', 'XYZToColor', 'XYZToLAB', 'abando
     | n', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'accept', 'acceptMatch', 'access$000', 'access$002', 'access$
     | 100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$13
     | 02', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'access$1600', 'access$1602', 'access$1700', 'access$18
     | 00', 'access$1900', 'access$200', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', '
     | access$500', 'access$600', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'accumField', 'acquire'
     | , 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActions', 'addActionsToBuilder', 'addAll', 'addAnimatio
     | n', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild', 'addChildrenForAccessibilit
     | y', 'addColumn', 'addCompatExtras', 'addCustomAction', 'addDrawerListener', 'addEditableKey', 'addEmailBcc', 'addEmailCc
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.android.example.text.styling.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.android.example.text.styling.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'accept', 'acceptMatch', 'access$000', 'ac
     | cess$001', 'access$002', 'access$100', 'access$101', 'access$102', 'access$200', 'access$202', 'access$300', 'access$301
     | ', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'acce
     | ss$702', 'access$800', 'access$802', 'accumField', 'acos', 'acquire', 'acquireSolverVariable', 'actionFormatChanged', 'a
     | dd', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'a
     | ddAll', 'addAnchors', 'addAnimation', 'addBackStackState', 'addCategory', 'addCentering', 'addChain', 'addChild', 'addCh
     | ildrenForAccessibility', 'addChildrenForExpandedActionView', 'addChildrenToSolver', 'addCircle', 'addClientEquation', 'a
     | ddColorStateListToCache', 'addCommand', 'addCompatExtras', 'addConstraint', 'addContentView', 'addCustomViewsWithGravity
     | ', 'addDataResultToIntent', 'addDelegate', 'addDrawableToCache', 'addDrawerListener', 'addDurationItem', 'addEmailBcc',
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.tvleanback.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abortUnlessCommitted', 'abs', 'absoluteValue', '
     | absorbGlows', 'accept', 'acceptMatch', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$10
     | 02', 'access$101', 'access$102', 'access$108', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$1302'
     | , 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000',
     |  'access$202', 'access$2100', 'access$2200', 'access$2300', 'access$2400', 'access$2500', 'access$2600', 'access$2700',
     | 'access$2800', 'access$2900', 'access$300', 'access$301', 'access$302', 'access$400', 'access$402', 'access$500', 'acces
     | s$502', 'access$600', 'access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902',
     | 'accumField', 'acos', 'acquire', 'acquireSession', 'acquireTile', 'actionFormatChanged', 'adapterPosition', 'add', 'addA
     | ccessibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAdUri', 'addAddedFragments',
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.wearable.wear.weardrawers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
     | ccess$000', 'access$002', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'acces
     | s$1200', 'access$1202', 'access$1300', 'access$1302', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'acces
     | s$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000', 'access$201', 'access$202', 'access$2
     | 100', 'access$2200', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', '
     | access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', '
     | acquire', 'acquireTile', 'activateComplications', 'adapterChanged', 'add', 'addAccessibilityStateChangeListener', 'addAc
     | tion', 'addActions', 'addAdapter', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation',
     | 'addApi', 'addApiIfAvailable', 'addBackStackState', 'addCallback', 'addCapabilityListener', 'addCategory', 'addChangePay
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.politedroid_4.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.politedroid_4.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'a', 'add', 'addPreferencesFromResource', 'append', 'appendId', 'asList', 'b', 'build', 'buildUpo
     | n', 'callChangeListener', 'cancel', 'close', 'commit', 'currentTimeMillis', 'edit', 'equals', 'finalize', 'forName', 'ge
     | t', 'getApplicationContext', 'getBoolean', 'getBooleanExtra', 'getBroadcast', 'getColumnIndex', 'getContentResolver', 'g
     | etContext', 'getCount', 'getDefaultSharedPreferences', 'getEntries', 'getEntryValues', 'getField', 'getInstance', 'getIn
     | t', 'getLong', 'getPreferenceScreen', 'getResources', 'getRingerMode', 'getSharedPreferences', 'getString', 'getStringAr
     | ray', 'getSystemService', 'getTimeInMillis', 'getValue', 'hasNext', 'iterator', 'length', 'longValue', 'min', 'moveToNex
     | t', 'next', 'onClick', 'onCreate', 'onDialogClosed', 'onPause', 'onPrepareDialogBuilder', 'onReceive', 'onResume', 'onSh
     | aredPreferenceChanged', 'parse', 'parseInt', 'putBoolean', 'putExtra', 'putInt', 'query', 'registerOnSharedPreferenceCha
     | ngeListener', 'sendBroadcast', 'set', 'setEntries', 'setEntryValues', 'setInexactRepeating', 'setMultiChoiceItems', 'set
     | RingerMode', 'setTimeInMillis', 'setValue', 'size', 'split', 'startsWith', 'substring', 'toString', 'trim', 'unregisterO
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.teleca.jamendo_35.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'access$000', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$12
     | 00', 'access$1300', 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$20
     | 0', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'ac
     | cess$600', 'access$602', 'access$608', 'access$700', 'access$702', 'access$800', 'access$900', 'acquire', 'add', 'addAll
     | ', 'addOnClick', 'addOnGesturePerformedListener', 'addPlaylistEntry', 'addPreferencesFromResource', 'addRadioToRecent',
     | 'addSection', 'addTab', 'addToDownloadQueue', 'addToFavorites', 'addToLibrary', 'addToPlaylist', 'addTrack', 'addTracks'
     | , 'albumClickHandler', 'albumSearch', 'animateClose', 'animateToggle', 'append', 'artistClickHandler', 'asList', 'build'
     | , 'calculateOrder', 'cancel', 'cleanUp', 'clear', 'clone', 'close', 'commit', 'compare', 'connect', 'construct', 'contai
     | ns', 'containsKey', 'convertStreamToString', 'create', 'createBitmap', 'createChooser', 'createFromResource', 'createPla
     | ylist', 'createStringFromIds', 'createTables', 'createWifiLock', 'currentTimeMillis', 'd', 'decodeStream', 'deconstruct'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.test.intent_filter.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.test.intent_filter.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
     | ccess$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'access$102', 'access$1100', 'access$
     | 1200', 'access$1300', 'access$1400', 'access$200', 'access$201', 'access$202', 'access$300', 'access$302', 'access$400',
     |  'access$500', 'access$502', 'access$600', 'access$700', 'access$800', 'access$900', 'accumField', 'acos', 'acquire', 'a
     | cquireSolverVariable', 'acquireTempRect', 'acquireTile', 'actionBarOnMenuKeyEventPre28', 'actionFormatChanged', 'activeS
     | tateChanged', 'activitySuperDispatchKeyEventPre28', 'actualDraw', 'actualIsOpaque', 'add', 'addAccessibilityStateChangeL
     | istener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnch
     | ors', 'addAnimatingView', 'addAnimation', 'addArc', 'addBackStackState', 'addCallback', 'addCategory', 'addCenterPoint',
     |  'addCentering', 'addChain', 'addChangePayload', 'addChild', 'addChildDrawingOrderCallback', 'addChildrenForAccessibilit
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/duplicate.permisssions_9999999.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'access$100', 'addObserver', 'append', 'close', 'createDir', 'd', 'doInBackground', 'e', 'entries
     | ', 'execute', 'exists', 'getData', 'getFilesDir', 'getInputStream', 'getIntent', 'getName', 'getParentFile', 'getPath',
     | 'hasMoreElements', 'i', 'isDirectory', 'lastIndexOf', 'mkdirs', 'nextElement', 'notifyObservers', 'onCreate', 'onPostExe
     | cute', 'parseBoolean', 'read', 'setChanged', 'stripExtension', 'substring', 'toString', 'unzip', 'unzipEntry', 'unzipWeb
     | File', 'update', 'v', 'valueOf', 'write']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/hello-world.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/hello-world.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'NodesToString', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'XYZ
     | ToColor', 'XYZToLAB', 'abandon', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'absorbGlows', 'accept', 'accept
     | Match', 'acceptNestedScroll', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'acce
     | ss$102', 'access$1102', 'access$1200', 'access$1300', 'access$1400', 'access$200', 'access$202', 'access$300', 'access$3
     | 02', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'access$702', 'ac
     | cess$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', 'acquire', 'acquireTempRect', 'acquireTile',
     | 'actionFormatChanged', 'activateNewButton', 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHide
     | Offset', 'addActions', 'addActionsToBuilder', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation', 'addBackSt
     | ackState', 'addBigPictureStyle', 'addBigStyleToBuilderJellybean', 'addBigStyleToBuilderLollipop', 'addBigTextStyle', 'ad
     | dCallback', 'addCategory', 'addChangePayload', 'addChild', 'addChildDrawingOrderCallback', 'addChildrenForAccessibility'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/lineageos_nexus5_framework-res.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/multidex/multidex.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/multidex/multidex.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'othermethod', 'println', 'somemethod']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/partialsignature.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/partialsignature.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'DoConnected', 'DoDisconnected', 'GetColumns', 'GetName', 'HSLToColor', 'LABToColor', 'LABToXYZ',
     |  'LoadPrefs', 'Locationbtn', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'Save', 'TextReader', 'XYZToColor', 'XYZToLAB', 'abando
     | n', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'accept', 'acceptMatch', 'access$000', 'access$002', 'access$
     | 100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$13
     | 02', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'access$1600', 'access$1602', 'access$1700', 'access$18
     | 00', 'access$1900', 'access$200', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', '
     | access$500', 'access$600', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'accumField', 'acquire'
     | , 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActions', 'addActionsToBuilder', 'addAll', 'addAnimatio
     | n', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild', 'addChildrenForAccessibilit
     | y', 'addColumn', 'addCompatExtras', 'addCustomAction', 'addDrawerListener', 'addEditableKey', 'addEmailBcc', 'addEmailCc
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b57-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b5
     | 7-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'access$100', 'addObserver', 'append', 'close', 'createDir', 'd', 'doInBackground', 'e', 'entries', 'execute'
     | , 'exists', 'getData', 'getFilesDir', 'getInputStream', 'getIntent', 'getName', 'getParentFile', 'getPath', 'hasMoreElem
     | ents', 'i', 'isDirectory', 'lastIndexOf', 'mkdirs', 'nextElement', 'notifyObservers', 'onCreate', 'onPostExecute', 'read
     | ', 'setChanged', 'stripExtension', 'substring', 'toString', 'unzip', 'unzipEntry', 'unzipWebFile', 'update', 'v', 'value
     | Of', 'write']
     ^ Col 0
",analyze_bytecodes._no_root_check
F075,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),provider/com.android.server.heapdump/android:grantUriPermissions enabled,284,"home,apk,bytecodes",075. Unauthorized access to files - APK Content Provider,provider/com.android.server.heapdump/android:grantUriPermissions enabled,"
  1644 |   <activity android:configchanges=""0x000000A0"" android:name=""com.android.internal.app.PlatLogoActivity"" android:process=
       | "":ui"" android:theme=""@android:01030060"">
  1645 |   </activity>
  1646 |   <activity android:excludefromrecents=""true"" android:name=""com.android.internal.app.DisableCarModeActivity"" android:pro
       | cess="":ui"" android:theme=""@android:01030055"">
  1647 |   </activity>
  1648 |   <activity android:excludefromrecents=""true"" android:finishonclosesystemdialogs=""true"" android:label=""@android:0104043E
       | "" android:name=""com.android.internal.app.DumpHeapActivity"" android:nohistory=""true"" android:process="":ui"" android:theme=
       | ""@android:01030010"">
  1649 |   </activity>
> 1650 |   <provider android:authorities=""com.android.server.heapdump"" android:granturipermissions=""true"" android:multiprocess=""f
       | alse"" android:name=""com.android.server.am.DumpHeapProvider"" android:singleuser=""true"">
  1651 |   </provider>
  1652 |   <activity android:excludefromrecents=""true"" android:exported=""true"" android:label=""@android:0104051C"" android:name=""an
       | droid.accounts.ChooseAccountActivity"" android:process="":ui"" android:theme=""@android:01030132"">
  1653 |   </activity>
  1654 |   <activity android:excludefromrecents=""true"" android:exported=""true"" android:label=""@android:0104051C"" android:name=""an
       | droid.accounts.ChooseTypeAndAccountActivity"" android:process="":ui"" android:theme=""@android:01030132"">
  1655 |   </activity>
  1656 |   <activity android:excludefromrecents=""true"" android:label=""@android:0104051C"" android:name=""android.accounts.ChooseAcc
       | ountTypeActivity"" android:process="":ui"" android:theme=""@android:01030132"">
       ^ Col 0
",__init__._apk_exported_cp
F075,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),provider/com.example.android.tvleanback/android:exported enabled,284,"home,apk,bytecodes",075. Unauthorized access to files - APK Content Provider,provider/com.example.android.tvleanback/android:exported enabled,"
  51 |   <activity android:configchanges=""0x00002D80"" android:launchmode=""2"" android:name=""com.example.android.tvleanback.ui.Pl
     | aybackActivity"" android:resizeableactivity=""true"">
  52 |   </activity>
  53 |   <activity android:exported=""true"" android:name=""com.example.android.tvleanback.ui.VerticalGridActivity"" android:parent
     | activityname=""com.example.android.tvleanback.ui.MainActivity"" android:theme=""@7F0E0169"">
  54 |   </activity>
  55 |   <activity android:name=""com.example.android.tvleanback.ui.SearchActivity"">
  56 |   </activity>
  57 |   <activity android:name=""com.example.android.tvleanback.ui.GuidedStepActivity"" android:theme=""@7F0E015E"">
  58 |   </activity>
> 59 |   <provider android:authorities=""com.example.android.tvleanback"" android:exported=""true"" android:name=""com.example.andro
     | id.tvleanback.data.VideoProvider"">
  60 |    <path-permission android:pathprefix=""/search"" android:readpermission=""android.permission.GLOBAL_SEARCH"">
  61 |    </path-permission>
  62 |   </provider>
  63 |   <receiver android:enabled=""true"" android:exported=""false"" android:name=""com.example.android.tvleanback.recommendation.
     | RecommendationReceiver"">
  64 |    <intent-filter>
  65 |     <action android:name=""android.intent.action.BOOT_COMPLETED"">
  66 |     </action>
  67 |    </intent-filter>
     ^ Col 0
",__init__._apk_exported_cp
F207,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('../product/skims/test/data/lib_apk/has_frida.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/Invalid/Invalid.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/Invalid/Invalid.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/TC/bin/TC-debug.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/TC/bin/TC-debug.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/TCDiff/bin/TCDiff-debug.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/TCDiff/bin/TCDiff-debug.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/TestsAndroguard/bin/TestActivity.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/TestsAndroguard/bin/TestActivity.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/android/abcore/app-prod-debug.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/abcore/app-prod-debug.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/axml/AndroidManifest_ShortName.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/dalvik/test/bin/Test-debug-unaligned.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/dalvik/test/bin/Test-debug-unaligned.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/dalvik/test/bin/Test-debug.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/dalvik/test/bin/Test-debug.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/TestActivity_signed_both.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/TestActivity_signed_both.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/debuggable-boolean.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/debuggable-boolean.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/debuggable-resource.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/debuggable-resource.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/empty-unsigned.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/empty-unsigned.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-in.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v1-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v1-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v1v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v1v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v1v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v1v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-in.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v1-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v1-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-rsa-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-rsa-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-in.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v1-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v1-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v1v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v1v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v1v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-lineage-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-out.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/mismatched-compression-method.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/mismatched-compression-method.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/original.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/original.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/targetSandboxVersion-2.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/targetSandboxVersion-2.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/two-signers-second-signer-v2-broken.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/two-signers-second-signer-v2-broken.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/two-signers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/two-signers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/unsigned-targetSandboxVersion-2.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-empty.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-empty.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-max-sized-eocd-comment.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-max-sized-eocd-comment.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-targetSandboxVersion-2.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-targetSandboxVersion-2.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-two-signers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-two-signers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-cr-in-entry-name.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-cr-in-entry-name.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-lf-in-entry-name.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-lf-in-entry-name.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-nul-in-entry-name.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-nul-in-entry-name.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk'
     | )
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-only-with-signed-attrs.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-only-with-signed-attrs.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-empty.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-empty.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-max-sized-eocd-comment.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-missing-classes.dex.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-no-certs-in-sig.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-2.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-3.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-additional-attr.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2-stripped.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-stripped.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2v3-signed-v3-block-stripped.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2v3-unknown-additional-attr.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-empty.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-empty.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-no-certs-in-sig.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-no-supported-sig-algs.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-additional-attr.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/v3-stripped.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-stripped.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/signing/apksig/weird-compression-method.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/weird-compression-method.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/a2dp.Vol_137.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/a2dp.Vol_137.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.android.example.text.styling.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.android.example.text.styling.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.example.android.tvleanback.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.example.android.wearable.wear.weardrawers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.politedroid_4.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.politedroid_4.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.teleca.jamendo_35.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.test.intent_filter.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.test.intent_filter.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/duplicate.permisssions_9999999.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/hello-world.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/hello-world.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/lineageos_nexus5_framework-res.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/multidex/multidex.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/multidex/multidex.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/partialsignature.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/partialsignature.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b57-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b57-#U043
     | 1#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F206,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Security controls bypass or absence - Anti hooking,295,"home,apk,bytecodes",206. Security controls bypass or absence - Anti hooking,Security controls bypass or absence - Anti hooking,"
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> apk_obj, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/has_frida.apk')
   9 |
  10 | >>> # Get the files attribute
  11 | >>> apk_obj.get_files()
  12 | # No method performs root detection
> 13 | >>> ['res/drawable-v23/abc_control_background_material.xml', 'res/layout-v26/abc_screen_toolbar.xml', 'res/drawable-ldrt
     | l-mdpi/abc_spinner_mtrl_am_alpha.9.png', 'res/drawable-ldrtl-mdpi/abc_ic_menu_cut_mtrl_alpha.png', 'res/drawable-ldrtl-m
     | dpi/abc_ic_menu_copy_mtrl_am_alpha.png', 'res/layout-v22/abc_alert_dialog_button_bar_material.xml', 'res/color/switch_th
     | umb_material_dark.xml', 'res/color/abc_tint_btn_checkable.xml', 'res/color/abc_primary_text_material_light.xml', 'res/co
     | lor/switch_thumb_material_light.xml', 'res/color/abc_hint_foreground_material_light.xml', 'res/color/abc_hint_foreground
     | _material_dark.xml', 'res/color/abc_tint_edittext.xml', 'res/color/abc_primary_text_material_dark.xml', 'res/color/abc_b
     | tn_colored_borderless_text_material.xml', 'res/color/abc_secondary_text_material_dark.xml', 'res/color/abc_btn_colored_t
     | ext_material.xml', 'res/color/abc_secondary_text_material_light.xml', 'res/color/abc_background_cache_hint_selector_mate
     | rial_light.xml', 'res/color/abc_primary_text_disable_only_material_dark.xml', 'res/color/abc_search_url_text.xml', 'res/
     | color/abc_tint_spinner.xml', 'res/color/abc_primary_text_disable_only_material_light.xml', 'res/color/abc_tint_default.x
     | ml', 'res/color/abc_tint_switch_track.xml', 'res/color/abc_background_cache_hint_selector_material_dark.xml', 'res/color
     ^ Col 0
",analyze_bytecodes._has_frida
F103,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('../product/skims/test/data/lib_apk/has_frida.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/axml/AndroidManifest_ShortName.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/empty-unsigned.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/empty-unsigned.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-in.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v2v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-aligned-v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-in.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-legacy-aligned-v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-in.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v2v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-lineage-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/golden-unaligned-v3-out.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/unsigned-targetSandboxVersion-2.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-empty.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-empty.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-max-sized-eocd-comment.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-missing-classes.dex.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-no-certs-in-sig.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-2.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-targetSandboxVersion-3.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-two-signers.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-additional-attr.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2v3-signed-v3-block-stripped.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v2v3-unknown-additional-attr.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-empty.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-empty.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-no-certs-in-sig.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-no-supported-sig-algs.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-additional-attr.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/signing/apksig/v3-stripped.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/signing/apksig/v3-stripped.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/tests/com.test.intent_filter.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.test.intent_filter.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/tests/multidex/multidex.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/multidex/multidex.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F398,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),The application is vulnerable to Fragment Injection,470,"home,apk,bytecodes",398. Fragment Injection,The application is vulnerable to Fragment Injection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> apk_obj, dex, _ = AnalyzeAPK('examples/tests/com.teleca.jamendo_35.apk')
   9 |
> 10 | >>> # Get the targetSdkVersion attribute
  11 | >>> apk_obj.get_target_sdk_version()
  12 | >>> 8
  13 | >>> # Get the method names from all classes in each .dex file
  14 | >>> sorted(set(method.name for method in dex.get_methods()))
  15 | # No method performs root detection
  16 | >>> 'package com.teleca.jamendo.activity;\n class AlbumActivity$1 implements android.widget.AdapterView$OnItemSelectedLi
     | stener {\n    final synthetic com.teleca.jamendo.activity.AlbumActivity this$0;\n    final synthetic java.util.ArrayList
     |  val$langs;\n\n    AlbumActivity$1(com.teleca.jamendo.activity.AlbumActivity p1, java.util.ArrayList p2)\n    {\n
     |  this.this$0 = p1;\n        this.val$langs = p2;\n        return;\n    }\n\n    public void onItemSelected(android.widge
     | t.AdapterView p3, android.view.View p4, int p5, long p6)\n    {\n        com.teleca.jamendo.activity.AlbumActivity.acces
     | s$000(this.this$0).setLang(((String) this.val$langs.get(p5)));\n        return;\n    }\n\n    public void onNothingSelec
     ^ Col 0
",analyze_bytecodes._has_fragment_injection
F058,inputs,examples/tests/com.android.example.text.styling.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.android.example.text.styling"" xmlns:android=""ht
     | tp://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0C0000"" android:label=""@7F0D001D"" an
     | droid:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7F0E0005"">
   5 |   <activity android:name=""com.android.example.text.styling.MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |   <meta-data android:name=""preloaded_fonts"" android:resource=""@7F020003"">
  14 |   </meta-data>
  15 |  </application>
  16 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.example.android.wearable.wear.weardrawers"" xmln
     | s:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
   4 |  <uses-feature android:name=""android.hardware.type.watch"">
   5 |  </uses-feature>
   6 |  <uses-permission android:name=""android.permission.WAKE_LOCK"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0F0000"" android:label=""@7F110003"" an
     | droid:supportsrtl=""true"" android:theme=""@android:01030128"">
   9 |   <meta-data android:name=""com.google.android.wearable.standalone"" android:value=""true"">
  10 |   </meta-data>
  11 |   <uses-library android:name=""com.google.android.wearable"" android:required=""false"">
  12 |   </uses-library>
  13 |   <activity android:label=""@7F110003"" android:name=""com.example.android.wearable.wear.weardrawers.MainActivity"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.intent.action.MAIN"">
  16 |     </action>
  17 |     <category android:name=""android.intent.category.LAUNCHER"">
  18 |     </category>
  19 |    </intent-filter>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/TC/bin/TC-debug.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.TC"" xmlns:android=""http://schem
     | as.android.com/apk/res/android"">
>  2 |  <application android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040000"">
   3 |   <activity android:label=""@7F040000"" android:name=""TCActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/TCDiff/bin/TCDiff-debug.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.TCDiff"" xmlns:android=""http://s
     | chemas.android.com/apk/res/android"">
>  2 |  <application android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040000"">
   3 |   <activity android:label=""@7F040000"" android:name=""TCActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/Invalid/Invalid.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""re.androguard.android.invalid"" xmlns:android=""http:
     | //schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""8"" android:targetsdkversion=""15"">
   3 |  </uses-sdk>
>  4 |  <application android:debuggable=""true"" android:icon=""@7F020001"" android:label=""@7F050000"" android:theme=""@7F060000"">
   5 |   <activity android:label=""@7F050003"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/TestsAndroguard/bin/TestActivity.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""tests.androguard"" xmlns:android=""http://schemas.and
     | roid.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""9"" android:targetsdkversion=""16"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""false"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
   5 |   <activity android:label=""@7F040001"" android:name=""TestActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/TestsAndroguard/bin/TestActivity_unsigned.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""tests.androguard"" xmlns:android=""http://schemas.and
     | roid.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""9"" android:targetsdkversion=""16"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""false"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
   5 |   <activity android:label=""@7F040001"" android:name=""TestActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/signing/TestActivity_signed_both.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""tests.androguard"" xmlns:android=""http://schemas.and
     | roid.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""9"" android:targetsdkversion=""16"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""false"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
   5 |   <activity android:label=""@7F040001"" android:name=""TestActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/signing/apksig/debuggable-boolean.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""7"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:debuggable=""true"" android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/android/abcore/app-prod-debug.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   2 |  <uses-sdk android:minsdkversion=""21"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.INTERNET"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
   7 |  </uses-permission>
   8 |  <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"">
   9 |  </uses-permission>
  10 |  <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"">
  11 |  </uses-permission>
> 12 |  <application android:allowbackup=""false"" android:debuggable=""true"" android:icon=""@7F0D0000"" android:label=""@7F0E001D"" a
     | ndroid:supportsrtl=""true"" android:theme=""@7F0F0006"">
  13 |   <activity android:name=""com.greenaddress.abcore.MainActivity"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.intent.action.MAIN"">
  16 |     </action>
  17 |     <category android:name=""android.intent.category.LAUNCHER"">
  18 |     </category>
  19 |    </intent-filter>
  20 |   </activity>
  21 |   <service android:exported=""false"" android:name=""com.greenaddress.abcore.DownloadInstallCoreIntentService"">
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
  11 |  </uses-permission>
  12 |  <uses-permission android:name=""android.permission.INTERNET"">
  13 |  </uses-permission>
  14 |  <uses-permission-sdk-23 android:maxsdkversion=""27"" android:name=""android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATION
     | S"">
  15 |  </uses-permission-sdk-23>
  16 |  <uses-permission-sdk-23 android:name=""android.permission.REQUEST_INSTALL_PACKAGES"">
  17 |  </uses-permission-sdk-23>
  18 |  <uses-permission android:maxsdkversion=""18"" android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  19 |  </uses-permission>
> 20 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
  21 |   <activity android:label=""@7F040001"" android:name=""info.guardianproject.urzip.MainActivity"">
  22 |    <intent-filter>
  23 |     <action android:name=""android.intent.action.MAIN"">
  24 |     </action>
  25 |     <category android:name=""android.intent.category.LAUNCHER"">
  26 |     </category>
  27 |    </intent-filter>
  28 |    <intent-filter>
  29 |     <action android:name=""android.intent.action.SEND"">
  30 |     </action>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
  14 |  <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"">
  15 |  </uses-permission>
  16 |  <uses-permission android:name=""android.permission.RECORD_AUDIO"">
  17 |  </uses-permission>
  18 |  <uses-feature android:name=""android.hardware.microphone"" android:required=""false"">
  19 |  </uses-feature>
  20 |  <uses-feature android:name=""android.hardware.touchscreen"" android:required=""false"">
  21 |  </uses-feature>
  22 |  <uses-feature android:name=""android.software.leanback"" android:required=""true"">
  23 |  </uses-feature>
> 24 |  <application android:allowbackup=""false"" android:banner=""@7F070426"" android:debuggable=""true"" android:icon=""@7F070054""
     | android:label=""@7F0D001D"" android:logo=""@7F070426"" android:theme=""@7F0E0160"">
  25 |   <activity android:icon=""@7F070426"" android:label=""@7F0D001D"" android:logo=""@7F070426"" android:name=""com.example.androi
     | d.tvleanback.ui.MainActivity"" android:screenorientation=""0"" android:theme=""@7F0E0161"">
  26 |    <intent-filter>
  27 |     <action android:name=""android.intent.action.MAIN"">
  28 |     </action>
  29 |     <category android:name=""android.intent.category.LEANBACK_LAUNCHER"">
  30 |     </category>
  31 |    </intent-filter>
  32 |   </activity>
     ^ Col 0
",__init__._apk_debugging_enabled
F055,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""23"" android:compilesdkversioncodename=""6.0-2438415"" package=""com.google.mediapipe.a
     | pps.handtrackinggpu"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=""http://schemas.android.co
     | m/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""21"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.CAMERA"">
   5 |  </uses-permission>
   6 |  <uses-feature android:name=""android.hardware.camera"">
   7 |  </uses-feature>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""androidx.core.app.CoreComponentFactory"" android:ic
     | on=""@7F0B0000"" android:label=""Hand Tracking"" android:roundicon=""@7F0B0002"" android:supportsrtl=""true"" android:theme=""@7F
     | 0D0005"">
   9 |   <activity android:exported=""true"" android:name=""com.google.mediapipe.apps.handtrackinggpu.MainActivity"" android:screen
     | orientation=""1"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.test.intent_filter.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.test.intent_filter"" platformbuildversioncode=""1"" platformbuildversionname=""1.000000"" xmlns:android
     | =""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:icon=""@7F0C0000"" android:label=""@7F0D0027"" android:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7
     | F0E0006"">
   5 |   <receiver android:enabled=""true"" android:exported=""false"" android:name=""com.test.intent_filter.TestReceiver"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.VIEW"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.DEFAULT"">
  10 |     </category>
  11 |     <category android:name=""android.intent.category.BROWSABLE"">
  12 |     </category>
  13 |     <data android:host=""@7F0D002F"" android:mimetype=""text/html"" android:path=""/testpath"" android:pathpattern=""testpatter
     | n"" android:port=""0301"" android:scheme=""@7F0D0036"">
  14 |     </data>
  15 |    </intent-filter>
  16 |   </receiver>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.android.example.text.styling.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.android.example.text.styling"" xmlns:android=""ht
     | tp://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0C0000"" android:label=""@7F0D001D"" an
     | droid:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7F0E0005"">
   5 |   <activity android:name=""com.android.example.text.styling.MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |   <meta-data android:name=""preloaded_fonts"" android:resource=""@7F020003"">
  14 |   </meta-data>
  15 |  </application>
  16 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.example.android.wearable.wear.weardrawers"" xmln
     | s:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
   4 |  <uses-feature android:name=""android.hardware.type.watch"">
   5 |  </uses-feature>
   6 |  <uses-permission android:name=""android.permission.WAKE_LOCK"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0F0000"" android:label=""@7F110003"" an
     | droid:supportsrtl=""true"" android:theme=""@android:01030128"">
   9 |   <meta-data android:name=""com.google.android.wearable.standalone"" android:value=""true"">
  10 |   </meta-data>
  11 |   <uses-library android:name=""com.google.android.wearable"" android:required=""false"">
  12 |   </uses-library>
  13 |   <activity android:label=""@7F110003"" android:name=""com.example.android.wearable.wear.weardrawers.MainActivity"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.intent.action.MAIN"">
  16 |     </action>
  17 |     <category android:name=""android.intent.category.LAUNCHER"">
  18 |     </category>
  19 |    </intent-filter>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/hello-world.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""de.rhab.helloworld"" platformbuildversioncode=""25"" p
     | latformbuildversionname=""7.1.1"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""21"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:icon=""@7F030000"" android:label=""@7F070022"" android:supportsrtl=""true"" a
     | ndroid:theme=""@7F0900A7"">
   5 |   <activity android:label=""@7F070022"" android:name=""de.rhab.helloworld.MainActivity"" android:theme=""@7F090040"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/urzip-#U03c0#U00c7#U00c7#U03c0#U00c7#U00c7#U73b0#U4ee3#U6c49#U8bed#U901a#U7528#U5b57-#U0431#U044a#U043b#U0433#U0430#U0440#U0441#U043a#U0438-#U0639#U0631#U0628#U064a1234.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""100"" android:versionname=""0.1"" package=""info.guardianproject.urzip"" platformbuildversionc
     | ode=""18"" platformbuildversionname=""4.3.1-1425645"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""4"" android:targetsdkversion=""18"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:icon=""@7F020000"" android:label=""@7F040000"">
   5 |   <activity android:label=""@7F040000"" android:name=""info.guardianproject.urzip.MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |    <intent-filter>
  13 |     <action android:name=""android.intent.action.SEND"">
  14 |     </action>
  15 |     <action android:name=""android.intent.action.SENDTO"">
  16 |     </action>
  17 |     <action android:name=""android.intent.action.SEND_MULTIPLE"">
  18 |     </action>
  19 |     <category android:name=""android.intent.category.DEFAULT"">
  20 |     </category>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
  11 |  </uses-permission>
  12 |  <uses-permission android:name=""android.permission.INTERNET"">
  13 |  </uses-permission>
  14 |  <uses-permission-sdk-23 android:maxsdkversion=""27"" android:name=""android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATION
     | S"">
  15 |  </uses-permission-sdk-23>
  16 |  <uses-permission-sdk-23 android:name=""android.permission.REQUEST_INSTALL_PACKAGES"">
  17 |  </uses-permission-sdk-23>
  18 |  <uses-permission android:maxsdkversion=""18"" android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  19 |  </uses-permission>
> 20 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
  21 |   <activity android:label=""@7F040001"" android:name=""info.guardianproject.urzip.MainActivity"">
  22 |    <intent-filter>
  23 |     <action android:name=""android.intent.action.MAIN"">
  24 |     </action>
  25 |     <category android:name=""android.intent.category.LAUNCHER"">
  26 |     </category>
  27 |    </intent-filter>
  28 |    <intent-filter>
  29 |     <action android:name=""android.intent.action.SEND"">
  30 |     </action>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/a2dp.Vol_137.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
  30 |  <uses-permission android:name=""android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"">
  31 |  </uses-permission>
  32 |  <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  33 |  </uses-permission>
  34 |  <uses-permission android:name=""android.permission.READ_PHONE_STATE"">
  35 |  </uses-permission>
  36 |  <uses-permission android:name=""android.permission.BROADCAST_STICKY"">
  37 |  </uses-permission>
  38 |  <uses-permission android:name=""android.permission.GET_ACCOUNTS"">
  39 |  </uses-permission>
> 40 |  <application android:allowbackup=""true"" android:description=""@7F070058"" android:icon=""@7F020002"" android:label=""@7F0700
     | 5D"" android:name=""a2dp.Vol.MyApplication"" android:persistent=""true"">
  41 |   <activity android:description=""@7F070058"" android:icon=""@7F020003"" android:label=""@7F07005D"" android:launchmode=""1"" an
     | droid:multiprocess=""false"" android:name=""a2dp.Vol.main"">
  42 |    <intent-filter>
  43 |     <action android:name=""android.intent.action.MAIN"">
  44 |     </action>
  45 |     <category android:name=""android.intent.category.LAUNCHER"">
  46 |     </category>
  47 |    </intent-filter>
  48 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/partialsignature.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
  30 |  <uses-permission android:name=""android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"">
  31 |  </uses-permission>
  32 |  <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  33 |  </uses-permission>
  34 |  <uses-permission android:name=""android.permission.READ_PHONE_STATE"">
  35 |  </uses-permission>
  36 |  <uses-permission android:name=""android.permission.BROADCAST_STICKY"">
  37 |  </uses-permission>
  38 |  <uses-permission android:name=""android.permission.GET_ACCOUNTS"">
  39 |  </uses-permission>
> 40 |  <application android:allowbackup=""true"" android:description=""@7F070058"" android:icon=""@7F020002"" android:label=""@7F0700
     | 5D"" android:name=""a2dp.Vol.MyApplication"" android:persistent=""true"">
  41 |   <activity android:description=""@7F070058"" android:icon=""@7F020003"" android:label=""@7F07005D"" android:launchmode=""1"" an
     | droid:multiprocess=""false"" android:name=""a2dp.Vol.main"">
  42 |    <intent-filter>
  43 |     <action android:name=""android.intent.action.MAIN"">
  44 |     </action>
  45 |     <category android:name=""android.intent.category.LAUNCHER"">
  46 |     </category>
  47 |    </intent-filter>
  48 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
    1 | <manifest android:installlocation=""0"" android:versioncode=""35"" android:versionname=""1.0.4 [BETA]"" package=""com.teleca.ja
      | mendo"" xmlns:android=""http://schemas.android.com/apk/res/android"">
>   2 |  <application android:icon=""@7F020016"" android:label=""@7F090002"" android:name=""JamendoApplication"">
    3 |   <activity android:label=""@7F090002"" android:name="".activity.HomeActivity"">
    4 |    <intent-filter>
    5 |     <action android:name=""android.intent.action.VIEW"">
    6 |     </action>
    7 |     <category android:name=""android.intent.category.DEFAULT"">
    8 |     </category>
    9 |    </intent-filter>
   10 |   </activity>
   11 |   <activity android:label=""@7F090006"" android:name="".activity.AlbumActivity"">
   12 |    <intent-filter>
   13 |     <action android:name=""android.intent.action.VIEW"">
   14 |     </action>
   15 |     <category android:name=""android.intent.category.DEFAULT"">
   16 |     </category>
   17 |    </intent-filter>
   18 |   </activity>
   19 |   <activity android:label=""@7F090003"" android:launchmode=""1"" android:name="".activity.PlayerActivity"">
   20 |    <intent-filter>
      ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/targetSandboxVersion-2.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:targetsandboxversion=""2"" android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecuri
     | ty.cts.tinyapp"" platformbuildversioncode=""26"" platformbuildversionname=""8.0.0"" xmlns:android=""http://schemas.android.com
     | /apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""18"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/unsigned-targetSandboxVersion-2.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:targetsandboxversion=""2"" android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecuri
     | ty.cts.tinyapp"" platformbuildversioncode=""26"" platformbuildversionname=""8.0.0"" xmlns:android=""http://schemas.android.com
     | /apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""18"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-targetSandboxVersion-2.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:targetsandboxversion=""2"" android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecuri
     | ty.cts.tinyapp"" platformbuildversioncode=""26"" platformbuildversionname=""8.0.0"" xmlns:android=""http://schemas.android.com
     | /apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""18"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-2.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:targetsandboxversion=""2"" android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecuri
     | ty.cts.tinyapp"" platformbuildversioncode=""26"" platformbuildversionname=""8.0.0"" xmlns:android=""http://schemas.android.com
     | /apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""18"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-targetSandboxVersion-3.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:targetsandboxversion=""3"" android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecuri
     | ty.cts.tinyapp"" platformbuildversioncode=""26"" platformbuildversionname=""8.0.0"" xmlns:android=""http://schemas.android.com
     | /apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""28"" android:targetsdkversion=""33"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/axml/AndroidManifest_ShortName.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.android.galaxy4"" platformbuildversioncode=""14""
     | platformbuildversionname=""4.0.1-202351"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""14"" android:targetsdkversion=""14"">
   3 |  </uses-sdk>
   4 |  <uses-feature android:name=""android.software.live_wallpaper"">
   5 |  </uses-feature>
>  6 |  <application android:icon=""@7F020003"" android:label=""@7F060000"">
   7 |   <activity android:label=""@7F060000"" android:launchmode=""3"" android:name="".Galaxy4"" android:theme=""@android:01030006"">
   8 |    <intent-filter>
   9 |     <action android:name=""android.intent.action.MAIN"">
  10 |     </action>
  11 |    </intent-filter>
  12 |   </activity>
  13 |   <service android:label=""@7F060000"" android:name="".Galaxy4Wallpaper"" android:permission=""android.permission.BIND_WALLPA
     | PER"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.service.wallpaper.WallpaperService"">
  16 |     </action>
  17 |    </intent-filter>
  18 |    <meta-data android:name=""android.service.wallpaper"" android:resource=""@7F040000"">
  19 |    </meta-data>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/android/TC/bin/TC-debug.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.TC"" xmlns:android=""http://schem
     | as.android.com/apk/res/android"">
>  2 |  <application android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040000"">
   3 |   <activity android:label=""@7F040000"" android:name=""TCActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/android/TCDiff/bin/TCDiff-debug.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.TCDiff"" xmlns:android=""http://s
     | chemas.android.com/apk/res/android"">
>  2 |  <application android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040000"">
   3 |   <activity android:label=""@7F040000"" android:name=""TCActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/dalvik/test/bin/Test-debug-unaligned.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.test"" xmlns:android=""http://sch
     | emas.android.com/apk/res/android"">
>  2 |  <application android:label=""@7F030000"">
   3 |   <activity android:label=""@7F030000"" android:name="".TestActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/dalvik/test/bin/Test-debug.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""org.t0t0.androguard.test"" xmlns:android=""http://sch
     | emas.android.com/apk/res/android"">
>  2 |  <application android:label=""@7F030000"">
   3 |   <activity android:label=""@7F030000"" android:name="".TestActivity"">
   4 |    <intent-filter>
   5 |     <action android:name=""android.intent.action.MAIN"">
   6 |     </action>
   7 |     <category android:name=""android.intent.category.LAUNCHER"">
   8 |     </category>
   9 |    </intent-filter>
  10 |   </activity>
  11 |  </application>
  12 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/android/Invalid/Invalid.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""re.androguard.android.invalid"" xmlns:android=""http:
     | //schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""8"" android:targetsdkversion=""15"">
   3 |  </uses-sdk>
>  4 |  <application android:debuggable=""true"" android:icon=""@7F020001"" android:label=""@7F050000"" android:theme=""@7F060000"">
   5 |   <activity android:label=""@7F050003"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sf.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-sha1-sha256-manifest-and-sha1-sf.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""17"" platformbuildversionname=""4.2-526865"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-content-type.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-missing-digest.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-multiple-good-digests.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-content-type.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-digest.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-order.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs-wrong-signature.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-signed-attrs.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-in.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v1-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v1v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v1v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v1v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-aligned-v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-in.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v1-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v1v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-legacy-aligned-v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-1-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-18-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-rsa-minSdkVersion-24-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-rsa-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-in.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v1-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v1v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v1v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v2-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v2v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v2v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v3-lineage-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/golden-unaligned-v3-out.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/mismatched-compression-method.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/original.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/two-signers-second-signer-v2-broken.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/two-signers.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-max-sized-eocd-comment.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-pkcs7-cert-bag-first-cert-not-used.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-two-signers.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-cr-in-entry-name.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha1-1.2.840.10040.4.3-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-1.2.840.10040.4.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-1.2.840.10040.4.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha384-2.16.840.1.101.3.4.3.3-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-dsa-sha512-2.16.840.1.101.3.4.3.4-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-lf-in-entry-name.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-nul-in-entry-name.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-1024-cert-not-der2.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers-no-sig-block.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v1v2v3-with-rsa-2048-lineage-3-signers.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-apk-sig-block-size-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-cert-and-public-key-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-max-sized-eocd-comment.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-missing-classes.dex.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-no-certs-in-sig.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-signatures-and-digests-block-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-sig.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-two-signers-second-signer-no-supported-sig.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-two-signers.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-unknown-additional-attr.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-unknown-pair-in-apk-sig-block.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-dsa-sha256-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha256-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ecdsa-sha512-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-ignorable-unsupported-sig-algs.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024-cert-not-der.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha256-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pkcs1-sha512-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha256-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-with-rsa-pss-sha512-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-only-wrong-apk-sig-block-magic.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-stripped-with-ignorable-signing-schemes.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2-stripped.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2v3-signed-v3-block-stripped.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v2v3-unknown-additional-attr.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-cert-and-public-key-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-no-certs-in-sig.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-no-supported-sig-algs.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-signatures-and-digests-block-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-unknown-additional-attr.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-unknown-pair-in-apk-sig-block.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072-digest-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-dsa-sha256-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha256-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p256.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ecdsa-sha512-p521.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-ignorable-unsupported-sig-algs.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha256-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-1024.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-16384.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-2048.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-3072.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-4096.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-only-with-rsa-pkcs1-sha512-8192.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/v3-stripped.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/weird-compression-method.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""23"">
   3 |  </uses-sdk>
>  4 |  <application android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/debuggable-resource.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""7"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:debuggable=""@7F030000"" android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/signing/apksig/debuggable-boolean.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""10"" android:versionname=""1.0"" package=""android.appsecurity.cts.tinyapp"" platformbuildvers
     | ioncode=""23"" platformbuildversionname=""6.0-2166767"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""7"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:debuggable=""true"" android:label=""@7F020000"">
   5 |   <activity android:label=""@7F020000"" android:name="".MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.politedroid_4.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
   1 | <manifest android:versioncode=""4"" android:versionname=""1.3"" package=""com.politedroid"" xmlns:android=""http://schemas.andr
     | oid.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.READ_CALENDAR"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"">
   7 |  </uses-permission>
>  8 |  <application android:icon=""@7F020000"" android:label=""@7F050000"" android:name="".PoliteDroid"">
   9 |   <activity android:label=""@7F050000"" android:name="".Preferences"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
  17 |   <receiver android:name="".Update"">
  18 |    <intent-filter>
  19 |     <action android:name=""android.intent.action.BOOT_COMPLETED"">
  20 |     </action>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),"application.android:allowBackup is enabled by default
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default
","
  1615 |  <permission android:name=""android.permission.WRITE_BLOCKED_NUMBERS"" android:protectionlevel=""0x00000002"">
  1616 |  </permission>
  1617 |  <permission android:name=""android.permission.BIND_VR_LISTENER_SERVICE"" android:protectionlevel=""0x00000002"">
  1618 |  </permission>
  1619 |  <permission android:name=""android.permission.ACCESS_VR_MANAGER"" android:protectionlevel=""0x00000002"">
  1620 |  </permission>
  1621 |  <permission android:name=""android.permission.UPDATE_LOCK_TASK_PACKAGES"" android:protectionlevel=""0x00000802"">
  1622 |  </permission>
  1623 |  <permission android:name=""android.permission.SUBSTITUTE_NOTIFICATION_APP_NAME"" android:protectionlevel=""0x00000012"">
  1624 |  </permission>
> 1625 |  <application android:allowclearuserdata=""false"" android:backupagent=""com.android.server.backup.SystemBackupAgent"" andro
       | id:defaulttodeviceprotectedstorage=""true"" android:directbootaware=""true"" android:hascode=""false"" android:icon=""@android:
       | 0108036D"" android:killafterrestore=""false"" android:label=""@android:010401BD"" android:persistent=""true"" android:process=""
       | system"" android:supportsrtl=""true"" android:theme=""@android:0103013F"">
  1626 |   <activity android:configchanges=""0x00000DB0"" android:documentlaunchmode=""3"" android:excludefromrecents=""true"" android:
       | finishonclosesystemdialogs=""true"" android:name=""com.android.internal.app.ChooserActivity"" android:process="":ui"" android:
       | relinquishtaskidentity=""true"" android:theme=""@android:01030498"">
  1627 |    <intent-filter>
  1628 |     <action android:name=""android.intent.action.CHOOSER"">
  1629 |     </action>
  1630 |     <category android:name=""android.intent.category.DEFAULT"">
       ^ Col 0
",__init__._apk_backups_enabled
