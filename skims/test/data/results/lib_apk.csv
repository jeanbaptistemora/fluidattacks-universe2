finding,kind,what,where,cwe,stream,title,description,snippet,method
F046,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.android.example.text.styling.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.test.intent_filter.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/hello-world.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope LIBRARY_GROUP;
   7 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   8 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   9 |
  10 |     static RestrictTo$Scope()
  11 |     {
  12 |         android.support.annotation.RestrictTo$Scope.LIBRARY = new android.support.annotation.RestrictTo$Scope(""LIBRARY"",
     |  0);
  13 |         android.support.annotation.RestrictTo$Scope.LIBRARY_GROUP = new android.support.annotation.RestrictTo$Scope(""LIB
     | RARY_GROUP"", 1);
  14 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 2);
  15 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 3);
  16 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 4);
  17 |         android.support.annotation.RestrictTo$Scope[] v0_8 = new android.support.annotation.RestrictTo$Scope[5];
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/partialsignature.apk (namespace),android/support/annotation/RestrictTo$Scope is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/annotation/RestrictTo$Scope is not obfuscated,"
>  1 | package android.support.annotation;
   2 | public final enum class RestrictTo$Scope extends java.lang.Enum {
   3 |     private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
   4 |     public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
   5 |     public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
   6 |     public static final enum android.support.annotation.RestrictTo$Scope TESTS;
   7 |
   8 |     static RestrictTo$Scope()
   9 |     {
  10 |         android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope(""GROUP_ID
     | "", 0);
  11 |         android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope(""TESTS"", 1);
  12 |         android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope(""SUBCLA
     | SSES"", 2);
  13 |         android.support.annotation.RestrictTo$Scope[] v0_3 = new android.support.annotation.RestrictTo$Scope[3];
  14 |         v0_3[0] = android.support.annotation.RestrictTo$Scope.GROUP_ID;
  15 |         v0_3[1] = android.support.annotation.RestrictTo$Scope.TESTS;
  16 |         v0_3[2] = android.support.annotation.RestrictTo$Scope.SUBCLASSES;
  17 |         android.support.annotation.RestrictTo$Scope.$VALUES = v0_3;
  18 |         return;
  19 |     }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),android/support/compat/R$attr is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/compat/R$attr is not obfuscated,"
>  1 | package android.support.compat;
   2 | public final class R$attr {
   3 |     public static final int font = 2130968643;
   4 |     public static final int fontProviderAuthority = 2130968644;
   5 |     public static final int fontProviderCerts = 2130968645;
   6 |     public static final int fontProviderFetchStrategy = 2130968646;
   7 |     public static final int fontProviderFetchTimeout = 2130968647;
   8 |     public static final int fontProviderPackage = 2130968648;
   9 |     public static final int fontProviderQuery = 2130968649;
  10 |     public static final int fontStyle = 2130968650;
  11 |     public static final int fontWeight = 2130968651;
  12 |
  13 |     public R$attr()
  14 |     {
  15 |         return;
  16 |     }
  17 | }
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F046,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),android/support/v4/app/INotificationSideChannel$Stub$Proxy is not obfuscated,1269,"home,apk,bytecodes",046. Missing secure obfuscation - APK,android/support/v4/app/INotificationSideChannel$Stub$Proxy is not obfuscated,"
>  1 | package android.support.v4.app;
   2 |  class INotificationSideChannel$Stub$Proxy implements android.support.v4.app.INotificationSideChannel {
   3 |     private android.os.IBinder mRemote;
   4 |
   5 |     INotificationSideChannel$Stub$Proxy(android.os.IBinder p1)
   6 |     {
   7 |         this.mRemote = p1;
   8 |         return;
   9 |     }
  10 |
  11 |     public android.os.IBinder asBinder()
  12 |     {
  13 |         return this.mRemote;
  14 |     }
  15 |
  16 |     public void cancel(String p6, int p7, String p8)
  17 |     {
  18 |         android.os.Parcel v0 = android.os.Parcel.obtain();
  19 |         try {
  20 |             v0.writeInterfaceToken(""android.support.v4.app.INotificationSideChannel"");
  21 |             v0.writeString(p6);
     ^ Col 0
",analyze_bytecodes._no_obfuscation
F048,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('../product/skims/test/data/lib_apk/has_frida.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['$$triggerInterfaceInit', '<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToX
     | YZ', 'S_ISREG', 'XYZToColor', 'XYZToLAB', 'abandon', 'abbreviate', 'abort', 'abortAnimatedScroll', 'abortAnimation', 'ab
     | ortCaptures', 'abortCreation', 'abortImageCaptureRequests', 'aboutToAcquire', 'aboveAll', 'aboveValue', 'abs', 'absent',
     |  'absorbGlows', 'accept', 'acceptMatch', 'access$000', 'access$001', 'access$100', 'access$1000', 'access$10000', 'acces
     | s$101', 'access$10100', 'access$102', 'access$10200', 'access$10300', 'access$10400', 'access$10500', 'access$10600', 'a
     | ccess$10700', 'access$10800', 'access$10900', 'access$1100', 'access$11000', 'access$11100', 'access$11200', 'access$113
     | 00', 'access$11400', 'access$11500', 'access$11600', 'access$11700', 'access$11800', 'access$11900', 'access$1200', 'acc
     | ess$12000', 'access$12100', 'access$12200', 'access$12300', 'access$12400', 'access$12500', 'access$12600', 'access$1270
     | 0', 'access$12800', 'access$12900', 'access$1300', 'access$13000', 'access$13100', 'access$13200', 'access$13300', 'acce
     | ss$13400', 'access$13500', 'access$13600', 'access$13700', 'access$13800', 'access$13900', 'access$1400', 'access$14000'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('../product/skims/test/data/lib_apk/js_open.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'a', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'aboveOnStack', 'abs', 'absUrl', 'accept', '
     | acceptMatch', 'access$000', 'access$100', 'access$102', 'access$200', 'access$202', 'access$300', 'access$302', 'access$
     | 400', 'access$402', 'access$500', 'access$600', 'accumField', 'accumulateParents', 'acquire', 'acquireTempRect', 'action
     | BarOnMenuKeyEventPre28', 'activeStateChanged', 'activitySuperDispatchKeyEventPre28', 'add', 'addAccessibilityStateChange
     | Listener', 'addAction', 'addActions', 'addAddedFragments', 'addAll', 'addAnimation', 'addApi', 'addApiIfAvailable', 'add
     | Attributes', 'addBackStackState', 'addCategory', 'addChild', 'addChildren', 'addChildrenForAccessibility', 'addClass', '
     | addCommand', 'addCompatExtras', 'addConnectionCallbacks', 'addCustomAction', 'addDataResultToIntent', 'addDataScheme', '
     | addDrawerListener', 'addDurationItem', 'addEdge', 'addEditableKey', 'addElement', 'addEmailBcc', 'addEmailCc', 'addEmail
     | To', 'addEnforcedAttribute', 'addExtension', 'addExtras', 'addFirst', 'addFlags', 'addFocusables', 'addFontFromAssetMana
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('../product/skims/test/data/lib_apk/unsafe_delete.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'a', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'aboveOnStack', 'abs', 'absUrl', 'accept', '
     | acceptMatch', 'access$000', 'access$100', 'access$102', 'access$200', 'access$202', 'access$300', 'access$302', 'access$
     | 400', 'access$402', 'access$500', 'access$600', 'accumField', 'accumulateParents', 'acquire', 'acquireTempRect', 'action
     | BarOnMenuKeyEventPre28', 'activeStateChanged', 'activitySuperDispatchKeyEventPre28', 'add', 'addAccessibilityStateChange
     | Listener', 'addAction', 'addActions', 'addAddedFragments', 'addAll', 'addAnimation', 'addApi', 'addApiIfAvailable', 'add
     | Attributes', 'addBackStackState', 'addCategory', 'addChild', 'addChildren', 'addChildrenForAccessibility', 'addClass', '
     | addCommand', 'addCompatExtras', 'addConnectionCallbacks', 'addCustomAction', 'addDataResultToIntent', 'addDataScheme', '
     | addDrawerListener', 'addDurationItem', 'addEdge', 'addEditableKey', 'addElement', 'addEmailBcc', 'addEmailCc', 'addEmail
     | To', 'addEnforcedAttribute', 'addExtension', 'addExtras', 'addFirst', 'addFlags', 'addFocusables', 'addFontFromAssetMana
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.android.example.text.styling.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.android.example.text.styling.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'accept', 'acceptMatch', 'access$000', 'ac
     | cess$001', 'access$002', 'access$100', 'access$101', 'access$102', 'access$200', 'access$202', 'access$300', 'access$301
     | ', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'acce
     | ss$702', 'access$800', 'access$802', 'accumField', 'acos', 'acquire', 'acquireSolverVariable', 'actionFormatChanged', 'a
     | dd', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'a
     | ddAll', 'addAnchors', 'addAnimation', 'addBackStackState', 'addCategory', 'addCentering', 'addChain', 'addChild', 'addCh
     | ildrenForAccessibility', 'addChildrenForExpandedActionView', 'addChildrenToSolver', 'addCircle', 'addClientEquation', 'a
     | ddColorStateListToCache', 'addCommand', 'addCompatExtras', 'addConstraint', 'addContentView', 'addCustomViewsWithGravity
     | ', 'addDataResultToIntent', 'addDelegate', 'addDrawableToCache', 'addDrawerListener', 'addDurationItem', 'addEmailBcc',
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.tvleanback.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abortUnlessCommitted', 'abs', 'absoluteValue', '
     | absorbGlows', 'accept', 'acceptMatch', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$10
     | 02', 'access$101', 'access$102', 'access$108', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$1302'
     | , 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000',
     |  'access$202', 'access$2100', 'access$2200', 'access$2300', 'access$2400', 'access$2500', 'access$2600', 'access$2700',
     | 'access$2800', 'access$2900', 'access$300', 'access$301', 'access$302', 'access$400', 'access$402', 'access$500', 'acces
     | s$502', 'access$600', 'access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902',
     | 'accumField', 'acos', 'acquire', 'acquireSession', 'acquireTile', 'actionFormatChanged', 'adapterPosition', 'add', 'addA
     | ccessibilityStateChangeListener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAdUri', 'addAddedFragments',
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.example.android.wearable.wear.weardrawers.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
     | ccess$000', 'access$002', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'acces
     | s$1200', 'access$1202', 'access$1300', 'access$1302', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'acces
     | s$1600', 'access$1700', 'access$1800', 'access$1900', 'access$200', 'access$2000', 'access$201', 'access$202', 'access$2
     | 100', 'access$2200', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', '
     | access$602', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', '
     | acquire', 'acquireTile', 'activateComplications', 'adapterChanged', 'add', 'addAccessibilityStateChangeListener', 'addAc
     | tion', 'addActions', 'addAdapter', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation',
     | 'addApi', 'addApiIfAvailable', 'addBackStackState', 'addCallback', 'addCapabilityListener', 'addCategory', 'addChangePay
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.politedroid_4.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.politedroid_4.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'a', 'add', 'addPreferencesFromResource', 'append', 'appendId', 'asList', 'b', 'build', 'buildUpo
     | n', 'callChangeListener', 'cancel', 'close', 'commit', 'currentTimeMillis', 'edit', 'equals', 'finalize', 'forName', 'ge
     | t', 'getApplicationContext', 'getBoolean', 'getBooleanExtra', 'getBroadcast', 'getColumnIndex', 'getContentResolver', 'g
     | etContext', 'getCount', 'getDefaultSharedPreferences', 'getEntries', 'getEntryValues', 'getField', 'getInstance', 'getIn
     | t', 'getLong', 'getPreferenceScreen', 'getResources', 'getRingerMode', 'getSharedPreferences', 'getString', 'getStringAr
     | ray', 'getSystemService', 'getTimeInMillis', 'getValue', 'hasNext', 'iterator', 'length', 'longValue', 'min', 'moveToNex
     | t', 'next', 'onClick', 'onCreate', 'onDialogClosed', 'onPause', 'onPrepareDialogBuilder', 'onReceive', 'onResume', 'onSh
     | aredPreferenceChanged', 'parse', 'parseInt', 'putBoolean', 'putExtra', 'putInt', 'query', 'registerOnSharedPreferenceCha
     | ngeListener', 'sendBroadcast', 'set', 'setEntries', 'setEntryValues', 'setInexactRepeating', 'setMultiChoiceItems', 'set
     | RingerMode', 'setTimeInMillis', 'setValue', 'size', 'split', 'startsWith', 'substring', 'toString', 'trim', 'unregisterO
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.teleca.jamendo_35.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'access$000', 'access$100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$12
     | 00', 'access$1300', 'access$1400', 'access$1500', 'access$1600', 'access$1700', 'access$1800', 'access$1900', 'access$20
     | 0', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', 'access$500', 'access$502', 'ac
     | cess$600', 'access$602', 'access$608', 'access$700', 'access$702', 'access$800', 'access$900', 'acquire', 'add', 'addAll
     | ', 'addOnClick', 'addOnGesturePerformedListener', 'addPlaylistEntry', 'addPreferencesFromResource', 'addRadioToRecent',
     | 'addSection', 'addTab', 'addToDownloadQueue', 'addToFavorites', 'addToLibrary', 'addToPlaylist', 'addTrack', 'addTracks'
     | , 'albumClickHandler', 'albumSearch', 'animateClose', 'animateToggle', 'append', 'artistClickHandler', 'asList', 'build'
     | , 'calculateOrder', 'cancel', 'cleanUp', 'clear', 'clone', 'close', 'commit', 'compare', 'connect', 'construct', 'contai
     | ns', 'containsKey', 'convertStreamToString', 'create', 'createBitmap', 'createChooser', 'createFromResource', 'createPla
     | ylist', 'createStringFromIds', 'createTables', 'createWifiLock', 'currentTimeMillis', 'd', 'decodeStream', 'deconstruct'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/com.test.intent_filter.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/com.test.intent_filter.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZToColo
     | r', 'XYZToLAB', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'abs', 'absorbGlows', 'accept', 'acceptMatch', 'a
     | ccess$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'access$102', 'access$1100', 'access$
     | 1200', 'access$1300', 'access$1400', 'access$200', 'access$201', 'access$202', 'access$300', 'access$302', 'access$400',
     |  'access$500', 'access$502', 'access$600', 'access$700', 'access$800', 'access$900', 'accumField', 'acos', 'acquire', 'a
     | cquireSolverVariable', 'acquireTempRect', 'acquireTile', 'actionBarOnMenuKeyEventPre28', 'actionFormatChanged', 'activeS
     | tateChanged', 'activitySuperDispatchKeyEventPre28', 'actualDraw', 'actualIsOpaque', 'add', 'addAccessibilityStateChangeL
     | istener', 'addAction', 'addActionBarHideOffset', 'addActions', 'addAddedFragments', 'addAll', 'addAllInternal', 'addAnch
     | ors', 'addAnimatingView', 'addAnimation', 'addArc', 'addBackStackState', 'addCallback', 'addCategory', 'addCenterPoint',
     |  'addCentering', 'addChain', 'addChangePayload', 'addChild', 'addChildDrawingOrderCallback', 'addChildrenForAccessibilit
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/duplicate.permisssions_9999999.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'access$100', 'addObserver', 'append', 'close', 'createDir', 'd', 'doInBackground', 'e', 'entries
     | ', 'execute', 'exists', 'getData', 'getFilesDir', 'getInputStream', 'getIntent', 'getName', 'getParentFile', 'getPath',
     | 'hasMoreElements', 'i', 'isDirectory', 'lastIndexOf', 'mkdirs', 'nextElement', 'notifyObservers', 'onCreate', 'onPostExe
     | cute', 'parseBoolean', 'read', 'setChanged', 'stripExtension', 'substring', 'toString', 'unzip', 'unzipEntry', 'unzipWeb
     | File', 'update', 'v', 'valueOf', 'write']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/hello-world.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/hello-world.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'NodesToString', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'XYZ
     | ToColor', 'XYZToLAB', 'abandon', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'absorbGlows', 'accept', 'accept
     | Match', 'acceptNestedScroll', 'access$000', 'access$001', 'access$002', 'access$100', 'access$1000', 'access$101', 'acce
     | ss$102', 'access$1102', 'access$1200', 'access$1300', 'access$1400', 'access$200', 'access$202', 'access$300', 'access$3
     | 02', 'access$400', 'access$402', 'access$500', 'access$502', 'access$600', 'access$602', 'access$700', 'access$702', 'ac
     | cess$800', 'access$802', 'access$900', 'access$902', 'accumField', 'acos', 'acquire', 'acquireTempRect', 'acquireTile',
     | 'actionFormatChanged', 'activateNewButton', 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActionBarHide
     | Offset', 'addActions', 'addActionsToBuilder', 'addAll', 'addAllInternal', 'addAnimatingView', 'addAnimation', 'addBackSt
     | ackState', 'addBigPictureStyle', 'addBigStyleToBuilderJellybean', 'addBigStyleToBuilderLollipop', 'addBigTextStyle', 'ad
     | dCallback', 'addCategory', 'addChangePayload', 'addChild', 'addChildDrawingOrderCallback', 'addChildrenForAccessibility'
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/lineageos_nexus5_framework-res.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | []
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/multidex/multidex.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/multidex/multidex.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<init>', 'othermethod', 'println', 'somemethod']
     ^ Col 0
",analyze_bytecodes._no_root_check
F048,inputs,examples/tests/partialsignature.apk (namespace),Missing rooted device detection,250,"home,apk,bytecodes",048. Lack of root detection,Missing rooted device detection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('examples/tests/partialsignature.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 | ['<clinit>', '<init>', 'DoConnected', 'DoDisconnected', 'GetColumns', 'GetName', 'HSLToColor', 'LABToColor', 'LABToXYZ',
     |  'LoadPrefs', 'Locationbtn', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'Save', 'TextReader', 'XYZToColor', 'XYZToLAB', 'abando
     | n', 'abandonAudioFocus', 'abort', 'abortAnimation', 'abs', 'accept', 'acceptMatch', 'access$000', 'access$002', 'access$
     | 100', 'access$1000', 'access$1002', 'access$102', 'access$1100', 'access$1102', 'access$1200', 'access$1300', 'access$13
     | 02', 'access$1400', 'access$1402', 'access$1500', 'access$1502', 'access$1600', 'access$1602', 'access$1700', 'access$18
     | 00', 'access$1900', 'access$200', 'access$2000', 'access$202', 'access$300', 'access$302', 'access$400', 'access$402', '
     | access$500', 'access$600', 'access$700', 'access$702', 'access$800', 'access$802', 'access$900', 'accumField', 'acquire'
     | , 'add', 'addAccessibilityStateChangeListener', 'addAction', 'addActions', 'addActionsToBuilder', 'addAll', 'addAnimatio
     | n', 'addBackStackState', 'addBigPictureStyle', 'addBigTextStyle', 'addCategory', 'addChild', 'addChildrenForAccessibilit
     | y', 'addColumn', 'addCompatExtras', 'addCustomAction', 'addDrawerListener', 'addEditableKey', 'addEmailBcc', 'addEmailCc
     ^ Col 0
",analyze_bytecodes._no_root_check
F075,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),application.android:exported enabled,284,"home,apk,bytecodes",075. Unauthorized access to files - APK Content Provider,application.android:exported enabled,"
  51 |   <activity android:configchanges=""0x00002D80"" android:launchmode=""2"" android:name=""com.example.android.tvleanback.ui.Pl
     | aybackActivity"" android:resizeableactivity=""true"">
  52 |   </activity>
  53 |   <activity android:exported=""true"" android:name=""com.example.android.tvleanback.ui.VerticalGridActivity"" android:parent
     | activityname=""com.example.android.tvleanback.ui.MainActivity"" android:theme=""@7F0E0169"">
  54 |   </activity>
  55 |   <activity android:name=""com.example.android.tvleanback.ui.SearchActivity"">
  56 |   </activity>
  57 |   <activity android:name=""com.example.android.tvleanback.ui.GuidedStepActivity"" android:theme=""@7F0E015E"">
  58 |   </activity>
> 59 |   <provider android:authorities=""com.example.android.tvleanback"" android:exported=""true"" android:name=""com.example.andro
     | id.tvleanback.data.VideoProvider"">
  60 |    <path-permission android:pathprefix=""/search"" android:readpermission=""android.permission.GLOBAL_SEARCH"">
  61 |    </path-permission>
  62 |   </provider>
  63 |   <receiver android:enabled=""true"" android:exported=""false"" android:name=""com.example.android.tvleanback.recommendation.
     | RecommendationReceiver"">
  64 |    <intent-filter>
  65 |     <action android:name=""android.intent.action.BOOT_COMPLETED"">
  66 |     </action>
  67 |    </intent-filter>
     ^ Col 0
",__init__._apk_exported_cp
F075,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),application.android:grantUriPermissions enabled,284,"home,apk,bytecodes",075. Unauthorized access to files - APK Content Provider,application.android:grantUriPermissions enabled,"
  1644 |   <activity android:configchanges=""0x000000A0"" android:name=""com.android.internal.app.PlatLogoActivity"" android:process=
       | "":ui"" android:theme=""@android:01030060"">
  1645 |   </activity>
  1646 |   <activity android:excludefromrecents=""true"" android:name=""com.android.internal.app.DisableCarModeActivity"" android:pro
       | cess="":ui"" android:theme=""@android:01030055"">
  1647 |   </activity>
  1648 |   <activity android:excludefromrecents=""true"" android:finishonclosesystemdialogs=""true"" android:label=""@android:0104043E
       | "" android:name=""com.android.internal.app.DumpHeapActivity"" android:nohistory=""true"" android:process="":ui"" android:theme=
       | ""@android:01030010"">
  1649 |   </activity>
> 1650 |   <provider android:authorities=""com.android.server.heapdump"" android:granturipermissions=""true"" android:multiprocess=""f
       | alse"" android:name=""com.android.server.am.DumpHeapProvider"" android:singleuser=""true"">
  1651 |   </provider>
  1652 |   <activity android:excludefromrecents=""true"" android:exported=""true"" android:label=""@android:0104051C"" android:name=""an
       | droid.accounts.ChooseAccountActivity"" android:process="":ui"" android:theme=""@android:01030132"">
  1653 |   </activity>
  1654 |   <activity android:excludefromrecents=""true"" android:exported=""true"" android:label=""@android:0104051C"" android:name=""an
       | droid.accounts.ChooseTypeAndAccountActivity"" android:process="":ui"" android:theme=""@android:01030132"">
  1655 |   </activity>
  1656 |   <activity android:excludefromrecents=""true"" android:label=""@android:0104051C"" android:name=""android.accounts.ChooseAcc
       | ountTypeActivity"" android:process="":ui"" android:theme=""@android:01030132"">
       ^ Col 0
",__init__._apk_exported_cp
F207,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),Missing pin-set(s),295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing pin-set(s),"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 | >>> # and version 4.9.3 of ""beautifulsoup4""
   6 | >>> from bs4 import BeautifulSoup
   7 |
   8 | >>> # This object represents the APK to analyze
   9 | >>> apk = APK('../product/skims/test/data/lib_apk/unsafe_delete.apk')
  10 |
  11 | >>> # Read and parse the Network Security Config manifest
  12 | >>> nsc = apk.get_file(""res/xml/network_security_config.xml"")
> 13 | >>> BeautifulSoup(nsc).find_all(""pin-set"")
  14 | []  # Empty list means no <pin-set> tags were defined
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('../product/skims/test/data/lib_apk/has_frida.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('../product/skims/test/data/lib_apk/js_open.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.android.example.text.styling.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.android.example.text.styling.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.example.android.tvleanback.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.example.android.wearable.wear.weardrawers.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.politedroid_4.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.politedroid_4.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.teleca.jamendo_35.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/com.test.intent_filter.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.test.intent_filter.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/duplicate.permisssions_9999999.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/hello-world.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/hello-world.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/lineageos_nexus5_framework-res.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/multidex/multidex.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/multidex/multidex.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F207,inputs,examples/tests/partialsignature.apk (namespace),Missing res/xml/network_security_config.xml,295,"home,apk,bytecodes",207. Security controls bypass or absence - SSLPinning,Missing res/xml/network_security_config.xml,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/partialsignature.apk')
   8 |
   9 | >>> # List all files in the APK
  10 | >>> apk_files = apk.zip.nameslist()
> 11 | >>> ""res/xml/network_security_config.xml"" in apk_files
  12 | False  # No network security config exists
     ^ Col 0
",analyze_bytecodes._no_certs_pinning
F206,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),The APK has Frida gadget embedded.,295,"home,apk,bytecodes",206. Security controls bypass or absence - Anti hooking,The APK has Frida gadget embedded.,"
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> apk_obj, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/has_frida.apk')
   9 |
  10 | >>> # Get the files attribute
  11 | >>> apk_obj.get_files()
  12 | # No method performs root detection
> 13 | >>> ['res/drawable-v23/abc_control_background_material.xml', 'res/layout-v26/abc_screen_toolbar.xml', 'res/drawable-ldrt
     | l-mdpi/abc_spinner_mtrl_am_alpha.9.png', 'res/drawable-ldrtl-mdpi/abc_ic_menu_cut_mtrl_alpha.png', 'res/drawable-ldrtl-m
     | dpi/abc_ic_menu_copy_mtrl_am_alpha.png', 'res/layout-v22/abc_alert_dialog_button_bar_material.xml', 'res/color/switch_th
     | umb_material_dark.xml', 'res/color/abc_tint_btn_checkable.xml', 'res/color/abc_primary_text_material_light.xml', 'res/co
     | lor/switch_thumb_material_light.xml', 'res/color/abc_hint_foreground_material_light.xml', 'res/color/abc_hint_foreground
     | _material_dark.xml', 'res/color/abc_tint_edittext.xml', 'res/color/abc_primary_text_material_dark.xml', 'res/color/abc_b
     | tn_colored_borderless_text_material.xml', 'res/color/abc_secondary_text_material_dark.xml', 'res/color/abc_btn_colored_t
     | ext_material.xml', 'res/color/abc_secondary_text_material_light.xml', 'res/color/abc_background_cache_hint_selector_mate
     | rial_light.xml', 'res/color/abc_primary_text_disable_only_material_dark.xml', 'res/color/abc_search_url_text.xml', 'res/
     | color/abc_tint_spinner.xml', 'res/color/abc_primary_text_disable_only_material_light.xml', 'res/color/abc_tint_default.x
     | ml', 'res/color/abc_tint_switch_track.xml', 'res/color/abc_background_cache_hint_selector_material_dark.xml', 'res/color
     ^ Col 0
",analyze_bytecodes._has_frida
F103,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('../product/skims/test/data/lib_apk/has_frida.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/tests/com.test.intent_filter.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/com.test.intent_filter.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F103,inputs,examples/tests/multidex/multidex.apk (namespace),Not signed,325,"home,apk,bytecodes",103. Insufficient data authenticity validation - APK signing,Not signed,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.core.bytecodes.apk import APK
   5 |
   6 | >>> # This object represents the APK to analyze
   7 | >>> apk = APK('examples/tests/multidex/multidex.apk')
   8 |
   9 | >>> # Check the META-INF/ folder and retrieve signature pairs
  10 | >>> # with extensions: .DSA & .DF, .EC & .DF, or .RSA & .DF
  11 | >>> apk.get_signature_names()
> 12 | []  # Empty list means no signatures exist
     ^ Col 0
",analyze_bytecodes._apk_unsigned
F082,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),The given APK uses insecure delete of data.,459,"home,apk,bytecodes",082. Insecurely deleted files,The given APK uses insecure delete of data.,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse all Dalvik Executables (classes*.dex) in the APK
   7 | >>> dex = AnalyzeAPK('../product/skims/test/data/lib_apk/unsafe_delete.apk')[2]
   8 |
   9 | >>> # Get the method names from all classes in each .dex file
> 10 | >>> sorted(set(method.name for method in dex.get_methods()))
  11 | # No method performs root detection
  12 |  >>> ['<clinit>', '<init>', 'HSLToColor', 'LABToColor', 'LABToXYZ', 'RGBToHSL', 'RGBToLAB', 'RGBToXYZ', 'S_ISREG', 'XYZT
     | oColor', 'XYZToLAB', 'a', 'abandon', 'abort', 'abortAnimation', 'abortCreation', 'aboveOnStack', 'abs', 'absUrl', 'accep
     | t', 'acceptMatch', 'access$000', 'access$100', 'access$102', 'access$200', 'access$202', 'access$300', 'access$302', 'ac
     | cess$400', 'access$402', 'access$500', 'access$600', 'accumField', 'accumulateParents', 'acquire', 'acquireTempRect', 'a
     | ctionBarOnMenuKeyEventPre28', 'activeStateChanged', 'activitySuperDispatchKeyEventPre28', 'add', 'addAccessibilityStateC
     | hangeListener', 'addAction', 'addActions', 'addAddedFragments', 'addAll', 'addAnimation', 'addApi', 'addApiIfAvailable',
     |  'addAttributes', 'addBackStackState', 'addCategory', 'addChild', 'addChildren', 'addChildrenForAccessibility', 'addClas
     | s', 'addCommand', 'addCompatExtras', 'addConnectionCallbacks', 'addCustomAction', 'addDataResultToIntent', 'addDataSchem
     | e', 'addDrawerListener', 'addDurationItem', 'addEdge', 'addEditableKey', 'addElement', 'addEmailBcc', 'addEmailCc', 'add
     | EmailTo', 'addEnforcedAttribute', 'addExtension', 'addExtras', 'addFirst', 'addFlags', 'addFocusables', 'addFontFromAsse
     ^ Col 0
",analyze_bytecodes._uses_insecure_delete
F398,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),The application is vulnerable to Fragment Injection,470,"home,apk,bytecodes",398. Fragment Injection,The application is vulnerable to Fragment Injection,"
   1 | $ python3.8
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> apk_obj, dex, _ = AnalyzeAPK('examples/tests/com.teleca.jamendo_35.apk')
   9 |
> 10 | >>> # Get the targetSdkVersion attribute
  11 | >>> apk_obj.get_target_sdk_version()
  12 | >>> 8
  13 | >>> # Get the method names from all classes in each .dex file
  14 | >>> sorted(set(method.name for method in dex.get_methods()))
  15 | # No method performs root detection
  16 | >>> 'package com.teleca.jamendo.activity;\n class AlbumActivity$1 implements android.widget.AdapterView$OnItemSelectedLi
     | stener {\n    final synthetic com.teleca.jamendo.activity.AlbumActivity this$0;\n    final synthetic java.util.ArrayList
     |  val$langs;\n\n    AlbumActivity$1(com.teleca.jamendo.activity.AlbumActivity p1, java.util.ArrayList p2)\n    {\n
     |  this.this$0 = p1;\n        this.val$langs = p2;\n        return;\n    }\n\n    public void onItemSelected(android.widge
     | t.AdapterView p3, android.view.View p4, int p5, long p6)\n    {\n        com.teleca.jamendo.activity.AlbumActivity.acces
     | s$000(this.this$0).setLang(((String) this.val$langs.get(p5)));\n        return;\n    }\n\n    public void onNothingSelec
     ^ Col 0
",analyze_bytecodes._has_fragment_injection
F058,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.fluidattacks.integrates"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=
     | ""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.INTERNET"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:debuggable=""true"" android:icon=""@7F040016"" android:label=""@7F080000"" android:networksecurityconfig=""@7F0B0000"" androi
     | d:theme=""@android:0103006D"">
   9 |   <activity android:label=""@7F080000"" android:name=""com.fluidattacks.integrates.WebViewActivity"" android:windowsoftinput
     | mode=""0x00000002"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.fluidattacks.integrates"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=
     | ""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.INTERNET"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:debuggable=""true"" android:icon=""@7F040016"" android:label=""@7F080000"" android:theme=""@android:0103006D"">
   9 |   <activity android:label=""@7F080000"" android:name=""com.fluidattacks.integrates.WebViewActivity"" android:windowsoftinput
     | mode=""0x00000002"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
  17 |   <activity android:excludefromrecents=""true"" android:exported=""false"" android:name=""com.google.android.gms.auth.api.sig
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/com.android.example.text.styling.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.android.example.text.styling"" xmlns:android=""ht
     | tp://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0C0000"" android:label=""@7F0D001D"" an
     | droid:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7F0E0005"">
   5 |   <activity android:name=""com.android.example.text.styling.MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |   <meta-data android:name=""preloaded_fonts"" android:resource=""@7F020003"">
  14 |   </meta-data>
  15 |  </application>
  16 | </manifest>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.example.android.wearable.wear.weardrawers"" xmln
     | s:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
   4 |  <uses-feature android:name=""android.hardware.type.watch"">
   5 |  </uses-feature>
   6 |  <uses-permission android:name=""android.permission.WAKE_LOCK"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0F0000"" android:label=""@7F110003"" an
     | droid:supportsrtl=""true"" android:theme=""@android:01030128"">
   9 |   <meta-data android:name=""com.google.android.wearable.standalone"" android:value=""true"">
  10 |   </meta-data>
  11 |   <uses-library android:name=""com.google.android.wearable"" android:required=""false"">
  12 |   </uses-library>
  13 |   <activity android:label=""@7F110003"" android:name=""com.example.android.wearable.wear.weardrawers.MainActivity"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.intent.action.MAIN"">
  16 |     </action>
  17 |     <category android:name=""android.intent.category.LAUNCHER"">
  18 |     </category>
  19 |    </intent-filter>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
  11 |  </uses-permission>
  12 |  <uses-permission android:name=""android.permission.INTERNET"">
  13 |  </uses-permission>
  14 |  <uses-permission-sdk-23 android:maxsdkversion=""27"" android:name=""android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATION
     | S"">
  15 |  </uses-permission-sdk-23>
  16 |  <uses-permission-sdk-23 android:name=""android.permission.REQUEST_INSTALL_PACKAGES"">
  17 |  </uses-permission-sdk-23>
  18 |  <uses-permission android:maxsdkversion=""18"" android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  19 |  </uses-permission>
> 20 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
  21 |   <activity android:label=""@7F040001"" android:name=""info.guardianproject.urzip.MainActivity"">
  22 |    <intent-filter>
  23 |     <action android:name=""android.intent.action.MAIN"">
  24 |     </action>
  25 |     <category android:name=""android.intent.category.LAUNCHER"">
  26 |     </category>
  27 |    </intent-filter>
  28 |    <intent-filter>
  29 |     <action android:name=""android.intent.action.SEND"">
  30 |     </action>
     ^ Col 0
",__init__._apk_debugging_enabled
F058,inputs,examples/tests/com.example.android.tvleanback.apk (namespace),application.android:debuggable enabled,489,"home,apk,bytecodes",058. Debugging enabled in production - APK,application.android:debuggable enabled,"
  14 |  <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"">
  15 |  </uses-permission>
  16 |  <uses-permission android:name=""android.permission.RECORD_AUDIO"">
  17 |  </uses-permission>
  18 |  <uses-feature android:name=""android.hardware.microphone"" android:required=""false"">
  19 |  </uses-feature>
  20 |  <uses-feature android:name=""android.hardware.touchscreen"" android:required=""false"">
  21 |  </uses-feature>
  22 |  <uses-feature android:name=""android.software.leanback"" android:required=""true"">
  23 |  </uses-feature>
> 24 |  <application android:allowbackup=""false"" android:banner=""@7F070426"" android:debuggable=""true"" android:icon=""@7F070054""
     | android:label=""@7F0D001D"" android:logo=""@7F070426"" android:theme=""@7F0E0160"">
  25 |   <activity android:icon=""@7F070426"" android:label=""@7F0D001D"" android:logo=""@7F070426"" android:name=""com.example.androi
     | d.tvleanback.ui.MainActivity"" android:screenorientation=""0"" android:theme=""@7F0E0161"">
  26 |    <intent-filter>
  27 |     <action android:name=""android.intent.action.MAIN"">
  28 |     </action>
  29 |     <category android:name=""android.intent.category.LEANBACK_LAUNCHER"">
  30 |     </category>
  31 |    </intent-filter>
  32 |   </activity>
     ^ Col 0
",__init__._apk_debugging_enabled
F055,inputs,../product/skims/test/data/lib_apk/has_frida.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""23"" android:compilesdkversioncodename=""6.0-2438415"" package=""com.google.mediapipe.a
     | pps.handtrackinggpu"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=""http://schemas.android.co
     | m/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""21"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.CAMERA"">
   5 |  </uses-permission>
   6 |  <uses-feature android:name=""android.hardware.camera"">
   7 |  </uses-feature>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""androidx.core.app.CoreComponentFactory"" android:ic
     | on=""@7F0B0000"" android:label=""Hand Tracking"" android:roundicon=""@7F0B0002"" android:supportsrtl=""true"" android:theme=""@7F
     | 0D0005"">
   9 |   <activity android:exported=""true"" android:name=""com.google.mediapipe.apps.handtrackinggpu.MainActivity"" android:screen
     | orientation=""1"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.fluidattacks.integrates"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=
     | ""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.INTERNET"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:debuggable=""true"" android:icon=""@7F040016"" android:label=""@7F080000"" android:networksecurityconfig=""@7F0B0000"" androi
     | d:theme=""@android:0103006D"">
   9 |   <activity android:label=""@7F080000"" android:name=""com.fluidattacks.integrates.WebViewActivity"" android:windowsoftinput
     | mode=""0x00000002"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.fluidattacks.integrates"" platformbuildversioncode=""28"" platformbuildversionname=""9"" xmlns:android=
     | ""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.INTERNET"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:debuggable=""true"" android:icon=""@7F040016"" android:label=""@7F080000"" android:theme=""@android:0103006D"">
   9 |   <activity android:label=""@7F080000"" android:name=""com.fluidattacks.integrates.WebViewActivity"" android:windowsoftinput
     | mode=""0x00000002"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
  17 |   <activity android:excludefromrecents=""true"" android:exported=""false"" android:name=""com.google.android.gms.auth.api.sig
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.test.intent_filter.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:compilesdkversion=""28"" android:compilesdkversioncodename=""9"" android:versioncode=""1"" android:versionna
     | me=""1.0"" package=""com.test.intent_filter"" platformbuildversioncode=""1"" platformbuildversionname=""1.000000"" xmlns:android
     | =""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""19"" android:targetsdkversion=""28"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:appcomponentfactory=""android.support.v4.app.CoreComponentFactory"" andro
     | id:icon=""@7F0C0000"" android:label=""@7F0D0027"" android:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7
     | F0E0006"">
   5 |   <receiver android:enabled=""true"" android:exported=""false"" android:name=""com.test.intent_filter.TestReceiver"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.VIEW"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.DEFAULT"">
  10 |     </category>
  11 |     <category android:name=""android.intent.category.BROWSABLE"">
  12 |     </category>
  13 |     <data android:host=""@7F0D002F"" android:mimetype=""text/html"" android:path=""/testpath"" android:pathpattern=""testpatter
     | n"" android:port=""0301"" android:scheme=""@7F0D0036"">
  14 |     </data>
  15 |    </intent-filter>
  16 |   </receiver>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.android.example.text.styling.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.android.example.text.styling"" xmlns:android=""ht
     | tp://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""15"" android:targetsdkversion=""27"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0C0000"" android:label=""@7F0D001D"" an
     | droid:roundicon=""@7F0C0001"" android:supportsrtl=""true"" android:theme=""@7F0E0005"">
   5 |   <activity android:name=""com.android.example.text.styling.MainActivity"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |   <meta-data android:name=""preloaded_fonts"" android:resource=""@7F020003"">
  14 |   </meta-data>
  15 |  </application>
  16 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.example.android.wearable.wear.weardrawers.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""com.example.android.wearable.wear.weardrawers"" xmln
     | s:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""23"" android:targetsdkversion=""26"">
   3 |  </uses-sdk>
   4 |  <uses-feature android:name=""android.hardware.type.watch"">
   5 |  </uses-feature>
   6 |  <uses-permission android:name=""android.permission.WAKE_LOCK"">
   7 |  </uses-permission>
>  8 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F0F0000"" android:label=""@7F110003"" an
     | droid:supportsrtl=""true"" android:theme=""@android:01030128"">
   9 |   <meta-data android:name=""com.google.android.wearable.standalone"" android:value=""true"">
  10 |   </meta-data>
  11 |   <uses-library android:name=""com.google.android.wearable"" android:required=""false"">
  12 |   </uses-library>
  13 |   <activity android:label=""@7F110003"" android:name=""com.example.android.wearable.wear.weardrawers.MainActivity"">
  14 |    <intent-filter>
  15 |     <action android:name=""android.intent.action.MAIN"">
  16 |     </action>
  17 |     <category android:name=""android.intent.category.LAUNCHER"">
  18 |     </category>
  19 |    </intent-filter>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/hello-world.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
   1 | <manifest android:versioncode=""1"" android:versionname=""1.0"" package=""de.rhab.helloworld"" platformbuildversioncode=""25"" p
     | latformbuildversionname=""7.1.1"" xmlns:android=""http://schemas.android.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""21"" android:targetsdkversion=""25"">
   3 |  </uses-sdk>
>  4 |  <application android:allowbackup=""true"" android:icon=""@7F030000"" android:label=""@7F070022"" android:supportsrtl=""true"" a
     | ndroid:theme=""@7F0900A7"">
   5 |   <activity android:label=""@7F070022"" android:name=""de.rhab.helloworld.MainActivity"" android:theme=""@7F090040"">
   6 |    <intent-filter>
   7 |     <action android:name=""android.intent.action.MAIN"">
   8 |     </action>
   9 |     <category android:name=""android.intent.category.LAUNCHER"">
  10 |     </category>
  11 |    </intent-filter>
  12 |   </activity>
  13 |  </application>
  14 | </manifest>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/duplicate.permisssions_9999999.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
  11 |  </uses-permission>
  12 |  <uses-permission android:name=""android.permission.INTERNET"">
  13 |  </uses-permission>
  14 |  <uses-permission-sdk-23 android:maxsdkversion=""27"" android:name=""android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATION
     | S"">
  15 |  </uses-permission-sdk-23>
  16 |  <uses-permission-sdk-23 android:name=""android.permission.REQUEST_INSTALL_PACKAGES"">
  17 |  </uses-permission-sdk-23>
  18 |  <uses-permission android:maxsdkversion=""18"" android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  19 |  </uses-permission>
> 20 |  <application android:allowbackup=""true"" android:debuggable=""true"" android:icon=""@7F020000"" android:label=""@7F040001"">
  21 |   <activity android:label=""@7F040001"" android:name=""info.guardianproject.urzip.MainActivity"">
  22 |    <intent-filter>
  23 |     <action android:name=""android.intent.action.MAIN"">
  24 |     </action>
  25 |     <category android:name=""android.intent.category.LAUNCHER"">
  26 |     </category>
  27 |    </intent-filter>
  28 |    <intent-filter>
  29 |     <action android:name=""android.intent.action.SEND"">
  30 |     </action>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/partialsignature.apk (namespace),application.android:allowBackup enabled,530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,application.android:allowBackup enabled,"
  30 |  <uses-permission android:name=""android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"">
  31 |  </uses-permission>
  32 |  <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"">
  33 |  </uses-permission>
  34 |  <uses-permission android:name=""android.permission.READ_PHONE_STATE"">
  35 |  </uses-permission>
  36 |  <uses-permission android:name=""android.permission.BROADCAST_STICKY"">
  37 |  </uses-permission>
  38 |  <uses-permission android:name=""android.permission.GET_ACCOUNTS"">
  39 |  </uses-permission>
> 40 |  <application android:allowbackup=""true"" android:description=""@7F070058"" android:icon=""@7F020002"" android:label=""@7F0700
     | 5D"" android:name=""a2dp.Vol.MyApplication"" android:persistent=""true"">
  41 |   <activity android:description=""@7F070058"" android:icon=""@7F020003"" android:label=""@7F07005D"" android:launchmode=""1"" an
     | droid:multiprocess=""false"" android:name=""a2dp.Vol.main"">
  42 |    <intent-filter>
  43 |     <action android:name=""android.intent.action.MAIN"">
  44 |     </action>
  45 |     <category android:name=""android.intent.category.LAUNCHER"">
  46 |     </category>
  47 |    </intent-filter>
  48 |   </activity>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.teleca.jamendo_35.apk (namespace),"application.android:allowBackup is enabled by default unless its value is set to False.
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default unless its value is set to False.
","
    1 | <manifest android:installlocation=""0"" android:versioncode=""35"" android:versionname=""1.0.4 [BETA]"" package=""com.teleca.ja
      | mendo"" xmlns:android=""http://schemas.android.com/apk/res/android"">
>   2 |  <application android:icon=""@7F020016"" android:label=""@7F090002"" android:name=""JamendoApplication"">
    3 |   <activity android:label=""@7F090002"" android:name="".activity.HomeActivity"">
    4 |    <intent-filter>
    5 |     <action android:name=""android.intent.action.VIEW"">
    6 |     </action>
    7 |     <category android:name=""android.intent.category.DEFAULT"">
    8 |     </category>
    9 |    </intent-filter>
   10 |   </activity>
   11 |   <activity android:label=""@7F090006"" android:name="".activity.AlbumActivity"">
   12 |    <intent-filter>
   13 |     <action android:name=""android.intent.action.VIEW"">
   14 |     </action>
   15 |     <category android:name=""android.intent.category.DEFAULT"">
   16 |     </category>
   17 |    </intent-filter>
   18 |   </activity>
   19 |   <activity android:label=""@7F090003"" android:launchmode=""1"" android:name="".activity.PlayerActivity"">
   20 |    <intent-filter>
      ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/com.politedroid_4.apk (namespace),"application.android:allowBackup is enabled by default unless its value is set to False.
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default unless its value is set to False.
","
   1 | <manifest android:versioncode=""4"" android:versionname=""1.3"" package=""com.politedroid"" xmlns:android=""http://schemas.andr
     | oid.com/apk/res/android"">
   2 |  <uses-sdk android:minsdkversion=""3"">
   3 |  </uses-sdk>
   4 |  <uses-permission android:name=""android.permission.READ_CALENDAR"">
   5 |  </uses-permission>
   6 |  <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"">
   7 |  </uses-permission>
>  8 |  <application android:icon=""@7F020000"" android:label=""@7F050000"" android:name="".PoliteDroid"">
   9 |   <activity android:label=""@7F050000"" android:name="".Preferences"">
  10 |    <intent-filter>
  11 |     <action android:name=""android.intent.action.MAIN"">
  12 |     </action>
  13 |     <category android:name=""android.intent.category.LAUNCHER"">
  14 |     </category>
  15 |    </intent-filter>
  16 |   </activity>
  17 |   <receiver android:name="".Update"">
  18 |    <intent-filter>
  19 |     <action android:name=""android.intent.action.BOOT_COMPLETED"">
  20 |     </action>
     ^ Col 0
",__init__._apk_backups_enabled
F055,inputs,examples/tests/lineageos_nexus5_framework-res.apk (namespace),"application.android:allowBackup is enabled by default unless its value is set to False.
",530,"home,apk,bytecodes",055. Insecure service configuration - ADB Backups,"application.android:allowBackup is enabled by default unless its value is set to False.
","
  1615 |  <permission android:name=""android.permission.WRITE_BLOCKED_NUMBERS"" android:protectionlevel=""0x00000002"">
  1616 |  </permission>
  1617 |  <permission android:name=""android.permission.BIND_VR_LISTENER_SERVICE"" android:protectionlevel=""0x00000002"">
  1618 |  </permission>
  1619 |  <permission android:name=""android.permission.ACCESS_VR_MANAGER"" android:protectionlevel=""0x00000002"">
  1620 |  </permission>
  1621 |  <permission android:name=""android.permission.UPDATE_LOCK_TASK_PACKAGES"" android:protectionlevel=""0x00000802"">
  1622 |  </permission>
  1623 |  <permission android:name=""android.permission.SUBSTITUTE_NOTIFICATION_APP_NAME"" android:protectionlevel=""0x00000012"">
  1624 |  </permission>
> 1625 |  <application android:allowclearuserdata=""false"" android:backupagent=""com.android.server.backup.SystemBackupAgent"" andro
       | id:defaulttodeviceprotectedstorage=""true"" android:directbootaware=""true"" android:hascode=""false"" android:icon=""@android:
       | 0108036D"" android:killafterrestore=""false"" android:label=""@android:010401BD"" android:persistent=""true"" android:process=""
       | system"" android:supportsrtl=""true"" android:theme=""@android:0103013F"">
  1626 |   <activity android:configchanges=""0x00000DB0"" android:documentlaunchmode=""3"" android:excludefromrecents=""true"" android:
       | finishonclosesystemdialogs=""true"" android:name=""com.android.internal.app.ChooserActivity"" android:process="":ui"" android:
       | relinquishtaskidentity=""true"" android:theme=""@android:01030498"">
  1627 |    <intent-filter>
  1628 |     <action android:name=""android.intent.action.CHOOSER"">
  1629 |     </action>
  1630 |     <category android:name=""android.intent.category.DEFAULT"">
       ^ Col 0
",__init__._apk_backups_enabled
F268,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),The given APK has WebView that allows resource access.,749,"home,apk,bytecodes",268. Insecure service configuration - Webview,The given APK has WebView that allows resource access.,"
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> _, dex, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/js_open.apk')
   9 |
  10 | >>> # Get the method names from all classes in each .dex file
  11 | >>> sorted(set(method.name for method in dex.get_methods()))
> 12 | # No method performs root detection
  13 | >>> 'package android.arch.lifecycle;\ninterface ReportFragment$ActivityInitializationListener {\n\n    public abstract v
     | oid onCreate();\n\n    public abstract void onResume();\n\n    public abstract void onStart();\n}\npackage android.suppo
     | rt.v4.app;\nfinal class ActivityCompat$1 implements java.lang.Runnable {\n    final synthetic android.app.Activity val$a
     | ctivity;\n    final synthetic String[] val$permissions;\n    final synthetic int val$requestCode;\n\n    ActivityCompat$
     | 1(String[] p1, android.app.Activity p2, int p3)\n    {\n        this.val$permissions = p1;\n        this.val$activity =
     | p2;\n        this.val$requestCode = p3;\n        return;\n    }\n\n    public void run()\n    {\n        int[] v0_2 = ne
     | w int[this.val$permissions.length];\n        android.content.pm.PackageManager v1_1 = this.val$activity.getPackageManage
     | r();\n        String v2_1 = this.val$activity.getPackageName();\n        int v3_0 = this.val$permissions.length;\n
     |   android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback v4_0 = 0;\n        while (v4_0 < v3_0) {\n
     |          v0_2[v4_0] = v1_1.checkPermission(this.val$permissions[v4_0], v2_1);\n            v4_0++;\n        }\n        (
     ^ Col 0
",analyze_bytecodes._webview_vulnerabilities
F268,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),The given APK has WebView that allows resource access.,749,"home,apk,bytecodes",268. Insecure service configuration - Webview,The given APK has WebView that allows resource access.,"
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> _, dex, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/unsafe_delete.apk')
   9 |
  10 | >>> # Get the method names from all classes in each .dex file
  11 | >>> sorted(set(method.name for method in dex.get_methods()))
> 12 | # No method performs root detection
  13 | >>> 'package android.arch.lifecycle;\ninterface ReportFragment$ActivityInitializationListener {\n\n    public abstract v
     | oid onCreate();\n\n    public abstract void onResume();\n\n    public abstract void onStart();\n}\npackage android.suppo
     | rt.v4.app;\nfinal class ActivityCompat$1 implements java.lang.Runnable {\n    final synthetic android.app.Activity val$a
     | ctivity;\n    final synthetic String[] val$permissions;\n    final synthetic int val$requestCode;\n\n    ActivityCompat$
     | 1(String[] p1, android.app.Activity p2, int p3)\n    {\n        this.val$permissions = p1;\n        this.val$activity =
     | p2;\n        this.val$requestCode = p3;\n        return;\n    }\n\n    public void run()\n    {\n        int[] v0_2 = ne
     | w int[this.val$permissions.length];\n        android.content.pm.PackageManager v1_1 = this.val$activity.getPackageManage
     | r();\n        String v2_1 = this.val$activity.getPackageName();\n        int v3_0 = this.val$permissions.length;\n
     |   android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback v4_0 = 0;\n        while (v4_0 < v3_0) {\n
     |          v0_2[v4_0] = v1_1.checkPermission(this.val$permissions[v4_0], v2_1);\n            v4_0++;\n        }\n        (
     ^ Col 0
",analyze_bytecodes._webview_vulnerabilities
F268,inputs,../product/skims/test/data/lib_apk/js_open.apk (namespace),The given APK has WebView that caches JavaScript data and code.,749,"home,apk,bytecodes",268. Insecure service configuration - Webview,The given APK has WebView that caches JavaScript data and code.,"
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> _, dex, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/js_open.apk')
   9 |
  10 | >>> # Get the method names from all classes in each .dex file
  11 | >>> sorted(set(method.name for method in dex.get_methods()))
> 12 | # No method performs root detection
  13 | >>> 'package android.arch.lifecycle;\ninterface ReportFragment$ActivityInitializationListener {\n\n    public abstract v
     | oid onCreate();\n\n    public abstract void onResume();\n\n    public abstract void onStart();\n}\npackage android.suppo
     | rt.v4.app;\nfinal class ActivityCompat$1 implements java.lang.Runnable {\n    final synthetic android.app.Activity val$a
     | ctivity;\n    final synthetic String[] val$permissions;\n    final synthetic int val$requestCode;\n\n    ActivityCompat$
     | 1(String[] p1, android.app.Activity p2, int p3)\n    {\n        this.val$permissions = p1;\n        this.val$activity =
     | p2;\n        this.val$requestCode = p3;\n        return;\n    }\n\n    public void run()\n    {\n        int[] v0_2 = ne
     | w int[this.val$permissions.length];\n        android.content.pm.PackageManager v1_1 = this.val$activity.getPackageManage
     | r();\n        String v2_1 = this.val$activity.getPackageName();\n        int v3_0 = this.val$permissions.length;\n
     |   android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback v4_0 = 0;\n        while (v4_0 < v3_0) {\n
     |          v0_2[v4_0] = v1_1.checkPermission(this.val$permissions[v4_0], v2_1);\n            v4_0++;\n        }\n        (
     ^ Col 0
",analyze_bytecodes._webview_vulnerabilities
F268,inputs,../product/skims/test/data/lib_apk/unsafe_delete.apk (namespace),The given APK has WebView that caches JavaScript data and code.,749,"home,apk,bytecodes",268. Insecure service configuration - Webview,The given APK has WebView that caches JavaScript data and code.,"
   2 |
   3 | >>> # We'll use the version 3.3.5 of ""androguard""
   4 | >>> from androguard.misc import AnalyzeAPK
   5 |
   6 | >>> # Parse APK and all Dalvik Executables (classes*.dex)
   7 | >>> # in the APK
   8 | >>> _, dex, _ = AnalyzeAPK('../product/skims/test/data/lib_apk/unsafe_delete.apk')
   9 |
  10 | >>> # Get the method names from all classes in each .dex file
  11 | >>> sorted(set(method.name for method in dex.get_methods()))
> 12 | # No method performs root detection
  13 | >>> 'package android.arch.lifecycle;\ninterface ReportFragment$ActivityInitializationListener {\n\n    public abstract v
     | oid onCreate();\n\n    public abstract void onResume();\n\n    public abstract void onStart();\n}\npackage android.suppo
     | rt.v4.app;\nfinal class ActivityCompat$1 implements java.lang.Runnable {\n    final synthetic android.app.Activity val$a
     | ctivity;\n    final synthetic String[] val$permissions;\n    final synthetic int val$requestCode;\n\n    ActivityCompat$
     | 1(String[] p1, android.app.Activity p2, int p3)\n    {\n        this.val$permissions = p1;\n        this.val$activity =
     | p2;\n        this.val$requestCode = p3;\n        return;\n    }\n\n    public void run()\n    {\n        int[] v0_2 = ne
     | w int[this.val$permissions.length];\n        android.content.pm.PackageManager v1_1 = this.val$activity.getPackageManage
     | r();\n        String v2_1 = this.val$activity.getPackageName();\n        int v3_0 = this.val$permissions.length;\n
     |   android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback v4_0 = 0;\n        while (v4_0 < v3_0) {\n
     |          v0_2[v4_0] = v1_1.checkPermission(this.val$permissions[v4_0], v2_1);\n            v4_0++;\n        }\n        (
     ^ Col 0
",analyze_bytecodes._webview_vulnerabilities
