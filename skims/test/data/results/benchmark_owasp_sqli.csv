finding,kind,what,where,cwe,stream,title,description,snippet,method
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java,"
  49 |
  50 |  // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  51 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |
  54 |  String sql = ""{call "" + param + ""}"";
  55 |
  56 |  try {
  57 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  58 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 59 |      java.sql.ResultSet rs = statement.executeQuery();
  60 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  61 |
  62 |  } catch (java.sql.SQLException e) {
  63 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |          response.getWriter().println(
  65 | Error processing request.""
  66 | ;
  67 |          return;
  68 |         }
  69 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java,60,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java,"
  50 |   }
  51 |
  52 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  53 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  54 |
  55 |
  56 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ param + ""')"";
  57 |
  58 |   try {
  59 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |    int count = statement.executeUpdate( sql );
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
  70 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00024.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00024.java,"
  47 |
  48 |
  49 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ param +""'"";
  50 |
  51 |   try {
  52 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  54 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  55 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  56 |     statement.setString(1, ""foo"");
> 57 |    statement.execute();
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00027.java,53,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00027.java,"
  43 |
  44 |
  45 |   String param = request.getParameter(""BenchmarkTest00027"");
  46 |   if (param == null) param = """";
  47 |
  48 |
  49 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ param + ""')"";
  50 |
  51 |   try {
  52 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |    int count = statement.executeUpdate( sql );
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  55 |   } catch (java.sql.SQLException e) {
  56 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |           response.getWriter().println(
  58 | ""Error processing request.""
  59 | );
  60 |           return;
  61 |          }
  62 |    else throw new ServletException(e);
  63 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java,58,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java,"
  48 |    String[] values = map.get(""BenchmarkTest00034"");
  49 |    if (values != null) param = values[0];
  50 |   }
  51 |
  52 |
  53 |
  54 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ param +""'"";
  55 |
  56 |   try {
  57 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |    statement.execute( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |   } catch (java.sql.SQLException e) {
  61 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |           response.getWriter().println(
  63 | ""Error processing request.""
  64 | );
  65 |           return;
  66 |          }
  67 |    else throw new ServletException(e);
  68 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java,"
  61 |
  62 |
  63 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ param +""'"";
  64 |
  65 |   try {
  66 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  68 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  69 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  70 |     statement.setString(1, ""foo"");
> 71 |    statement.execute();
  72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  73 |   } catch (java.sql.SQLException e) {
  74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  75 |           response.getWriter().println(
  76 | ""Error processing request.""
  77 | );
  78 |           return;
  79 |          }
  80 |    else throw new ServletException(e);
  81 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java,80,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java,"
  70 |
  71 |
  72 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  73 |
  74 |   try {
  75 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  76 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  77 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  78 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  79 |     statement.setString(1, ""foo"");
> 80 |    statement.execute();
  81 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  82 |   } catch (java.sql.SQLException e) {
  83 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  84 |           response.getWriter().println(
  85 | ""Error processing request.""
  86 | );
  87 |           return;
  88 |          }
  89 |    else throw new ServletException(e);
  90 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java,83,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java,"
  73 |    bar = valuesList.get(0); // get the param value
  74 |   }
  75 |
  76 |
  77 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  78 |
  79 |   try {
  80 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  81 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  82 |    statement.setString(1, ""foo"");
> 83 |    statement.execute();
  84 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  85 |   } catch (java.sql.SQLException e) {
  86 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  87 |           response.getWriter().println(
  88 | ""Error processing request.""
  89 | );
  90 |           return;
  91 |          }
  92 |    else throw new ServletException(e);
  93 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java,81,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java,"
  71 |    valuesList.remove(0); // remove the 1st safe value
  72 |
  73 |    bar = valuesList.get(0); // get the param value
  74 |   }
  75 |
  76 |
  77 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  78 |
  79 |   try {
  80 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 81 |    statement.execute( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  82 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  83 |   } catch (java.sql.SQLException e) {
  84 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  85 |           response.getWriter().println(
  86 | ""Error processing request.""
  87 | );
  88 |           return;
  89 |          }
  90 |    else throw new ServletException(e);
  91 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java,90,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java,"
   80 |     default:
   81 |           bar = ""bobs_your_uncle"";
   82 |           break;
   83 |   }
   84 |
   85 |
   86 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
   87 |
   88 |   try {
   89 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  90 |    statement.execute( sql, new int[] { 1, 2 } );
   91 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   92 |   } catch (java.sql.SQLException e) {
   93 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   94 |           response.getWriter().println(
   95 | ""Error processing request.""
   96 | );
   97 |           return;
   98 |          }
   99 |    else throw new ServletException(e);
  100 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java,75,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java,"
  65 |   if (param != null) {
  66 |    bar = new String( org.apache.commons.codec.binary.Base64.decodeBase64(
  67 |    org.apache.commons.codec.binary.Base64.encodeBase64( param.getBytes() ) ));
  68 |   }
  69 |
  70 |
  71 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  72 |
  73 |   try {
  74 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 75 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  77 |   } catch (java.sql.SQLException e) {
  78 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  79 |           response.getWriter().println(
  80 | ""Error processing request.""
  81 | );
  82 |           return;
  83 |          }
  84 |    else throw new ServletException(e);
  85 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java,81,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java,"
  71 |    valuesList.remove(0); // remove the 1st safe value
  72 |
  73 |    bar = valuesList.get(0); // get the param value
  74 |   }
  75 |
  76 |
  77 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  78 |
  79 |   try {
  80 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 81 |    int count = statement.executeUpdate( sql );
  82 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  83 |   } catch (java.sql.SQLException e) {
  84 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  85 |           response.getWriter().println(
  86 | ""Error processing request.""
  87 | );
  88 |           return;
  89 |          }
  90 |    else throw new ServletException(e);
  91 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java,76,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java,"
  66 |   map11928.put(""keyA-11928"", ""a-Value""); // put some stuff in the collection
  67 |   map11928.put(""keyB-11928"", param); // put it in a collection
  68 |   map11928.put(""keyC"", ""another-Value""); // put some stuff in the collection
  69 |   bar = (String)map11928.get(""keyB-11928""); // get it back out
  70 |
  71 |
  72 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  73 |
  74 |   try {
  75 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 76 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  77 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  78 |   } catch (java.sql.SQLException e) {
  79 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |           response.getWriter().println(
  81 | ""Error processing request.""
  82 | );
  83 |           return;
  84 |          }
  85 |    else throw new ServletException(e);
  86 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00192.java,80,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00192.java,"
  70 |           break;
  71 |   }
  72 |
  73 |
  74 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  75 |
  76 |   try {
  77 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  78 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql );
  79 |    statement.setString(1, ""foo"");
> 80 |    statement.execute();
  81 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  82 |   } catch (java.sql.SQLException e) {
  83 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  84 |           response.getWriter().println(
  85 | ""Error processing request.""
  86 | );
  87 |           return;
  88 |          }
  89 |    else throw new ServletException(e);
  90 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00193.java,67,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00193.java,"
  57 |      bar = param;
  58 |   else bar = ""This should never happen"";
  59 |
  60 |
  61 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  62 |
  63 |   try {
  64 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  65 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  66 |    statement.setString(1, ""foo"");
> 67 |    statement.execute();
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  69 |   } catch (java.sql.SQLException e) {
  70 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |           response.getWriter().println(
  72 | ""Error processing request.""
  73 | );
  74 |           return;
  75 |          }
  76 |    else throw new ServletException(e);
  77 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java,65,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java,"
  55 |   int num = 106;
  56 |
  57 |   bar = (7*42) - num > 200 ? ""This should never happen"" : param;
  58 |
  59 |
  60 |
  61 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  62 |
  63 |   try {
  64 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 65 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  66 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  67 |   } catch (java.sql.SQLException e) {
  68 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  69 |           response.getWriter().println(
  70 | ""Error processing request.""
  71 | );
  72 |           return;
  73 |          }
  74 |    else throw new ServletException(e);
  75 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java,"
  58 |
  59 |  bar = (7*42) - num > 200 ? ""This should never happen"" : param;
  60 |
  61 |
  62 |
  63 |  String sql = ""{call "" + bar + ""}"";
  64 |
  65 |  try {
  66 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 68 |      java.sql.ResultSet rs = statement.executeQuery();
  69 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |
  71 |  } catch (java.sql.SQLException e) {
  72 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |          response.getWriter().println(
  74 | Error processing request.""
  75 | ;
  76 |          return;
  77 |         }
  78 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00335.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00335.java,"
  59 |      bar = param;
  60 |   else bar = ""This should never happen"";
  61 |
  62 |
  63 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  64 |
  65 |   try {
  66 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new int[] { 1, 2 } );
  68 |    statement.setString(1, ""foo"");
> 69 |    statement.execute();
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00342.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00342.java,"
  61 |    valuesList.remove(0); // remove the 1st safe value
  62 |
  63 |    bar = valuesList.get(0); // get the param value
  64 |   }
  65 |
  66 |
  67 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  68 |
  69 |   try {
  70 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 71 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  73 |   } catch (java.sql.SQLException e) {
  74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  75 |           response.getWriter().println(
  76 | ""Error processing request.""
  77 | );
  78 |           return;
  79 |          }
  80 |    else throw new ServletException(e);
  81 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00428.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00428.java,"
  56 |    bar = valuesList.get(0); // get the param value
  57 |   }
  58 |
  59 |
  60 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  61 |
  62 |   try {
  63 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  64 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql );
  65 |    statement.setString(1, ""foo"");
> 66 |    statement.execute();
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00429.java,64,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00429.java,"
  54 |
  55 |
  56 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  57 |
  58 |   try {
  59 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  61 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  62 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  63 |     statement.setString(1, ""foo"");
> 64 |    statement.execute();
  65 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  66 |   } catch (java.sql.SQLException e) {
  67 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  68 |           response.getWriter().println(
  69 | ""Error processing request.""
  70 | );
  71 |           return;
  72 |          }
  73 |    else throw new ServletException(e);
  74 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00435.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00435.java,"
  49 |   map86691.put(""keyA-86691"", ""a-Value""); // put some stuff in the collection
  50 |   map86691.put(""keyB-86691"", param); // put it in a collection
  51 |   map86691.put(""keyC"", ""another-Value""); // put some stuff in the collection
  52 |   bar = (String)map86691.get(""keyB-86691""); // get it back out
  53 |
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    statement.addBatch( sql );
  60 |    int[] counts = statement.executeBatch();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00438.java,60,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00438.java,"
  50 |   int num = 106;
  51 |
  52 |   bar = (7*42) - num > 200 ? ""This should never happen"" : param;
  53 |
  54 |
  55 |
  56 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  57 |
  58 |   try {
  59 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
  70 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00439.java,54,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00439.java,"
  44 |   if (param == null) param = """";
  45 |
  46 |
  47 |   String bar = param;
  48 |
  49 |
  50 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  51 |
  52 |   try {
  53 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 54 |    java.sql.ResultSet rs = statement.executeQuery( sql );
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  56 |   } catch (java.sql.SQLException e) {
  57 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |           response.getWriter().println(
  59 | ""Error processing request.""
  60 | );
  61 |           return;
  62 |          }
  63 |    else throw new ServletException(e);
  64 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00510.java,80,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00510.java,"
  70 |           break;
  71 |   }
  72 |
  73 |
  74 |   String sql = ""{call "" + bar + ""}"";
  75 |
  76 |   try {
  77 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  78 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  79 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 80 |    java.sql.ResultSet rs = statement.executeQuery();
  81 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  82 |         } catch (java.sql.SQLException e) {
  83 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  84 |           response.getWriter().println(
  85 | ""Error processing request.""
  86 | );
  87 |           return;
  88 |          }
  89 |    else throw new ServletException(e);
  90 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java,"
  49 |
  50 |
  51 |
  52 |   String bar = param;
  53 |
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    statement.execute( sql );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00515.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00515.java,"
  59 |    valuesList.remove(0); // remove the 1st safe value
  60 |
  61 |    bar = valuesList.get(0); // get the param value
  62 |   }
  63 |
  64 |
  65 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    statement.execute( sql, new int[] { 1, 2 } );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00516.java,78,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00516.java,"
  68 |     default:
  69 |           bar = ""bobs_your_uncle"";
  70 |           break;
  71 |   }
  72 |
  73 |
  74 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  75 |
  76 |   try {
  77 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 78 |    statement.execute( sql, new int[] { 1, 2 } );
  79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  80 |   } catch (java.sql.SQLException e) {
  81 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |           response.getWriter().println(
  83 | ""Error processing request.""
  84 | );
  85 |           return;
  86 |          }
  87 |    else throw new ServletException(e);
  88 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00590.java,76,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00590.java,"
  66 |      bar = param;
  67 |   else bar = ""This should never happen"";
  68 |
  69 |
  70 |   String sql = ""{call "" + bar + ""}"";
  71 |
  72 |   try {
  73 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  74 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  75 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 76 |    java.sql.ResultSet rs = statement.executeQuery();
  77 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  78 |         } catch (java.sql.SQLException e) {
  79 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |           response.getWriter().println(
  81 | ""Error processing request.""
  82 | );
  83 |           return;
  84 |          }
  85 |    else throw new ServletException(e);
  86 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00593.java,91,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00593.java,"
   81 |
   82 |
   83 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   84 |
   85 |   try {
   86 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   87 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
   88 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
   89 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
   90 |     statement.setString(1, ""foo"");
>  91 |    statement.execute();
   92 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   93 |   } catch (java.sql.SQLException e) {
   94 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   95 |           response.getWriter().println(
   96 | ""Error processing request.""
   97 | );
   98 |           return;
   99 |          }
  100 |    else throw new ServletException(e);
  101 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00594.java,75,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00594.java,"
  65 |   map29056.put(""keyC"", ""another-Value""); // put some stuff in the collection
  66 |   bar = (String)map29056.get(""keyB-29056""); // get it back out
  67 |
  68 |
  69 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  70 |
  71 |   try {
  72 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  73 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  74 |    statement.setString(1, ""foo"");
> 75 |    statement.execute();
  76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  77 |   } catch (java.sql.SQLException e) {
  78 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  79 |           response.getWriter().println(
  80 | ""Error processing request.""
  81 | );
  82 |           return;
  83 |          }
  84 |    else throw new ServletException(e);
  85 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java,76,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java,"
  66 |   bar = (7*42) - num > 200 ? ""This should never happen"" : param;
  67 |
  68 |
  69 |
  70 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  71 |
  72 |   try {
  73 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  74 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  75 |    statement.setString(1, ""foo"");
> 76 |    statement.execute();
  77 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  78 |   } catch (java.sql.SQLException e) {
  79 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |           response.getWriter().println(
  81 | ""Error processing request.""
  82 | );
  83 |           return;
  84 |          }
  85 |    else throw new ServletException(e);
  86 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java,72,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java,"
  62 |   if (param != null) {
  63 |    bar = new String( org.apache.commons.codec.binary.Base64.decodeBase64(
  64 |    org.apache.commons.codec.binary.Base64.encodeBase64( param.getBytes() ) ));
  65 |   }
  66 |
  67 |
  68 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  69 |
  70 |   try {
  71 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |    java.sql.ResultSet rs = statement.executeQuery( sql );
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  74 |   } catch (java.sql.SQLException e) {
  75 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |           response.getWriter().println(
  77 | ""Error processing request.""
  78 | );
  79 |           return;
  80 |          }
  81 |    else throw new ServletException(e);
  82 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00606.java,74,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00606.java,"
  64 |   int num = 196;
  65 |   if ( (500/42) + num > 200 )
  66 |      bar = param;
  67 |   else bar = ""This should never happen"";
  68 |
  69 |
  70 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  71 |
  72 |   try {
  73 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 74 |    int count = statement.executeUpdate( sql );
  75 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  76 |   } catch (java.sql.SQLException e) {
  77 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  78 |           response.getWriter().println(
  79 | ""Error processing request.""
  80 | );
  81 |           return;
  82 |          }
  83 |    else throw new ServletException(e);
  84 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00760.java,63,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00760.java,"
  53 |  map18915.put(""keyB-18915"", param); // put it in a collection
  54 |  map18915.put(""keyC"", ""another-Value""); // put some stuff in the collection
  55 |  bar = (String)map18915.get(""keyB-18915""); // get it back out
  56 |
  57 |
  58 |  String sql = ""{call "" + bar + ""}"";
  59 |
  60 |  try {
  61 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  62 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 63 |      java.sql.ResultSet rs = statement.executeQuery();
  64 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  65 |
  66 |  } catch (java.sql.SQLException e) {
  67 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  68 |          response.getWriter().println(
  69 | Error processing request.""
  70 | ;
  71 |          return;
  72 |         }
  73 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00761.java,77,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00761.java,"
  67 |          bar = ""bobs_your_uncle"";
  68 |          break;
  69 |  }
  70 |
  71 |
  72 |  String sql = ""{call "" + bar + ""}"";
  73 |
  74 |  try {
  75 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  76 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 77 |      java.sql.ResultSet rs = statement.executeQuery();
  78 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  79 |
  80 |  } catch (java.sql.SQLException e) {
  81 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |          response.getWriter().println(
  83 | Error processing request.""
  84 | ;
  85 |          return;
  86 |         }
  87 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00762.java,65,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00762.java,"
  55 |      bar = param;
  56 |   else bar = ""This should never happen"";
  57 |
  58 |
  59 |   String sql = ""{call "" + bar + ""}"";
  60 |
  61 |   try {
  62 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  63 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 65 |    java.sql.ResultSet rs = statement.executeQuery();
  66 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  67 |         } catch (java.sql.SQLException e) {
  68 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  69 |           response.getWriter().println(
  70 | ""Error processing request.""
  71 | );
  72 |           return;
  73 |          }
  74 |    else throw new ServletException(e);
  75 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00770.java,67,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00770.java,"
  57 |    valuesList.remove(0); // remove the 1st safe value
  58 |
  59 |    bar = valuesList.get(0); // get the param value
  60 |   }
  61 |
  62 |
  63 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  64 |
  65 |   try {
  66 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |    statement.addBatch( sql );
  68 |    int[] counts = statement.executeBatch();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00771.java,62,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00771.java,"
  52 |   map49960.put(""keyA-49960"", ""a-Value""); // put some stuff in the collection
  53 |   map49960.put(""keyB-49960"", param); // put it in a collection
  54 |   map49960.put(""keyC"", ""another-Value""); // put some stuff in the collection
  55 |   bar = (String)map49960.get(""keyB-49960""); // get it back out
  56 |
  57 |
  58 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  59 |
  60 |   try {
  61 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 62 |    statement.execute( sql );
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |   } catch (java.sql.SQLException e) {
  65 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |           response.getWriter().println(
  67 | ""Error processing request.""
  68 | );
  69 |           return;
  70 |          }
  71 |    else throw new ServletException(e);
  72 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java,76,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java,"
  66 |   bar = (7*42) - num > 200 ? ""This should never happen"" : param;
  67 |
  68 |
  69 |
  70 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  71 |
  72 |   try {
  73 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  74 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  75 |    statement.setString(1, ""foo"");
> 76 |    statement.execute();
  77 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  78 |   } catch (java.sql.SQLException e) {
  79 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |           response.getWriter().println(
  81 | ""Error processing request.""
  82 | );
  83 |           return;
  84 |          }
  85 |    else throw new ServletException(e);
  86 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00847.java,78,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00847.java,"
  68 |    valuesList.remove(0); // remove the 1st safe value
  69 |
  70 |    bar = valuesList.get(0); // get the param value
  71 |   }
  72 |
  73 |
  74 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  75 |
  76 |   try {
  77 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 78 |    statement.addBatch( sql );
  79 |    int[] counts = statement.executeBatch();
  80 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  81 |   } catch (java.sql.SQLException e) {
  82 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  83 |           response.getWriter().println(
  84 | ""Error processing request.""
  85 | );
  86 |           return;
  87 |          }
  88 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java,"
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |
  61 |   String bar = param;
  62 |
  63 |
  64 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  65 |
  66 |   try {
  67 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 68 |    statement.addBatch( sql );
  69 |    int[] counts = statement.executeBatch();
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00849.java,78,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00849.java,"
  68 |    valuesList.remove(0); // remove the 1st safe value
  69 |
  70 |    bar = valuesList.get(0); // get the param value
  71 |   }
  72 |
  73 |
  74 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  75 |
  76 |   try {
  77 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 78 |    statement.execute( sql, new int[] { 1, 2 } );
  79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  80 |   } catch (java.sql.SQLException e) {
  81 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |           response.getWriter().println(
  83 | ""Error processing request.""
  84 | );
  85 |           return;
  86 |          }
  87 |    else throw new ServletException(e);
  88 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00850.java,78,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00850.java,"
  68 |    valuesList.remove(0); // remove the 1st safe value
  69 |
  70 |    bar = valuesList.get(0); // get the param value
  71 |   }
  72 |
  73 |
  74 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  75 |
  76 |   try {
  77 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 78 |    java.sql.ResultSet rs = statement.executeQuery( sql );
  79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  80 |   } catch (java.sql.SQLException e) {
  81 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |           response.getWriter().println(
  83 | ""Error processing request.""
  84 | );
  85 |           return;
  86 |          }
  87 |    else throw new ServletException(e);
  88 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java,70,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java,"
  60 |   }
  61 |  }
  62 |
  63 |  String bar = new Test().doSomething(request, param);
  64 |
  65 |  String sql = ""{call "" + bar + ""}"";
  66 |
  67 |  try {
  68 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  69 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 70 |      java.sql.ResultSet rs = statement.executeQuery();
  71 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  72 |
  73 |  } catch (java.sql.SQLException e) {
  74 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  75 |          response.getWriter().println(
  76 | Error processing request.""
  77 | ;
  78 |          return;
  79 |         }
  80 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java,"
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""{call "" + bar + ""}"";
   66 |
   67 |   try {
   68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   69 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
   70 |        java.sql.ResultSet.CONCUR_READ_ONLY );
>  71 |    java.sql.ResultSet rs = statement.executeQuery();
   72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   73 |   } catch (java.sql.SQLException e) {
   74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |           response.getWriter().println(
   76 | ""Error processing request.""
   77 | );
   78 |           return;
   79 |          }
   80 |    else throw new ServletException(e);
   81 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java,"
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""{call "" + bar + ""}"";
   66 |
   67 |   try {
   68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   69 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
   70 |        java.sql.ResultSet.CONCUR_READ_ONLY );
>  71 |    java.sql.ResultSet rs = statement.executeQuery();
   72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   73 |   } catch (java.sql.SQLException e) {
   74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |           response.getWriter().println(
   76 | ""Error processing request.""
   77 | );
   78 |           return;
   79 |          }
   80 |    else throw new ServletException(e);
   81 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java,"
  61 |   }
  62 |
  63 |   String bar = new Test().doSomething(request, param);
  64 |
  65 |   String sql = ""{call "" + bar + ""}"";
  66 |
  67 |   try {
  68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  69 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  70 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 71 |    java.sql.ResultSet rs = statement.executeQuery();
  72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  73 |         } catch (java.sql.SQLException e) {
  74 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  75 |           response.getWriter().println(
  76 | ""Error processing request.""
  77 | );
  78 |           return;
  79 |          }
  80 |    else throw new ServletException(e);
  81 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java,"
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   66 |
   67 |   try {
   68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   69 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new int[] { 1, 2 } );
   70 |    statement.setString(1, ""foo"");
>  71 |    statement.execute();
   72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   73 |   } catch (java.sql.SQLException e) {
   74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |           response.getWriter().println(
   76 | ""Error processing request.""
   77 | );
   78 |           return;
   79 |          }
   80 |    else throw new ServletException(e);
   81 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java,"
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   66 |
   67 |   try {
   68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   69 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
   70 |    statement.setString(1, ""foo"");
>  71 |    statement.execute();
   72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   73 |   } catch (java.sql.SQLException e) {
   74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |           response.getWriter().println(
   76 | ""Error processing request.""
   77 | );
   78 |           return;
   79 |          }
   80 |    else throw new ServletException(e);
   81 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java,71,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java,"
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   66 |
   67 |   try {
   68 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   69 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
   70 |    statement.setString(1, ""foo"");
>  71 |    statement.execute();
   72 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   73 |   } catch (java.sql.SQLException e) {
   74 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |           response.getWriter().println(
   76 | ""Error processing request.""
   77 | );
   78 |           return;
   79 |          }
   80 |    else throw new ServletException(e);
   81 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java,"
   59 |     }
   60 |    }
   61 |   }
   62 |
   63 |   String bar = new Test().doSomething(request, param);
   64 |
   65 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
   66 |
   67 |   try {
   68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  69 |    statement.addBatch( sql );
   70 |    int[] counts = statement.executeBatch();
   71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
   72 |   } catch (java.sql.SQLException e) {
   73 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   74 |           response.getWriter().println(
   75 | ""Error processing request.""
   76 | );
   77 |           return;
   78 |          }
   79 |    else throw new ServletException(e);
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java,60,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java,"
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  58 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY );
  59 |     statement.setString(1, ""foo"");
> 60 |    statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
  70 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java,"
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  58 |    statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.addBatch( sql );
  58 |    int[] counts = statement.executeBatch();
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  60 |   } catch (java.sql.SQLException e) {
  61 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |           response.getWriter().println(
  63 | ""Error processing request.""
  64 | );
  65 |           return;
  66 |          }
  67 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql, new int[] { 1, 2 } );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    int count = statement.executeUpdate( sql );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java,61,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java,"
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""{call "" + bar + ""}"";
  56 |
  57 |   try {
  58 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  59 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  60 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 61 |    java.sql.ResultSet rs = statement.executeQuery();
  62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  63 |         } catch (java.sql.SQLException e) {
  64 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |           response.getWriter().println(
  66 | ""Error processing request.""
  67 | );
  68 |           return;
  69 |          }
  70 |    else throw new ServletException(e);
  71 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java,62,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java,"
  52 |
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  59 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  60 |        java.sql.Statement.RETURN_GENERATED_KEYS );
  61 |        statement.setString(1, ""foo"");
> 62 |    statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |   } catch (java.sql.SQLException e) {
  65 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |           response.getWriter().println(
  67 | ""Error processing request.""
  68 | );
  69 |           return;
  70 |          }
  71 |    else throw new ServletException(e);
  72 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java,62,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java,"
  52 |
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  59 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  60 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY );
  61 |     statement.setString(1, ""foo"");
> 62 |    statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |   } catch (java.sql.SQLException e) {
  65 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |           response.getWriter().println(
  67 | ""Error processing request.""
  68 | );
  69 |           return;
  70 |          }
  71 |    else throw new ServletException(e);
  72 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java,63,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java,"
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  59 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  60 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  61 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  62 |     statement.setString(1, ""foo"");
> 63 |    statement.execute();
  64 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  65 |   } catch (java.sql.SQLException e) {
  66 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |           response.getWriter().println(
  68 | ""Error processing request.""
  69 | );
  70 |           return;
  71 |          }
  72 |    else throw new ServletException(e);
  73 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    int count = statement.executeUpdate( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = new Test().doSomething(request, param);
  54 |
  55 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    int count = statement.executeUpdate( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java,54,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java,"
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""{call "" + bar + ""}"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  53 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 54 |    java.sql.ResultSet rs = statement.executeQuery();
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  56 |         } catch (java.sql.SQLException e) {
  57 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |           response.getWriter().println(
  59 | ""Error processing request.""
  60 | );
  61 |           return;
  62 |          }
  63 |    else throw new ServletException(e);
  64 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java,56,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java,"
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  53 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  54 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  55 |     statement.setString(1, ""foo"");
> 56 |    statement.execute();
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  58 |   } catch (java.sql.SQLException e) {
  59 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |           response.getWriter().println(
  61 | ""Error processing request.""
  62 | );
  63 |           return;
  64 |          }
  65 |    else throw new ServletException(e);
  66 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java,54,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java,"
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  53 |    statement.setString(1, ""foo"");
> 54 |    statement.execute();
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  56 |   } catch (java.sql.SQLException e) {
  57 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |           response.getWriter().println(
  59 | ""Error processing request.""
  60 | );
  61 |           return;
  62 |          }
  63 |    else throw new ServletException(e);
  64 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java,52,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java,"
  42 |
  43 |   String param = request.getParameter(""BenchmarkTest01311"");
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |    statement.execute( sql );
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  54 |   } catch (java.sql.SQLException e) {
  55 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |           response.getWriter().println(
  57 | ""Error processing request.""
  58 | );
  59 |           return;
  60 |          }
  61 |    else throw new ServletException(e);
  62 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java,52,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java,"
  42 |
  43 |   String param = request.getParameter(""BenchmarkTest01312"");
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  54 |   } catch (java.sql.SQLException e) {
  55 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |           response.getWriter().println(
  57 | ""Error processing request.""
  58 | );
  59 |           return;
  60 |          }
  61 |    else throw new ServletException(e);
  62 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java,52,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java,"
  42 |
  43 |   String param = request.getParameter(""BenchmarkTest01313"");
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  49 |
  50 |   try {
  51 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |    int count = statement.executeUpdate( sql );
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  54 |   } catch (java.sql.SQLException e) {
  55 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |           response.getWriter().println(
  57 | ""Error processing request.""
  58 | );
  59 |           return;
  60 |          }
  61 |    else throw new ServletException(e);
  62 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java,52,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java,"
  42 |
  43 |   String param = request.getParameter(""BenchmarkTest01314"");
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = new Test().doSomething(request, param);
  47 |
  48 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  49 |
  50 |   try {
  51 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |    int count = statement.executeUpdate( sql );
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  54 |   } catch (java.sql.SQLException e) {
  55 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |           response.getWriter().println(
  57 | ""Error processing request.""
  58 | );
  59 |           return;
  60 |          }
  61 |    else throw new ServletException(e);
  62 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java,"
  49 |
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""{call "" + bar + ""}"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  58 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 59 |    java.sql.ResultSet rs = statement.executeQuery();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java,60,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java,"
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  58 |        java.sql.Statement.RETURN_GENERATED_KEYS );
  59 |        statement.setString(1, ""foo"");
> 60 |    statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
  70 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java,60,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java,"
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  58 |        java.sql.Statement.RETURN_GENERATED_KEYS );
  59 |        statement.setString(1, ""foo"");
> 60 |    statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |   } catch (java.sql.SQLException e) {
  63 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |           response.getWriter().println(
  65 | ""Error processing request.""
  66 | );
  67 |           return;
  68 |          }
  69 |    else throw new ServletException(e);
  70 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java,"
  49 |
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new int[] { 1, 2 } );
  58 |    statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    java.sql.ResultSet rs = statement.executeQuery( sql );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java,"
   47 |    if (values != null) param = values[0];
   48 |   }
   49 |
   50 |
   51 |   String bar = new Test().doSomething(request, param);
   52 |
   53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
   54 |
   55 |   try {
   56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  57 |    int count = statement.executeUpdate( sql, new int[] {1,2} );
   58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
   59 |   } catch (java.sql.SQLException e) {
   60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   61 |           response.getWriter().println(
   62 | ""Error processing request.""
   63 | );
   64 |           return;
   65 |          }
   66 |    else throw new ServletException(e);
   67 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = new Test().doSomething(request, param);
  52 |
  53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java,"
  58 |   }
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java,"
  58 |   }
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |         } catch (java.sql.SQLException e) {
  71 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java,"
  58 |   }
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |         } catch (java.sql.SQLException e) {
  71 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java,70,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java,"
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
   67 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
   68 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
   69 |     statement.setString(1, ""foo"");
>  70 |    statement.execute();
   71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   72 |   } catch (java.sql.SQLException e) {
   73 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   74 |           response.getWriter().println(
   75 | ""Error processing request.""
   76 | );
   77 |           return;
   78 |          }
   79 |    else throw new ServletException(e);
   80 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java,"
  56 |     }
  57 |    }
  58 |   }
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.execute( sql, new int[] { 1, 2 } );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java,"
  56 |     }
  57 |    }
  58 |   }
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    int count = statement.executeUpdate( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java,"
   56 |     }
   57 |    }
   58 |   }
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
   63 |
   64 |   try {
   65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  66 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
   67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
   68 |   } catch (java.sql.SQLException e) {
   69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   70 |           response.getWriter().println(
   71 | ""Error processing request.""
   72 | );
   73 |           return;
   74 |          }
   75 |    else throw new ServletException(e);
   76 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java,56,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java,"
   46 |    param = values[0];
   47 |  else param = """";
   48 |
   49 |  String bar = new Test().doSomething(request, param);
   50 |
   51 |  String sql = ""{call "" + bar + ""}"";
   52 |
   53 |  try {
   54 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   55 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
>  56 |      java.sql.ResultSet rs = statement.executeQuery();
   57 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   58 |
   59 |  } catch (java.sql.SQLException e) {
   60 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   61 |          response.getWriter().println(
   62 | Error processing request.""
   63 | ;
   64 |          return;
   65 |         }
   66 |   else throw new ServletException(e);
      ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java,"
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""{call "" + bar + ""}"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  56 |        java.sql.ResultSet.CONCUR_READ_ONLY );
> 57 |    java.sql.ResultSet rs = statement.executeQuery();
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java,"
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""{call "" + bar + ""}"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  56 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 57 |    java.sql.ResultSet rs = statement.executeQuery();
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    statement.addBatch( sql );
  56 |    int[] counts = statement.executeBatch();
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  58 |   } catch (java.sql.SQLException e) {
  59 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |           response.getWriter().println(
  61 | ""Error processing request.""
  62 | );
  63 |           return;
  64 |          }
  65 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    int count = statement.executeUpdate( sql, new int[] {1,2} );
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = new Test().doSomething(request, param);
  50 |
  51 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java,67,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java,"
  57 |  }
  58 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |  String bar = new Test().doSomething(request, param);
  61 |
  62 |  String sql = ""{call "" + bar + ""}"";
  63 |
  64 |  try {
  65 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 67 |      java.sql.ResultSet rs = statement.executeQuery();
  68 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  69 |
  70 |  } catch (java.sql.SQLException e) {
  71 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |          response.getWriter().println(
  73 | Error processing request.""
  74 | ;
  75 |          return;
  76 |         }
  77 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java,"
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  67 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY );
  68 |     statement.setString(1, ""foo"");
> 69 |    statement.execute();
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java,70,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java,"
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
   67 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
   68 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
   69 |     statement.setString(1, ""foo"");
>  70 |    statement.execute();
   71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   72 |   } catch (java.sql.SQLException e) {
   73 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   74 |           response.getWriter().println(
   75 | ""Error processing request.""
   76 | );
   77 |           return;
   78 |          }
   79 |    else throw new ServletException(e);
   80 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = new Test().doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.addBatch( sql );
  67 |    int[] counts = statement.executeBatch();
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  69 |   } catch (java.sql.SQLException e) {
  70 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |           response.getWriter().println(
  72 | ""Error processing request.""
  73 | );
  74 |           return;
  75 |          }
  76 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java,"
   56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   57 |   }
   58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  66 |    statement.execute( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
   67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   68 |   } catch (java.sql.SQLException e) {
   69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   70 |           response.getWriter().println(
   71 | ""Error processing request.""
   72 | );
   73 |           return;
   74 |          }
   75 |    else throw new ServletException(e);
   76 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java,"
   56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   57 |   }
   58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   59 |
   60 |   String bar = new Test().doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  66 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
   67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   68 |   } catch (java.sql.SQLException e) {
   69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   70 |           response.getWriter().println(
   71 | ""Error processing request.""
   72 | );
   73 |           return;
   74 |          }
   75 |    else throw new ServletException(e);
   76 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java,"
  59 |     }
  60 |    }
  61 |   }
  62 |
  63 |   String bar = doSomething(request, param);
  64 |
  65 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    int count = statement.executeUpdate( sql );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java,"
  59 |     }
  60 |    }
  61 |   }
  62 |
  63 |   String bar = doSomething(request, param);
  64 |
  65 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    int count = statement.executeUpdate( sql );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java,"
  59 |     }
  60 |    }
  61 |   }
  62 |
  63 |   String bar = doSomething(request, param);
  64 |
  65 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    int count = statement.executeUpdate( sql, new int[] {1,2} );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java,"
  59 |     }
  60 |    }
  61 |   }
  62 |
  63 |   String bar = doSomething(request, param);
  64 |
  65 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java,69,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java,"
  59 |     }
  60 |    }
  61 |   }
  62 |
  63 |   String bar = doSomething(request, param);
  64 |
  65 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  66 |
  67 |   try {
  68 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  71 |   } catch (java.sql.SQLException e) {
  72 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |           response.getWriter().println(
  74 | ""Error processing request.""
  75 | );
  76 |           return;
  77 |          }
  78 |    else throw new ServletException(e);
  79 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java,"
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  58 |    statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.addBatch( sql );
  58 |    int[] counts = statement.executeBatch();
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  60 |   } catch (java.sql.SQLException e) {
  61 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |           response.getWriter().println(
  63 | ""Error processing request.""
  64 | );
  65 |           return;
  66 |          }
  67 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql, new int[] { 1, 2 } );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java,"
  47 |
  48 |   // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    statement.execute( sql );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    statement.execute( sql );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = doSomething(request, param);
  54 |
  55 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    statement.execute( sql, new int[] { 1, 2 } );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java,"
  49 |
  50 |   // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |   String bar = doSomething(request, param);
  54 |
  55 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  56 |
  57 |   try {
  58 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |    int count = statement.executeUpdate( sql );
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java,54,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java,"
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = doSomething(request, param);
  47 |
  48 |   String sql = ""{call "" + bar + ""}"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  53 |        java.sql.ResultSet.CONCUR_READ_ONLY );
> 54 |    java.sql.ResultSet rs = statement.executeQuery();
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  56 |   } catch (java.sql.SQLException e) {
  57 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |           response.getWriter().println(
  59 | ""Error processing request.""
  60 | );
  61 |           return;
  62 |          }
  63 |    else throw new ServletException(e);
  64 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java,54,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java,"
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = doSomething(request, param);
  47 |
  48 |   String sql = ""{call "" + bar + ""}"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  53 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 54 |    java.sql.ResultSet rs = statement.executeQuery();
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  56 |         } catch (java.sql.SQLException e) {
  57 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |           response.getWriter().println(
  59 | ""Error processing request.""
  60 | );
  61 |           return;
  62 |          }
  63 |    else throw new ServletException(e);
  64 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java,"
  45 |
  46 |   String bar = doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  53 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY );
  54 |     statement.setString(1, ""foo"");
> 55 |    statement.execute();
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java,52,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java,"
  42 |
  43 |   String param = request.getParameter(""BenchmarkTest02187"");
  44 |   if (param == null) param = """";
  45 |
  46 |   String bar = doSomething(request, param);
  47 |
  48 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  49 |
  50 |   try {
  51 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |    statement.execute( sql );
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  54 |   } catch (java.sql.SQLException e) {
  55 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |           response.getWriter().println(
  57 | ""Error processing request.""
  58 | );
  59 |           return;
  60 |          }
  61 |    else throw new ServletException(e);
  62 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java,58,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java,"
  48 |  }
  49 |
  50 |
  51 |  String bar = doSomething(request, param);
  52 |
  53 |  String sql = ""{call "" + bar + ""}"";
  54 |
  55 |  try {
  56 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 58 |      java.sql.ResultSet rs = statement.executeQuery();
  59 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  60 |
  61 |  } catch (java.sql.SQLException e) {
  62 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |          response.getWriter().println(
  64 | Error processing request.""
  65 | ;
  66 |          return;
  67 |         }
  68 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java,61,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java,"
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  58 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  59 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  60 |     statement.setString(1, ""foo"");
> 61 |    statement.execute();
  62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  63 |   } catch (java.sql.SQLException e) {
  64 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |           response.getWriter().println(
  66 | ""Error processing request.""
  67 | );
  68 |           return;
  69 |          }
  70 |    else throw new ServletException(e);
  71 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java,61,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java,"
   51 |   String bar = doSomething(request, param);
   52 |
   53 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   54 |
   55 |   try {
   56 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   57 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
   58 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
   59 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
   60 |     statement.setString(1, ""foo"");
>  61 |    statement.execute();
   62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   63 |   } catch (java.sql.SQLException e) {
   64 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   65 |           response.getWriter().println(
   66 | ""Error processing request.""
   67 | );
   68 |           return;
   69 |          }
   70 |    else throw new ServletException(e);
   71 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    int count = statement.executeUpdate( sql );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java,"
  47 |    if (values != null) param = values[0];
  48 |   }
  49 |
  50 |
  51 |   String bar = doSomething(request, param);
  52 |
  53 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  54 |
  55 |   try {
  56 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |    int count = statement.executeUpdate( sql, new String[] {""USERNAME"",""PASSWORD""} );
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |   } catch (java.sql.SQLException e) {
  60 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java,"
  58 |   }
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new int[] { 1, 2 } );
  67 |    statement.setString(1, ""foo"");
> 68 |    statement.execute();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java,"
  58 |   }
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {""Column1"",""Column2""} );
  67 |    statement.setString(1, ""foo"");
> 68 |    statement.execute();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java,"
  56 |     }
  57 |    }
  58 |   }
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.execute( sql );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java,"
  56 |     }
  57 |    }
  58 |   }
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    int count = statement.executeUpdate( sql, new int[] {1,2} );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java,56,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java,"
  46 |    param = values[0];
  47 |  else param = """";
  48 |
  49 |  String bar = doSomething(request, param);
  50 |
  51 |  String sql = ""{call "" + bar + ""}"";
  52 |
  53 |  try {
  54 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 56 |      java.sql.ResultSet rs = statement.executeQuery();
  57 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  58 |
  59 |  } catch (java.sql.SQLException e) {
  60 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |          response.getWriter().println(
  62 | Error processing request.""
  63 | ;
  64 |          return;
  65 |         }
  66 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java,57,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java,"
  47 |   else param = """";
  48 |
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""{call "" + bar + ""}"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  56 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 57 |    java.sql.ResultSet rs = statement.executeQuery();
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |           response.getWriter().println(
  62 | ""Error processing request.""
  63 | );
  64 |           return;
  65 |          }
  66 |    else throw new ServletException(e);
  67 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java,58,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java,"
  48 |
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  56 |        java.sql.Statement.RETURN_GENERATED_KEYS );
  57 |        statement.setString(1, ""foo"");
> 58 |    statement.execute();
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |   } catch (java.sql.SQLException e) {
  61 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |           response.getWriter().println(
  63 | ""Error processing request.""
  64 | );
  65 |           return;
  66 |          }
  67 |    else throw new ServletException(e);
  68 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java,58,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java,"
  48 |
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  56 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY );
  57 |     statement.setString(1, ""foo"");
> 58 |    statement.execute();
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |   } catch (java.sql.SQLException e) {
  61 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |           response.getWriter().println(
  63 | ""Error processing request.""
  64 | );
  65 |           return;
  66 |          }
  67 |    else throw new ServletException(e);
  68 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java,"
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  56 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  57 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  58 |     statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java,"
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  56 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  57 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  58 |     statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java,59,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java,"
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
  56 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
  57 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
  58 |     statement.setString(1, ""foo"");
> 59 |    statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |   } catch (java.sql.SQLException e) {
  62 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |           response.getWriter().println(
  64 | ""Error processing request.""
  65 | );
  66 |           return;
  67 |          }
  68 |    else throw new ServletException(e);
  69 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    statement.execute( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java,55,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java,"
  45 |   if (values != null && values.length > 0)
  46 |     param = values[0];
  47 |   else param = """";
  48 |
  49 |   String bar = doSomething(request, param);
  50 |
  51 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  52 |
  53 |   try {
  54 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |    int count = statement.executeUpdate( sql );
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |   } catch (java.sql.SQLException e) {
  58 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |           response.getWriter().println(
  60 | ""Error processing request.""
  61 | );
  62 |           return;
  63 |          }
  64 |    else throw new ServletException(e);
  65 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java,67,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java,"
  57 |  }
  58 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |  String bar = doSomething(request, param);
  61 |
  62 |  String sql = ""{call "" + bar + ""}"";
  63 |
  64 |  try {
  65 |   java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |   java.sql.CallableStatement statement = connection.prepareCall( sql );
> 67 |      java.sql.ResultSet rs = statement.executeQuery();
  68 |            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  69 |
  70 |  } catch (java.sql.SQLException e) {
  71 |   if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |          response.getWriter().println(
  73 | Error processing request.""
  74 | ;
  75 |          return;
  76 |         }
  77 |   else throw new ServletException(e);
     ^ Col 1
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java,"
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java,"
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |   } catch (java.sql.SQLException e) {
  71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java,"
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""{call "" + bar + ""}"";
  63 |
  64 |   try {
  65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |    java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY,
  67 |        java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
> 68 |    java.sql.ResultSet rs = statement.executeQuery();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  70 |         } catch (java.sql.SQLException e) {
  71 |          if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |           response.getWriter().println(
  73 | ""Error processing request.""
  74 | );
  75 |           return;
  76 |          }
  77 |    else throw new ServletException(e);
  78 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java,68,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java,"
   58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   59 |
   60 |   String bar = doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql );
   67 |    statement.setString(1, ""foo"");
>  68 |    statement.execute();
   69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   70 |   } catch (java.sql.SQLException e) {
   71 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   72 |           response.getWriter().println(
   73 | ""Error processing request.""
   74 | );
   75 |           return;
   76 |          }
   77 |    else throw new ServletException(e);
   78 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java,70,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java,"
   60 |   String bar = doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   66 |    java.sql.PreparedStatement statement = connection.prepareStatement( sql,
   67 |     java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY,
   68 |     java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT );
   69 |     statement.setString(1, ""foo"");
>  70 |    statement.execute();
   71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   72 |   } catch (java.sql.SQLException e) {
   73 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   74 |           response.getWriter().println(
   75 | ""Error processing request.""
   76 | );
   77 |           return;
   78 |          }
   79 |    else throw new ServletException(e);
   80 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.addBatch( sql );
  67 |    int[] counts = statement.executeBatch();
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  69 |   } catch (java.sql.SQLException e) {
  70 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |           response.getWriter().println(
  72 | ""Error processing request.""
  73 | );
  74 |           return;
  75 |          }
  76 |    else throw new ServletException(e);
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.execute( sql, new int[] { 1, 2 } );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java,"
   56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   57 |   }
   58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
   59 |
   60 |   String bar = doSomething(request, param);
   61 |
   62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
   63 |
   64 |   try {
   65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  66 |    statement.execute( sql, new int[] { 1, 2 } );
   67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   68 |   } catch (java.sql.SQLException e) {
   69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   70 |           response.getWriter().println(
   71 | ""Error processing request.""
   72 | );
   73 |           return;
   74 |          }
   75 |    else throw new ServletException(e);
   76 |   }
      ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    statement.execute( sql, new String[] { ""username"", ""password"" } );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='""+ bar +""'"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    java.sql.ResultSet rs = statement.executeQuery( sql );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    int count = statement.executeUpdate( sql );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    int count = statement.executeUpdate( sql );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
F112,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java,66,89,skims,112. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base in OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java,"
  56 |    param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  57 |   }
  58 |   param = java.net.URLDecoder.decode(param, ""UTF-8"");
  59 |
  60 |   String bar = doSomething(request, param);
  61 |
  62 |   String sql = ""INSERT INTO users (username, password) VALUES ('foo','""+ bar + ""')"";
  63 |
  64 |   try {
  65 |    java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 66 |    int count = statement.executeUpdate( sql, java.sql.Statement.RETURN_GENERATED_KEYS );
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  68 |   } catch (java.sql.SQLException e) {
  69 |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |           response.getWriter().println(
  71 | ""Error processing request.""
  72 | );
  73 |           return;
  74 |          }
  75 |    else throw new ServletException(e);
  76 |   }
     ^ Col 0
",query.query_f112
