finding,kind,what,where,cwe,stream,title,description,snippet
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02177.java,51,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   41 |         response.setContentType(""text/html;charset=UTF-8"");
   42 |
   43 |         String param = request.getParameter(""BenchmarkTest02177"");
   44 |         if (param == null) param = """";
   45 |
   46 |         String bar = doSomething(request, param);
   47 |
   48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   49 |         try {
   50 |             java.util.List<String> results =
>  51 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   52 |                             sql,
   53 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   54 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   55 |                                         throws java.sql.SQLException {
   56 |                                     try {
   57 |                                         return rs.getString(""USERNAME"");
   58 |                                     } catch (java.sql.SQLException e) {
   59 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   60 |                                                 .hideSQLErrors) {
   61 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01964.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   46 |         }
   47 |
   48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
   49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   50 |
   51 |         String bar = doSomething(request, param);
   52 |
   53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   54 |         try {
   55 |             java.util.List<String> results =
>  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   57 |                             sql,
   58 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   59 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   60 |                                         throws java.sql.SQLException {
   61 |                                     try {
   62 |                                         return rs.getString(""USERNAME"");
   63 |                                     } catch (java.sql.SQLException e) {
   64 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   65 |                                                 .hideSQLErrors) {
   66 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02091.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   48 |         }
   49 |
   50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
   51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   52 |
   53 |         String bar = doSomething(request, param);
   54 |
   55 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   56 |         try {
   57 |             java.util.List<String> results =
>  58 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   59 |                             sql,
   60 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   61 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   62 |                                         throws java.sql.SQLException {
   63 |                                     try {
   64 |                                         return rs.getString(""USERNAME"");
   65 |                                     } catch (java.sql.SQLException e) {
   66 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   67 |                                                 .hideSQLErrors) {
   68 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   48 |         }
   49 |
   50 |         String bar = new Test().doSomething(request, param);
   51 |
   52 |         String sql =
   53 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   54 |         try {
   55 |             // int results =
   56 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
   57 |             Integer results =
>  58 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   59 |                             sql, Integer.class);
   60 |             response.getWriter().println(""Your results are: "");
   61 |
   62 |             //  System.out.println(""Your results are: "");
   63 |             response.getWriter().println(results.toString());
   64 |             //  System.out.println(results);
   65 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   66 |             response.getWriter()
   67 |                     .println(
   68 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java,64,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   54 |         try {
   55 |             java.sql.Connection connection =
   56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   57 |             java.sql.PreparedStatement statement =
   58 |                     connection.prepareStatement(
   59 |                             sql,
   60 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   61 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
   62 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
   63 |             statement.setString(1, ""foo"");
>  64 |             statement.execute();
   65 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   66 |         } catch (java.sql.SQLException e) {
   67 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   68 |                 response.getWriter().println(""Error processing request."");
   69 |                 return;
   70 |             } else throw new ServletException(e);
   71 |         }
   72 |     } // end doPost
   73 |
   74 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02362.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   55 |                     }
   56 |                 }
   57 |             }
   58 |         }
   59 |
   60 |         String bar = doSomething(request, param);
   61 |
   62 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   63 |         try {
   64 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  65 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   66 |             response.getWriter().println(""Your results are: "");
   67 |
   68 |             //  System.out.println(""Your results are"");
   69 |             while (results.next()) {
   70 |                 response.getWriter()
   71 |                         .println(
   72 |                                 org.owasp
   73 |                                                 .esapi
   74 |                                                 .ESAPI
   75 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02357.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   55 |                     }
   56 |                 }
   57 |             }
   58 |         }
   59 |
   60 |         String bar = doSomething(request, param);
   61 |
   62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   63 |         try {
   64 |             java.util.List<String> results =
>  65 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   66 |                             sql,
   67 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   68 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   69 |                                         throws java.sql.SQLException {
   70 |                                     try {
   71 |                                         return rs.getString(""USERNAME"");
   72 |                                     } catch (java.sql.SQLException e) {
   73 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   74 |                                                 .hideSQLErrors) {
   75 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02358.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   55 |                     }
   56 |                 }
   57 |             }
   58 |         }
   59 |
   60 |         String bar = doSomething(request, param);
   61 |
   62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   63 |         try {
   64 |             java.util.List<java.util.Map<String, Object>> list =
>  65 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
   66 |             response.getWriter().println(""Your results are: <br>"");
   67 |
   68 |             //  System.out.println(""Your results are"");
   69 |
   70 |             for (Object o : list) {
   71 |                 response.getWriter()
   72 |                         .println(
   73 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
   74 |                                         + ""<br>"");
   75 |                 //   System.out.println(o.toString());
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01466.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   55 |                     }
   56 |                 }
   57 |             }
   58 |         }
   59 |
   60 |         String bar = new Test().doSomething(request, param);
   61 |
   62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   63 |         try {
   64 |             java.util.List<String> results =
>  65 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   66 |                             sql,
   67 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   68 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   69 |                                         throws java.sql.SQLException {
   70 |                                     try {
   71 |                                         return rs.getString(""USERNAME"");
   72 |                                     } catch (java.sql.SQLException e) {
   73 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   74 |                                                 .hideSQLErrors) {
   75 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01465.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   55 |                     }
   56 |                 }
   57 |             }
   58 |         }
   59 |
   60 |         String bar = new Test().doSomething(request, param);
   61 |
   62 |         try {
   63 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   64 |
>  65 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
   66 |             response.getWriter()
   67 |                     .println(
   68 |                             ""No results can be displayed for query: ""
   69 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
   70 |                                     + ""<br>""
   71 |                                     + "" because the Spring execute method doesn't return results."");
   72 |
   73 |         } catch (org.springframework.dao.DataAccessException e) {
   74 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   75 |                 response.getWriter().println(""Error processing request."");
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   57 |             }
   58 |         }
   59 |
   60 |         String bar = new Test().doSomething(request, param);
   61 |
   62 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
   63 |
   64 |         try {
   65 |             java.sql.Statement statement =
   66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  67 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
   68 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
   69 |         } catch (java.sql.SQLException e) {
   70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   71 |                 response.getWriter().println(""Error processing request."");
   72 |                 return;
   73 |             } else throw new ServletException(e);
   74 |         }
   75 |     } // end doPost
   76 |
   77 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java,68,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   58 |         }
   59 |
   60 |         String bar = doSomething(request, param);
   61 |
   62 |         String sql =
   63 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   64 |         try {
   65 |             // Long results =
   66 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
   67 |             Long results =
>  68 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   69 |                             sql, Long.class);
   70 |             response.getWriter().println(""Your results are: "");
   71 |
   72 |             //  System.out.println(""your results are"");
   73 |             response.getWriter().println(results.toString());
   74 |             //  System.out.println(results);
   75 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   76 |             response.getWriter()
   77 |                     .println(
   78 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   60 |                     break;
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   68 |         try {
   69 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  70 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   71 |             response.getWriter().println(""Your results are: "");
   72 |
   73 |             //  System.out.println(""Your results are"");
   74 |             while (results.next()) {
   75 |                 response.getWriter()
   76 |                         .println(
   77 |                                 org.owasp
   78 |                                                 .esapi
   79 |                                                 .ESAPI
   80 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   60 |                     break;
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   68 |         try {
   69 |             java.util.List<String> results =
>  70 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   71 |                             sql,
   72 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   73 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   74 |                                         throws java.sql.SQLException {
   75 |                                     try {
   76 |                                         return rs.getString(""USERNAME"");
   77 |                                     } catch (java.sql.SQLException e) {
   78 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   79 |                                                 .hideSQLErrors) {
   80 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   60 |                     break;
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   68 |         try {
   69 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  70 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   71 |             response.getWriter().println(""Your results are: "");
   72 |
   73 |             //  System.out.println(""Your results are"");
   74 |             while (results.next()) {
   75 |                 response.getWriter()
   76 |                         .println(
   77 |                                 org.owasp
   78 |                                                 .esapi
   79 |                                                 .ESAPI
   80 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   60 |                     break;
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   68 |         try {
   69 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  70 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   71 |             response.getWriter().println(""Your results are: "");
   72 |
   73 |             //  System.out.println(""Your results are"");
   74 |             while (results.next()) {
   75 |                 response.getWriter()
   76 |                         .println(
   77 |                                 org.owasp
   78 |                                                 .esapi
   79 |                                                 .ESAPI
   80 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   60 |                     break;
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         try {
   68 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   69 |
>  70 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
   71 |             response.getWriter()
   72 |                     .println(
   73 |                             ""No results can be displayed for query: ""
   74 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
   75 |                                     + ""<br>""
   76 |                                     + "" because the Spring batchUpdate method doesn't return results."");
   77 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
   78 |             // method doesn't return results."");
   79 |         } catch (org.springframework.dao.DataAccessException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java,71,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   61 |                 }
   62 |             }
   63 |         }
   64 |
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql =
   68 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   69 |         try {
   70 |             java.util.Map<String, Object> results =
>  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
   72 |             response.getWriter().println(""Your results are: "");
   73 |
   74 |             //  System.out.println(""Your results are"");
   75 |             response.getWriter()
   76 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
   77 |             //  System.out.println(results.toString());
   78 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   79 |             response.getWriter()
   80 |                     .println(
   81 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   63 |         }
   64 |
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql =
   68 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   69 |         try {
   70 |             // Long results =
   71 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
   72 |             Long results =
>  73 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   74 |                             sql, Long.class);
   75 |             response.getWriter().println(""Your results are: "");
   76 |
   77 |             //  System.out.println(""your results are"");
   78 |             response.getWriter().println(results.toString());
   79 |             //  System.out.println(results);
   80 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   81 |             response.getWriter()
   82 |                     .println(
   83 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java,74,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   64 |         try {
   65 |             java.sql.Connection connection =
   66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   67 |             java.sql.PreparedStatement statement =
   68 |                     connection.prepareStatement(
   69 |                             sql,
   70 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   71 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
   72 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
   73 |             statement.setString(1, ""foo"");
>  74 |             statement.execute();
   75 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   76 |         } catch (java.sql.SQLException e) {
   77 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   78 |                 response.getWriter().println(""Error processing request."");
   79 |                 return;
   80 |             } else throw new ServletException(e);
   81 |         }
   82 |     } // end doPost
   83 |
   84 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java,74,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   64 |  }
   65 |
   66 |  String bar = new Test().doSomething(request, param);
   67 |
   68 |  String sql = ""{call "" + bar + ""}"";
   69 |
   70 |  try {
   71 |      java.sql.Connection connection =
   72 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   73 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
>  74 |      java.sql.ResultSet rs = statement.executeQuery();
   75 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   76 |
   77 |  } catch (java.sql.SQLException e) {
   78 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   79 |          response.getWriter().println(""Error processing request."");
   80 |          return;
   81 |      } else throw new ServletException(e);
   82 |  }
   83 | / end doPost
   84 |
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
   68 |
   69 |         try {
   70 |             java.sql.Connection connection =
   71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   72 |             java.sql.PreparedStatement statement =
   73 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
   74 |             statement.setString(1, ""foo"");
>  75 |             statement.execute();
   76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   77 |         } catch (java.sql.SQLException e) {
   78 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   79 |                 response.getWriter().println(""Error processing request."");
   80 |                 return;
   81 |             } else throw new ServletException(e);
   82 |         }
   83 |     } // end doPost
   84 |
   85 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
   68 |
   69 |         try {
   70 |             java.sql.Connection connection =
   71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   72 |             java.sql.PreparedStatement statement =
   73 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
   74 |             statement.setString(1, ""foo"");
>  75 |             statement.execute();
   76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   77 |         } catch (java.sql.SQLException e) {
   78 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   79 |                 response.getWriter().println(""Error processing request."");
   80 |                 return;
   81 |             } else throw new ServletException(e);
   82 |         }
   83 |     } // end doPost
   84 |
   85 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         String bar = new Test().doSomething(request, param);
   66 |
   67 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
   68 |
   69 |         try {
   70 |             java.sql.Connection connection =
   71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   72 |             java.sql.PreparedStatement statement =
   73 |                     connection.prepareStatement(sql, new int[] {1, 2});
   74 |             statement.setString(1, ""foo"");
>  75 |             statement.execute();
   76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   77 |         } catch (java.sql.SQLException e) {
   78 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   79 |                 response.getWriter().println(""Error processing request."");
   80 |                 return;
   81 |             } else throw new ServletException(e);
   82 |         }
   83 |     } // end doPost
   84 |
   85 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02644.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   76 |             response.getWriter().println(""Your results are: "");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |             while (results.next()) {
   80 |                 response.getWriter()
   81 |                         .println(
   82 |                                 org.owasp
   83 |                                                 .esapi
   84 |                                                 .ESAPI
   85 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02645.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   76 |             response.getWriter().println(""Your results are: "");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |             while (results.next()) {
   80 |                 response.getWriter()
   81 |                         .println(
   82 |                                 org.owasp
   83 |                                                 .esapi
   84 |                                                 .ESAPI
   85 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02641.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             java.util.List<String> results =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   76 |                             sql,
   77 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   78 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   79 |                                         throws java.sql.SQLException {
   80 |                                     try {
   81 |                                         return rs.getString(""USERNAME"");
   82 |                                     } catch (java.sql.SQLException e) {
   83 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   84 |                                                 .hideSQLErrors) {
   85 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02642.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             java.util.List<java.util.Map<String, Object>> list =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
   76 |             response.getWriter().println(""Your results are: <br>"");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |
   80 |             for (Object o : list) {
   81 |                 response.getWriter()
   82 |                         .println(
   83 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
   84 |                                         + ""<br>"");
   85 |                 //   System.out.println(o.toString());
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02643.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             java.util.List<java.util.Map<String, Object>> list =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
   76 |             response.getWriter().println(""Your results are: <br>"");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |
   80 |             for (Object o : list) {
   81 |                 response.getWriter()
   82 |                         .println(
   83 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
   84 |                                         + ""<br>"");
   85 |                 //   System.out.println(o.toString());
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01726.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   76 |             response.getWriter().println(""Your results are: "");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |             while (results.next()) {
   80 |                 response.getWriter()
   81 |                         .println(
   82 |                                 org.owasp
   83 |                                                 .esapi
   84 |                                                 .ESAPI
   85 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01721.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             java.util.List<String> results =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
   76 |                             sql,
   77 |                             new org.springframework.jdbc.core.RowMapper<String>() {
   78 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
   79 |                                         throws java.sql.SQLException {
   80 |                                     try {
   81 |                                         return rs.getString(""USERNAME"");
   82 |                                     } catch (java.sql.SQLException e) {
   83 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
   84 |                                                 .hideSQLErrors) {
   85 |                                             return ""Error processing query."";
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01724.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |         try {
   74 |             java.util.List<java.util.Map<String, Object>> list =
>  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
   76 |             response.getWriter().println(""Your results are: <br>"");
   77 |
   78 |             //  System.out.println(""Your results are"");
   79 |
   80 |             for (Object o : list) {
   81 |                 response.getWriter()
   82 |                         .println(
   83 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
   84 |                                         + ""<br>"");
   85 |                 //   System.out.println(o.toString());
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01727.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         try {
   73 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   74 |
>  75 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
   76 |             response.getWriter()
   77 |                     .println(
   78 |                             ""No results can be displayed for query: ""
   79 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
   80 |                                     + ""<br>""
   81 |                                     + "" because the Spring batchUpdate method doesn't return results."");
   82 |         } catch (org.springframework.dao.DataAccessException e) {
   83 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   84 |                 response.getWriter().println(""Error processing request."");
   85 |             } else throw new ServletException(e);
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01720.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   65 |         if (ampersandLoc != -1) {
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         try {
   73 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   74 |
>  75 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
   76 |             response.getWriter()
   77 |                     .println(
   78 |                             ""No results can be displayed for query: ""
   79 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
   80 |                                     + ""<br>""
   81 |                                     + "" because the Spring execute method doesn't return results."");
   82 |
   83 |         } catch (org.springframework.dao.DataAccessException e) {
   84 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   85 |                 response.getWriter().println(""Error processing request."");
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01725.java,76,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql =
   73 |                 ""SELECT TOP 1 USERNAME from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   74 |         try {
   75 |             Object results =
>  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   77 |                             sql, new Object[] {}, String.class);
   78 |             response.getWriter().println(""Your results are: "");
   79 |
   80 |             //  System.out.println(""Your results are"");
   81 |             response.getWriter()
   82 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
   83 |             //  System.out.println(results.toString());
   84 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   85 |             response.getWriter()
   86 |                     .println(
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             int count = statement.executeUpdate(sql);
   78 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
   79 |         } catch (java.sql.SQLException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   81 |                 response.getWriter().println(""Error processing request."");
   82 |                 return;
   83 |             } else throw new ServletException(e);
   84 |         }
   85 |     } // end doPost
   86 |
   87 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.addBatch(sql);
   78 |             int[] counts = statement.executeBatch();
   79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
   80 |         } catch (java.sql.SQLException e) {
   81 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   82 |                 response.getWriter().println(""Error processing request."");
   83 |                 return;
   84 |             } else throw new ServletException(e);
   85 |         }
   86 |     } // end doPost
   87 |
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.execute(sql, new String[] {""username"", ""password""});
   78 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   79 |         } catch (java.sql.SQLException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   81 |                 response.getWriter().println(""Error processing request."");
   82 |                 return;
   83 |             } else throw new ServletException(e);
   84 |         }
   85 |     } // end doPost
   86 |
   87 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.execute(sql, new int[] {1, 2});
   78 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   79 |         } catch (java.sql.SQLException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   81 |                 response.getWriter().println(""Error processing request."");
   82 |                 return;
   83 |             } else throw new ServletException(e);
   84 |         }
   85 |     } // end doPost
   86 |
   87 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.addBatch(sql);
   78 |             int[] counts = statement.executeBatch();
   79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
   80 |         } catch (java.sql.SQLException e) {
   81 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   82 |                 response.getWriter().println(""Error processing request."");
   83 |                 return;
   84 |             } else throw new ServletException(e);
   85 |         }
   86 |     } // end doPost
   87 |
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
   78 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   79 |         } catch (java.sql.SQLException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   81 |                 response.getWriter().println(""Error processing request."");
   82 |                 return;
   83 |             } else throw new ServletException(e);
   84 |         }
   85 |     } // end doPost
   86 |
   87 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   67 |         }
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Statement statement =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  77 |             statement.execute(sql, new String[] {""username"", ""password""});
   78 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   79 |         } catch (java.sql.SQLException e) {
   80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   81 |                 response.getWriter().println(""Error processing request."");
   82 |                 return;
   83 |             } else throw new ServletException(e);
   84 |         }
   85 |     } // end doPost
   86 |
   87 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |         String bar = new Test().doSomething(request, param);
   71 |
   72 |         String sql =
   73 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   74 |         try {
   75 |             // int results =
   76 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
   77 |             Integer results =
>  78 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   79 |                             sql, Integer.class);
   80 |             response.getWriter().println(""Your results are: "");
   81 |
   82 |             //  System.out.println(""Your results are: "");
   83 |             response.getWriter().println(results.toString());
   84 |             //  System.out.println(results);
   85 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   86 |             response.getWriter()
   87 |                     .println(
   88 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   68 |  String sql = ""{call "" + bar + ""}"";
   69 |
   70 |  try {
   71 |      java.sql.Connection connection =
   72 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   73 |      java.sql.CallableStatement statement =
   74 |              connection.prepareCall(
   75 |                      sql,
   76 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   77 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
>  78 |      java.sql.ResultSet rs = statement.executeQuery();
   79 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   80 |  } catch (java.sql.SQLException e) {
   81 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   82 |          response.getWriter().println(""Error processing request."");
   83 |          return;
   84 |      } else throw new ServletException(e);
   85 |  }
   86 | / end doPost
   87 |
   88 | vate class Test {
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   68 |  String sql = ""{call "" + bar + ""}"";
   69 |
   70 |  try {
   71 |      java.sql.Connection connection =
   72 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   73 |      java.sql.CallableStatement statement =
   74 |              connection.prepareCall(
   75 |                      sql,
   76 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   77 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
>  78 |      java.sql.ResultSet rs = statement.executeQuery();
   79 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   80 |  } catch (java.sql.SQLException e) {
   81 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   82 |          response.getWriter().println(""Error processing request."");
   83 |          return;
   84 |      } else throw new ServletException(e);
   85 |  }
   86 | / end doPost
   87 |
   88 | vate class Test {
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   68 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |  String bar = doSomething(request, param);
   71 |
   72 |  String sql = ""{call "" + bar + ""}"";
   73 |
   74 |  try {
   75 |      java.sql.Connection connection =
   76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
>  78 |      java.sql.ResultSet rs = statement.executeQuery();
   79 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   80 |
   81 |  } catch (java.sql.SQLException e) {
   82 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   83 |          response.getWriter().println(""Error processing request."");
   84 |          return;
   85 |      } else throw new ServletException(e);
   86 |  }
   87 | / end doPost
   88 |
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   68 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
   69 |
   70 |  String bar = new Test().doSomething(request, param);
   71 |
   72 |  String sql = ""{call "" + bar + ""}"";
   73 |
   74 |  try {
   75 |      java.sql.Connection connection =
   76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
>  78 |      java.sql.ResultSet rs = statement.executeQuery();
   79 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   80 |
   81 |  } catch (java.sql.SQLException e) {
   82 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   83 |          response.getWriter().println(""Error processing request."");
   84 |          return;
   85 |      } else throw new ServletException(e);
   86 |  }
   87 | / end doPost
   88 |
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java,79,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   69 |
   70 |         String bar = doSomething(request, param);
   71 |
   72 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
   73 |
   74 |         try {
   75 |             java.sql.Connection connection =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |             java.sql.PreparedStatement statement = connection.prepareStatement(sql);
   78 |             statement.setString(1, ""foo"");
>  79 |             statement.execute();
   80 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   81 |         } catch (java.sql.SQLException e) {
   82 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   83 |                 response.getWriter().println(""Error processing request."");
   84 |                 return;
   85 |             } else throw new ServletException(e);
   86 |         }
   87 |     } // end doPost
   88 |
   89 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java,79,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   69 |
   70 |  try {
   71 |      java.sql.Connection connection =
   72 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   73 |      java.sql.CallableStatement statement =
   74 |              connection.prepareCall(
   75 |                      sql,
   76 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   77 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
   78 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
>  79 |      java.sql.ResultSet rs = statement.executeQuery();
   80 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   81 |  } catch (java.sql.SQLException e) {
   82 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   83 |          response.getWriter().println(""Error processing request."");
   84 |          return;
   85 |      } else throw new ServletException(e);
   86 |  }
   87 | / end doPost
   88 |
   89 | vate class Test {
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00845.java,80,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   70 |         String bar;
   71 |
   72 |         // Simple ? condition that assigns param to bar on false condition
   73 |         int num = 106;
   74 |
   75 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
   76 |
   77 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   78 |         try {
   79 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
>  80 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
   81 |             response.getWriter().println(""Your results are: "");
   82 |
   83 |             //  System.out.println(""Your results are"");
   84 |             while (results.next()) {
   85 |                 response.getWriter()
   86 |                         .println(
   87 |                                 org.owasp
   88 |                                                 .esapi
   89 |                                                 .ESAPI
   90 |                                                 .encoder()
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java,82,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   72 |  String sql = ""{call "" + bar + ""}"";
   73 |
   74 |  try {
   75 |      java.sql.Connection connection =
   76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |      java.sql.CallableStatement statement =
   78 |              connection.prepareCall(
   79 |                      sql,
   80 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
>  82 |      java.sql.ResultSet rs = statement.executeQuery();
   83 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   84 |  } catch (java.sql.SQLException e) {
   85 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   86 |          response.getWriter().println(""Error processing request."");
   87 |          return;
   88 |      } else throw new ServletException(e);
   89 |  }
   90 | / end doPost
   91 |
   92 | vate static String doSomething(HttpServletRequest request, String param)
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java,82,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   72 |  String sql = ""{call "" + bar + ""}"";
   73 |
   74 |  try {
   75 |      java.sql.Connection connection =
   76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |      java.sql.CallableStatement statement =
   78 |              connection.prepareCall(
   79 |                      sql,
   80 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
>  82 |      java.sql.ResultSet rs = statement.executeQuery();
   83 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   84 |  } catch (java.sql.SQLException e) {
   85 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   86 |          response.getWriter().println(""Error processing request."");
   87 |          return;
   88 |      } else throw new ServletException(e);
   89 |  }
   90 | / end doPost
   91 |
   92 | vate static String doSomething(HttpServletRequest request, String param)
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00843.java,83,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   73 |         map12983.put(""keyB-12983"", param); // put it in a collection
   74 |         map12983.put(""keyC"", ""another-Value""); // put some stuff in the collection
   75 |         bar = (String) map12983.get(""keyB-12983""); // get it back out
   76 |
   77 |         String sql =
   78 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   79 |         try {
   80 |             // Long results =
   81 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
   82 |             Long results =
>  83 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   84 |                             sql, Long.class);
   85 |             response.getWriter().println(""Your results are: "");
   86 |
   87 |             //  System.out.println(""your results are"");
   88 |             response.getWriter().println(results.toString());
   89 |             //  System.out.println(results);
   90 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   91 |             response.getWriter()
   92 |                     .println(
   93 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01715.java,83,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   73 |
   74 |         try {
   75 |             java.sql.Connection connection =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |             java.sql.PreparedStatement statement =
   78 |                     connection.prepareStatement(
   79 |                             sql,
   80 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
   82 |             statement.setString(1, ""foo"");
>  83 |             statement.execute();
   84 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   85 |         } catch (java.sql.SQLException e) {
   86 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   87 |                 response.getWriter().println(""Error processing request."");
   88 |                 return;
   89 |             } else throw new ServletException(e);
   90 |         }
   91 |     } // end doPost
   92 |
   93 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java,83,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   73 |
   74 |         try {
   75 |             java.sql.Connection connection =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |             java.sql.PreparedStatement statement =
   78 |                     connection.prepareStatement(
   79 |                             sql,
   80 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
   82 |             statement.setString(1, ""foo"");
>  83 |             statement.execute();
   84 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   85 |         } catch (java.sql.SQLException e) {
   86 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   87 |                 response.getWriter().println(""Error processing request."");
   88 |                 return;
   89 |             } else throw new ServletException(e);
   90 |         }
   91 |     } // end doPost
   92 |
   93 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java,83,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   73 |
   74 |  try {
   75 |      java.sql.Connection connection =
   76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |      java.sql.CallableStatement statement =
   78 |              connection.prepareCall(
   79 |                      sql,
   80 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
   82 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
>  83 |      java.sql.ResultSet rs = statement.executeQuery();
   84 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
   85 |  } catch (java.sql.SQLException e) {
   86 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   87 |          response.getWriter().println(""Error processing request."");
   88 |          return;
   89 |      } else throw new ServletException(e);
   90 |  }
   91 | / end doPost
   92 |
   93 | vate static String doSomething(HttpServletRequest request, String param)
      ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java,84,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   74 |         try {
   75 |             java.sql.Connection connection =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |             java.sql.PreparedStatement statement =
   78 |                     connection.prepareStatement(
   79 |                             sql,
   80 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
   82 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
   83 |             statement.setString(1, ""foo"");
>  84 |             statement.execute();
   85 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   86 |         } catch (java.sql.SQLException e) {
   87 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   88 |                 response.getWriter().println(""Error processing request."");
   89 |                 return;
   90 |             } else throw new ServletException(e);
   91 |         }
   92 |     } // end doPost
   93 |
   94 |     private class Test {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java,84,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   74 |         try {
   75 |             java.sql.Connection connection =
   76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   77 |             java.sql.PreparedStatement statement =
   78 |                     connection.prepareStatement(
   79 |                             sql,
   80 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   81 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
   82 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
   83 |             statement.setString(1, ""foo"");
>  84 |             statement.execute();
   85 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   86 |         } catch (java.sql.SQLException e) {
   87 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   88 |                 response.getWriter().println(""Error processing request."");
   89 |                 return;
   90 |             } else throw new ServletException(e);
   91 |         }
   92 |     } // end doPost
   93 |
   94 |     private static String doSomething(HttpServletRequest request, String param)
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00842.java,88,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   78 |
   79 |             bar = valuesList.get(0); // get the param value
   80 |         }
   81 |
   82 |         String sql =
   83 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   84 |         try {
   85 |             // int results =
   86 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
   87 |             Integer results =
>  88 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
   89 |                             sql, Integer.class);
   90 |             response.getWriter().println(""Your results are: "");
   91 |
   92 |             //  System.out.println(""Your results are: "");
   93 |             response.getWriter().println(results.toString());
   94 |             //  System.out.println(results);
   95 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
   96 |             response.getWriter()
   97 |                     .println(
   98 |                             ""No results returned for query: ""
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java,91,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   80 |                 break;
   81 |             default:
   82 |                 bar = ""bobs_your_uncle"";
   83 |                 break;
   84 |         }
   85 |
   86 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   87 |
   88 |         try {
   89 |             java.sql.Statement statement =
   90 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
>  91 |             statement.execute(sql, new int[] {1, 2});
   92 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   93 |         } catch (java.sql.SQLException e) {
   94 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   95 |                 response.getWriter().println(""Error processing request."");
   96 |                 return;
   97 |             } else throw new ServletException(e);
   98 |         }
   99 |     }
  100 | }
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00593.java,93,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   82 |
   83 |         try {
   84 |             java.sql.Connection connection =
   85 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
   86 |             java.sql.PreparedStatement statement =
   87 |                     connection.prepareStatement(
   88 |                             sql,
   89 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
   90 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
   91 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
   92 |             statement.setString(1, ""foo"");
>  93 |             statement.execute();
   94 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
   95 |         } catch (java.sql.SQLException e) {
   96 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
   97 |                 response.getWriter().println(""Error processing request."");
   98 |                 return;
   99 |             } else throw new ServletException(e);
  100 |         }
  101 |     }
  102 | }
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00841.java,94,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
   84 |                 bar = param;
   85 |                 break;
   86 |             default:
   87 |                 bar = ""bobs_your_uncle"";
   88 |                 break;
   89 |         }
   90 |
   91 |         try {
   92 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
   93 |
>  94 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
   95 |             response.getWriter()
   96 |                     .println(
   97 |                             ""No results can be displayed for query: ""
   98 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
   99 |                                     + ""<br>""
  100 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  101 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  102 |             // method doesn't return results."");
  103 |         } catch (org.springframework.dao.DataAccessException e) {
  104 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
      ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00026.java,50,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  40 |             throws ServletException, IOException {
  41 |         // some code
  42 |         response.setContentType(""text/html;charset=UTF-8"");
  43 |
  44 |         String param = request.getParameter(""BenchmarkTest00026"");
  45 |         if (param == null) param = """";
  46 |
  47 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  48 |         try {
  49 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
> 50 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
  51 |             response.getWriter().println(""Your results are: "");
  52 |
  53 |             //  System.out.println(""Your results are"");
  54 |             while (results.next()) {
  55 |                 response.getWriter()
  56 |                         .println(
  57 |                                 org.owasp
  58 |                                                 .esapi
  59 |                                                 .ESAPI
  60 |                                                 .encoder()
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00027.java,52,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  41 |         // some code
  42 |         response.setContentType(""text/html;charset=UTF-8"");
  43 |
  44 |         String param = request.getParameter(""BenchmarkTest00027"");
  45 |         if (param == null) param = """";
  46 |
  47 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
  48 |
  49 |         try {
  50 |             java.sql.Statement statement =
  51 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 52 |             int count = statement.executeUpdate(sql);
  53 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  54 |         } catch (java.sql.SQLException e) {
  55 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  56 |                 response.getWriter().println(""Error processing request."");
  57 |                 return;
  58 |             } else throw new ServletException(e);
  59 |         }
  60 |     }
  61 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02178.java,51,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  41 |         response.setContentType(""text/html;charset=UTF-8"");
  42 |
  43 |         String param = request.getParameter(""BenchmarkTest02178"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |         try {
  50 |             java.util.List<java.util.Map<String, Object>> list =
> 51 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  52 |             response.getWriter().println(""Your results are: <br>"");
  53 |
  54 |             //  System.out.println(""Your results are"");
  55 |
  56 |             for (Object o : list) {
  57 |                 response.getWriter()
  58 |                         .println(
  59 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  60 |                                         + ""<br>"");
  61 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02181.java,52,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  42 |
  43 |         String param = request.getParameter(""BenchmarkTest02181"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql =
  49 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  50 |         try {
  51 |             java.util.Map<String, Object> results =
> 52 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  53 |             response.getWriter().println(""Your results are: "");
  54 |
  55 |             //  System.out.println(""Your results are"");
  56 |             response.getWriter()
  57 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  58 |             //  System.out.println(results.toString());
  59 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  60 |             response.getWriter()
  61 |                     .println(
  62 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02182.java,52,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  42 |
  43 |         String param = request.getParameter(""BenchmarkTest02182"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql =
  49 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  50 |         try {
  51 |             java.util.Map<String, Object> results =
> 52 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  53 |             response.getWriter().println(""Your results are: "");
  54 |
  55 |             //  System.out.println(""Your results are"");
  56 |             response.getWriter()
  57 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  58 |             //  System.out.println(results.toString());
  59 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  60 |             response.getWriter()
  61 |                     .println(
  62 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00439.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  42 |
  43 |  String param = request.getParameter(""BenchmarkTest00439"");
  44 |  if (param == null) param = """";
  45 |
  46 |  String bar = param;
  47 |
  48 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |
  50 |  try {
  51 |      java.sql.Statement statement =
  52 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  54 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  55 |  } catch (java.sql.SQLException e) {
  56 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |          response.getWriter().println(""Error processing request."");
  58 |          return;
  59 |      } else throw new ServletException(e);
  60 |  }
  61 |
  62 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00434.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest00434"");
  44 |         if (param == null) param = """";
  45 |
  46 |         org.owasp.benchmark.helpers.ThingInterface thing =
  47 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  48 |         String bar = thing.doSomething(param);
  49 |
  50 |         try {
  51 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |
> 53 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  54 |             response.getWriter()
  55 |                     .println(
  56 |                             ""No results can be displayed for query: ""
  57 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  58 |                                     + ""<br>""
  59 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  60 |         } catch (org.springframework.dao.DataAccessException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest01311"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             statement.execute(sql);
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest01312"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             statement.execute(sql, new String[] {""username"", ""password""});
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest01313"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             int count = statement.executeUpdate(sql);
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest01314"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             int count = statement.executeUpdate(sql);
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02186.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest02186"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             statement.execute(sql);
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String param = request.getParameter(""BenchmarkTest02187"");
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  49 |
  50 |         try {
  51 |             java.sql.Statement statement =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 53 |             statement.execute(sql);
  54 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  55 |         } catch (java.sql.SQLException e) {
  56 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  57 |                 response.getWriter().println(""Error processing request."");
  58 |                 return;
  59 |             } else throw new ServletException(e);
  60 |         }
  61 |     } // end doPost
  62 |
  63 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01624.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String[] values = request.getParameterValues(""BenchmarkTest01624"");
  44 |         String param;
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         try {
  51 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |
> 53 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  54 |             response.getWriter()
  55 |                     .println(
  56 |                             ""No results can be displayed for query: ""
  57 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  58 |                                     + ""<br>""
  59 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  60 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  61 |             // method doesn't return results."");
  62 |         } catch (org.springframework.dao.DataAccessException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02537.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         String[] values = request.getParameterValues(""BenchmarkTest02537"");
  44 |         String param;
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         try {
  51 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |
> 53 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  54 |             response.getWriter()
  55 |                     .println(
  56 |                             ""No results can be displayed for query: ""
  57 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  58 |                                     + ""<br>""
  59 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  60 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  61 |             // method doesn't return results."");
  62 |         } catch (org.springframework.dao.DataAccessException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01554.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         org.owasp.benchmark.helpers.SeparateClassRequest scr =
  44 |                 new org.owasp.benchmark.helpers.SeparateClassRequest(request);
  45 |         String param = scr.getTheParameter(""BenchmarkTest01554"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |         try {
  52 |             java.util.List<java.util.Map<String, Object>> list =
> 53 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  54 |             response.getWriter().println(""Your results are: <br>"");
  55 |
  56 |             //  System.out.println(""Your results are"");
  57 |
  58 |             for (Object o : list) {
  59 |                 response.getWriter()
  60 |                         .println(
  61 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  62 |                                         + ""<br>"");
  63 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02451.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |         org.owasp.benchmark.helpers.SeparateClassRequest scr =
  44 |                 new org.owasp.benchmark.helpers.SeparateClassRequest(request);
  45 |         String param = scr.getTheParameter(""BenchmarkTest02451"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         try {
  51 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |
> 53 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  54 |             response.getWriter()
  55 |                     .println(
  56 |                             ""No results can be displayed for query: ""
  57 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  58 |                                     + ""<br>""
  59 |                                     + "" because the Spring execute method doesn't return results."");
  60 |
  61 |         } catch (org.springframework.dao.DataAccessException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00025.java,53,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |
  44 |         String param = request.getParameter(""BenchmarkTest00025"");
  45 |         if (param == null) param = """";
  46 |
  47 |         String sql =
  48 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  49 |         try {
  50 |             // Long results =
  51 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  52 |             Long results =
> 53 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  54 |                             sql, Long.class);
  55 |             response.getWriter().println(""Your results are: "");
  56 |
  57 |             //  System.out.println(""your results are"");
  58 |             response.getWriter().println(results.toString());
  59 |             //  System.out.println(results);
  60 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  61 |             response.getWriter()
  62 |                     .println(
  63 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00043.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  43 |
  44 |         org.owasp.benchmark.helpers.SeparateClassRequest scr =
  45 |                 new org.owasp.benchmark.helpers.SeparateClassRequest(request);
  46 |         String param = scr.getTheParameter(""BenchmarkTest00043"");
  47 |         if (param == null) param = """";
  48 |
  49 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
  50 |
  51 |         try {
  52 |             java.sql.Statement statement =
  53 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 54 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  55 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  56 |         } catch (java.sql.SQLException e) {
  57 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  58 |                 response.getWriter().println(""Error processing request."");
  59 |                 return;
  60 |             } else throw new ServletException(e);
  61 |         }
  62 |     }
  63 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02453.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |                 new org.owasp.benchmark.helpers.SeparateClassRequest(request);
  45 |         String param = scr.getTheParameter(""BenchmarkTest02453"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql =
  51 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |         try {
  53 |             java.util.Map<String, Object> results =
> 54 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  55 |             response.getWriter().println(""Your results are: "");
  56 |
  57 |             //  System.out.println(""Your results are"");
  58 |             response.getWriter()
  59 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  60 |             //  System.out.println(results.toString());
  61 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  62 |             response.getWriter()
  63 |                     .println(
  64 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00681.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |          new org.owasp.benchmark.helpers.SeparateClassRequest(request);
  45 |  String param = scr.getTheParameter(""BenchmarkTest00681"");
  46 |  if (param == null) param = """";
  47 |
  48 |  String bar = param;
  49 |
  50 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |  try {
  53 |      java.sql.Statement statement =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  56 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  57 |  } catch (java.sql.SQLException e) {
  58 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |          response.getWriter().println(""Error processing request."");
  60 |          return;
  61 |      } else throw new ServletException(e);
  62 |  }
  63 |
  64 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02179.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = doSomething(request, param);
  47 |
  48 |         String sql =
  49 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  50 |         try {
  51 |             // Long results =
  52 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  53 |             Long results =
> 54 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  55 |                             sql, Long.class);
  56 |             response.getWriter().println(""Your results are: "");
  57 |
  58 |             //  System.out.println(""your results are"");
  59 |             response.getWriter().println(results.toString());
  60 |             //  System.out.println(results);
  61 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  62 |             response.getWriter()
  63 |                     .println(
  64 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01308.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |         if (param == null) param = """";
  45 |
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql =
  49 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  50 |         try {
  51 |             // Long results =
  52 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  53 |             Long results =
> 54 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  55 |                             sql, Long.class);
  56 |             response.getWriter().println(""Your results are: "");
  57 |
  58 |             //  System.out.println(""your results are"");
  59 |             response.getWriter().println(results.toString());
  60 |             //  System.out.println(results);
  61 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  62 |             response.getWriter()
  63 |                     .println(
  64 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00441.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |         if (param == null) param = """";
  45 |
  46 |         org.owasp.benchmark.helpers.ThingInterface thing =
  47 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  48 |         String bar = thing.doSomething(param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     }
  64 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00032.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |         java.util.Map<String, String[]> map = request.getParameterMap();
  45 |         String param = """";
  46 |         if (!map.isEmpty()) {
  47 |             String[] values = map.get(""BenchmarkTest00032"");
  48 |             if (values != null) param = values[0];
  49 |         }
  50 |
  51 |         try {
  52 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  53 |
> 54 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  55 |             response.getWriter()
  56 |                     .println(
  57 |                             ""No results can be displayed for query: ""
  58 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  59 |                                     + ""<br>""
  60 |                                     + "" because the Spring execute method doesn't return results."");
  61 |
  62 |         } catch (org.springframework.dao.DataAccessException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00033.java,54,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  44 |         java.util.Map<String, String[]> map = request.getParameterMap();
  45 |         String param = """";
  46 |         if (!map.isEmpty()) {
  47 |             String[] values = map.get(""BenchmarkTest00033"");
  48 |             if (values != null) param = values[0];
  49 |         }
  50 |
  51 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  52 |         try {
  53 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
> 54 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
  55 |             response.getWriter().println(""Your results are: "");
  56 |
  57 |             //  System.out.println(""Your results are"");
  58 |             while (results.next()) {
  59 |                 response.getWriter()
  60 |                         .println(
  61 |                                 org.owasp
  62 |                                                 .esapi
  63 |                                                 .ESAPI
  64 |                                                 .encoder()
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = """";
  46 |         if (!map.isEmpty()) {
  47 |             String[] values = map.get(""BenchmarkTest00034"");
  48 |             if (values != null) param = values[0];
  49 |         }
  50 |
  51 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  52 |
  53 |         try {
  54 |             java.sql.Statement statement =
  55 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 56 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  58 |         } catch (java.sql.SQLException e) {
  59 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |                 response.getWriter().println(""Error processing request."");
  61 |                 return;
  62 |             } else throw new ServletException(e);
  63 |         }
  64 |     }
  65 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01557.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest01557"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01558.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest01558"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01559.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest01559"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql, new int[] {1, 2});
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01560.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest01560"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02454.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest02454"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.addBatch(sql);
  56 |             int[] counts = statement.executeBatch();
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  58 |         } catch (java.sql.SQLException e) {
  59 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |                 response.getWriter().println(""Error processing request."");
  61 |                 return;
  62 |             } else throw new ServletException(e);
  63 |         }
  64 |     } // end doPost
  65 |
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02455.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         String param = scr.getTheParameter(""BenchmarkTest02455"");
  46 |         if (param == null) param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02272.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (!map.isEmpty()) {
  46 |             String[] values = map.get(""BenchmarkTest02272"");
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         try {
  53 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
> 55 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  56 |             response.getWriter()
  57 |                     .println(
  58 |                             ""No results can be displayed for query: ""
  59 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  60 |                                     + ""<br>""
  61 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  62 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  63 |             // method doesn't return results."");
  64 |         } catch (org.springframework.dao.DataAccessException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02273.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (!map.isEmpty()) {
  46 |             String[] values = map.get(""BenchmarkTest02273"");
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         try {
  53 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
> 55 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  56 |             response.getWriter()
  57 |                     .println(
  58 |                             ""No results can be displayed for query: ""
  59 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  60 |                                     + ""<br>""
  61 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  62 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  63 |             // method doesn't return results."");
  64 |         } catch (org.springframework.dao.DataAccessException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02277.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (!map.isEmpty()) {
  46 |             String[] values = map.get(""BenchmarkTest02277"");
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  53 |         try {
  54 |             java.util.List<java.util.Map<String, Object>> list =
> 55 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  56 |             response.getWriter().println(""Your results are: <br>"");
  57 |
  58 |             //  System.out.println(""Your results are"");
  59 |
  60 |             for (Object o : list) {
  61 |                 response.getWriter()
  62 |                         .println(
  63 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  64 |                                         + ""<br>"");
  65 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02542.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.addBatch(sql);
  56 |             int[] counts = statement.executeBatch();
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  58 |         } catch (java.sql.SQLException e) {
  59 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |                 response.getWriter().println(""Error processing request."");
  61 |                 return;
  62 |             } else throw new ServletException(e);
  63 |         }
  64 |     } // end doPost
  65 |
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java,55,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  45 |         if (values != null && values.length > 0) param = values[0];
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Statement statement =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 55 |             statement.execute(sql, new String[] {""username"", ""password""});
  56 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  57 |         } catch (java.sql.SQLException e) {
  58 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  59 |                 response.getWriter().println(""Error processing request."");
  60 |                 return;
  61 |             } else throw new ServletException(e);
  62 |         }
  63 |     } // end doPost
  64 |
  65 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |             String[] values = map.get(""BenchmarkTest00512"");
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = param;
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             statement.execute(sql);
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     }
  66 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02281.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |             String[] values = map.get(""BenchmarkTest02281"");
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             java.util.Map<String, Object> results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  57 |             response.getWriter().println(""Your results are: "");
  58 |
  59 |             //  System.out.println(""Your results are"");
  60 |             response.getWriter()
  61 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  62 |             //  System.out.println(results.toString());
  63 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         String bar = new Test().doSomething(request, param);
  47 |
  48 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  49 |
  50 |         try {
  51 |             java.sql.Connection connection =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |             java.sql.PreparedStatement statement =
  54 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  55 |             statement.setString(1, ""foo"");
> 56 |             statement.execute();
  57 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  58 |         } catch (java.sql.SQLException e) {
  59 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  60 |                 response.getWriter().println(""Error processing request."");
  61 |                 return;
  62 |             } else throw new ServletException(e);
  63 |         }
  64 |     } // end doPost
  65 |
  66 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00431.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         String bar;
  47 |
  48 |         // Simple ? condition that assigns param to bar on false condition
  49 |         int num = 106;
  50 |
  51 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             java.util.List<String> results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
  57 |                             sql,
  58 |                             new org.springframework.jdbc.core.RowMapper<String>() {
  59 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
  60 |                                         throws java.sql.SQLException {
  61 |                                     try {
  62 |                                         return rs.getString(""USERNAME"");
  63 |                                     } catch (java.sql.SQLException e) {
  64 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
  65 |                                                 .hideSQLErrors) {
  66 |                                             return ""Error processing query."";
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00433.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         String bar;
  47 |
  48 |         // Simple if statement that assigns param to bar on true condition
  49 |         int num = 196;
  50 |         if ((500 / 42) + num > 200) bar = param;
  51 |         else bar = ""This should never happen"";
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             java.util.List<java.util.Map<String, Object>> list =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  57 |             response.getWriter().println(""Your results are: <br>"");
  58 |
  59 |             //  System.out.println(""Your results are"");
  60 |
  61 |             for (Object o : list) {
  62 |                 response.getWriter()
  63 |                         .println(
  64 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  65 |                                         + ""<br>"");
  66 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01625.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         else param = """";
  47 |
  48 |         String bar = new Test().doSomething(request, param);
  49 |
  50 |         String sql =
  51 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |         try {
  53 |             // Long results =
  54 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  55 |             Long results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  57 |                             sql, Long.class);
  58 |             response.getWriter().println(""Your results are: "");
  59 |
  60 |             //  System.out.println(""your results are"");
  61 |             response.getWriter().println(results.toString());
  62 |             //  System.out.println(results);
  63 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00764.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         else param = """";
  47 |
  48 |         String bar = param;
  49 |
  50 |         String sql =
  51 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  52 |         try {
  53 |             // Long results =
  54 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  55 |             Long results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  57 |                             sql, Long.class);
  58 |             response.getWriter().println(""Your results are: "");
  59 |
  60 |             //  System.out.println(""your results are"");
  61 |             response.getWriter().println(results.toString());
  62 |             //  System.out.println(results);
  63 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00768.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         else param = """";
  47 |
  48 |         org.owasp.benchmark.helpers.ThingInterface thing =
  49 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  50 |         String bar = thing.doSomething(param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             java.util.Map<String, Object> results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  57 |             response.getWriter().println(""Your results are: "");
  58 |
  59 |             //  System.out.println(""Your results are"");
  60 |             response.getWriter()
  61 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  62 |             //  System.out.println(results.toString());
  63 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00679.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         if (param == null) param = """";
  47 |
  48 |         org.owasp.benchmark.helpers.ThingInterface thing =
  49 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  50 |         String bar = thing.doSomething(param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             java.util.Map<String, Object> results =
> 56 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  57 |             response.getWriter().println(""Your results are: "");
  58 |
  59 |             //  System.out.println(""Your results are"");
  60 |             response.getWriter()
  61 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  62 |             //  System.out.println(results.toString());
  63 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01963.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |         }
  47 |
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = doSomething(request, param);
  52 |
  53 |         try {
  54 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  55 |
> 56 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  57 |             response.getWriter()
  58 |                     .println(
  59 |                             ""No results can be displayed for query: ""
  60 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  61 |                                     + ""<br>""
  62 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  63 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  64 |             // method doesn't return results."");
  65 |         } catch (org.springframework.dao.DataAccessException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |  else param = """";
  47 |
  48 |  String bar = doSomething(request, param);
  49 |
  50 |  String sql = ""{call "" + bar + ""}"";
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 56 |      java.sql.ResultSet rs = statement.executeQuery();
  57 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  58 |
  59 |  } catch (java.sql.SQLException e) {
  60 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |          response.getWriter().println(""Error processing request."");
  62 |          return;
  63 |      } else throw new ServletException(e);
  64 |  }
  65 | / end doPost
  66 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java,56,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  46 |  else param = """";
  47 |
  48 |  String bar = new Test().doSomething(request, param);
  49 |
  50 |  String sql = ""{call "" + bar + ""}"";
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 56 |      java.sql.ResultSet rs = statement.executeQuery();
  57 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  58 |
  59 |  } catch (java.sql.SQLException e) {
  60 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |          response.getWriter().println(""Error processing request."");
  62 |          return;
  63 |      } else throw new ServletException(e);
  64 |  }
  65 | / end doPost
  66 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql);
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             statement.execute(sql, new String[] {""username"", ""password""});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01396.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |             if (values != null) param = values[0];
  48 |         }
  49 |
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  53 |
  54 |         try {
  55 |             java.sql.Statement statement =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  58 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  59 |         } catch (java.sql.SQLException e) {
  60 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |                 response.getWriter().println(""Error processing request."");
  62 |                 return;
  63 |             } else throw new ServletException(e);
  64 |         }
  65 |     } // end doPost
  66 |
  67 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java,57,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |      if (values != null) param = values[0];
  48 |  }
  49 |
  50 |  String bar = new Test().doSomething(request, param);
  51 |
  52 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  53 |
  54 |  try {
  55 |      java.sql.Statement statement =
  56 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 57 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  58 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  59 |  } catch (java.sql.SQLException e) {
  60 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  61 |          response.getWriter().println(""Error processing request."");
  62 |          return;
  63 |      } else throw new ServletException(e);
  64 |  }
  65 | / end doPost
  66 |
  67 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00438.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  47 |
  48 |         // Simple ? condition that assigns param to bar on false condition
  49 |         int num = 106;
  50 |
  51 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql, new String[] {""username"", ""password""});
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     }
  67 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |             param = headers.nextElement(); // just grab first element
  49 |         }
  50 |
  51 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  52 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  53 |
  54 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
  55 |
  56 |         try {
  57 |             java.sql.Statement statement =
  58 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |             int count = statement.executeUpdate(sql);
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     }
  68 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.addBatch(sql);
  59 |             int[] counts = statement.executeBatch();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     } // end doPost
  68 |
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql, new String[] {""username"", ""password""});
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql, new int[] {1, 2});
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             int count = statement.executeUpdate(sql);
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.addBatch(sql);
  59 |             int[] counts = statement.executeBatch();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     } // end doPost
  68 |
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql);
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql, new String[] {""username"", ""password""});
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.execute(sql, new int[] {1, 2});
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00769.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         String bar = ""safe!"";
  49 |         java.util.HashMap<String, Object> map29572 = new java.util.HashMap<String, Object>();
  50 |         map29572.put(""keyA-29572"", ""a-Value""); // put some stuff in the collection
  51 |         map29572.put(""keyB-29572"", param); // put it in a collection
  52 |         map29572.put(""keyC"", ""another-Value""); // put some stuff in the collection
  53 |         bar = (String) map29572.get(""keyB-29572""); // get it back out
  54 |
  55 |         try {
  56 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  57 |
> 58 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  59 |             response.getWriter()
  60 |                     .println(
  61 |                             ""No results can be displayed for query: ""
  62 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  63 |                                     + ""<br>""
  64 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  65 |         } catch (org.springframework.dao.DataAccessException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |                 response.getWriter().println(""Error processing request."");
  68 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         String bar = doSomething(request, param);
  49 |
  50 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  51 |
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  57 |             statement.setString(1, ""foo"");
> 58 |             statement.execute();
  59 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  60 |         } catch (java.sql.SQLException e) {
  61 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |                 response.getWriter().println(""Error processing request."");
  63 |                 return;
  64 |             } else throw new ServletException(e);
  65 |         }
  66 |     } // end doPost
  67 |
  68 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00435.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         map86691.put(""keyA-86691"", ""a-Value""); // put some stuff in the collection
  49 |         map86691.put(""keyB-86691"", param); // put it in a collection
  50 |         map86691.put(""keyC"", ""another-Value""); // put some stuff in the collection
  51 |         bar = (String) map86691.get(""keyB-86691""); // get it back out
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Statement statement =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 58 |             statement.addBatch(sql);
  59 |             int[] counts = statement.executeBatch();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     }
  68 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00765.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         org.owasp.benchmark.helpers.ThingInterface thing =
  49 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  50 |         String bar = thing.doSomething(param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             // Long results =
  56 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  57 |             Long results =
> 58 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  59 |                             sql, Long.class);
  60 |             response.getWriter().println(""Your results are: "");
  61 |
  62 |             //  System.out.println(""your results are"");
  63 |             response.getWriter().println(results.toString());
  64 |             //  System.out.println(results);
  65 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  66 |             response.getWriter()
  67 |                     .println(
  68 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02090.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         }
  49 |
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         try {
  56 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  57 |
> 58 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  59 |             response.getWriter()
  60 |                     .println(
  61 |                             ""No results can be displayed for query: ""
  62 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  63 |                                     + ""<br>""
  64 |                                     + "" because the Spring execute method doesn't return results."");
  65 |
  66 |         } catch (org.springframework.dao.DataAccessException e) {
  67 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  68 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01214.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         }
  49 |
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = new Test().doSomething(request, param);
  54 |
  55 |         try {
  56 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  57 |
> 58 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  59 |             response.getWriter()
  60 |                     .println(
  61 |                             ""No results can be displayed for query: ""
  62 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  63 |                                     + ""<br>""
  64 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  65 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  66 |             // method doesn't return results."");
  67 |         } catch (org.springframework.dao.DataAccessException e) {
  68 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         }
  49 |
  50 |         String bar = doSomething(request, param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             // int results =
  56 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
  57 |             Integer results =
> 58 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  59 |                             sql, Integer.class);
  60 |             response.getWriter().println(""Your results are: "");
  61 |
  62 |             //  System.out.println(""Your results are: "");
  63 |             response.getWriter().println(results.toString());
  64 |             //  System.out.println(results);
  65 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  66 |             response.getWriter()
  67 |                     .println(
  68 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         }
  49 |
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql =
  53 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  54 |         try {
  55 |             // Long results =
  56 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  57 |             Long results =
> 58 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  59 |                             sql, Long.class);
  60 |             response.getWriter().println(""Your results are: "");
  61 |
  62 |             //  System.out.println(""your results are"");
  63 |             response.getWriter().println(results.toString());
  64 |             //  System.out.println(results);
  65 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  66 |             response.getWriter()
  67 |                     .println(
  68 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00518.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |         }
  49 |
  50 |         org.owasp.benchmark.helpers.ThingInterface thing =
  51 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  52 |         String bar = thing.doSomething(param);
  53 |
  54 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  55 |
  56 |         try {
  57 |             java.sql.Statement statement =
  58 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 59 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     }
  68 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |  String sql = ""{call "" + bar + ""}"";
  49 |
  50 |  try {
  51 |      java.sql.Connection connection =
  52 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |      java.sql.CallableStatement statement =
  54 |              connection.prepareCall(
  55 |                      sql,
  56 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  57 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
> 58 |      java.sql.ResultSet rs = statement.executeQuery();
  59 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  60 |  } catch (java.sql.SQLException e) {
  61 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  62 |          response.getWriter().println(""Error processing request."");
  63 |          return;
  64 |      } else throw new ServletException(e);
  65 |  }
  66 | / end doPost
  67 |
  68 | vate static String doSomething(HttpServletRequest request, String param)
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |  }
  49 |
  50 |  String bar = doSomething(request, param);
  51 |
  52 |  String sql = ""{call "" + bar + ""}"";
  53 |
  54 |  try {
  55 |      java.sql.Connection connection =
  56 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 58 |      java.sql.ResultSet rs = statement.executeQuery();
  59 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  60 |
  61 |  } catch (java.sql.SQLException e) {
  62 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |          response.getWriter().println(""Error processing request."");
  64 |          return;
  65 |      } else throw new ServletException(e);
  66 |  }
  67 | / end doPost
  68 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00024.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |
  49 |         try {
  50 |             java.sql.Connection connection =
  51 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  52 |             java.sql.PreparedStatement statement =
  53 |                     connection.prepareStatement(
  54 |                             sql,
  55 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  56 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  57 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  58 |             statement.setString(1, ""foo"");
> 59 |             statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     }
  68 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java,58,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  48 |
  49 |  // URL Decode the header value since req.getHeader() doesn't. Unlike req.getParameter().
  50 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
  51 |
  52 |  String sql = ""{call "" + param + ""}"";
  53 |
  54 |  try {
  55 |      java.sql.Connection connection =
  56 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 58 |      java.sql.ResultSet rs = statement.executeQuery();
  59 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  60 |
  61 |  } catch (java.sql.SQLException e) {
  62 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |          response.getWriter().println(""Error processing request."");
  64 |          return;
  65 |      } else throw new ServletException(e);
  66 |  }
  67 |
  68 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00771.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |         java.util.HashMap<String, Object> map49960 = new java.util.HashMap<String, Object>();
  50 |         map49960.put(""keyA-49960"", ""a-Value""); // put some stuff in the collection
  51 |         map49960.put(""keyB-49960"", param); // put it in a collection
  52 |         map49960.put(""keyC"", ""another-Value""); // put some stuff in the collection
  53 |         bar = (String) map49960.get(""keyB-49960""); // get it back out
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             statement.execute(sql);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     }
  69 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql =
  54 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  55 |         try {
  56 |             // int results =
  57 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
  58 |             Integer results =
> 59 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  60 |                             sql, Integer.class);
  61 |             response.getWriter().println(""Your results are: "");
  62 |
  63 |             //  System.out.println(""Your results are: "");
  64 |             response.getWriter().println(results.toString());
  65 |             //  System.out.println(results);
  66 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  67 |             response.getWriter()
  68 |                     .println(
  69 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql =
  54 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  55 |         try {
  56 |             // Long results =
  57 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  58 |             Long results =
> 59 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  60 |                             sql, Long.class);
  61 |             response.getWriter().println(""Your results are: "");
  62 |
  63 |             //  System.out.println(""your results are"");
  64 |             response.getWriter().println(results.toString());
  65 |             //  System.out.println(results);
  66 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  67 |             response.getWriter()
  68 |                     .println(
  69 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00204.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  50 |
  51 |         org.owasp.benchmark.helpers.ThingInterface thing =
  52 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  53 |         String bar = thing.doSomething(param);
  54 |
  55 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     }
  69 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |
  50 |         try {
  51 |             java.sql.Connection connection =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |             java.sql.PreparedStatement statement =
  54 |                     connection.prepareStatement(
  55 |                             sql,
  56 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  57 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  58 |             statement.setString(1, ""foo"");
> 59 |             statement.execute();
  60 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  61 |         } catch (java.sql.SQLException e) {
  62 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |                 response.getWriter().println(""Error processing request."");
  64 |                 return;
  65 |             } else throw new ServletException(e);
  66 |         }
  67 |     } // end doPost
  68 |
  69 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |
  50 |  try {
  51 |      java.sql.Connection connection =
  52 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |      java.sql.CallableStatement statement =
  54 |              connection.prepareCall(
  55 |                      sql,
  56 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  57 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  58 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 59 |      java.sql.ResultSet rs = statement.executeQuery();
  60 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  61 |  } catch (java.sql.SQLException e) {
  62 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |          response.getWriter().println(""Error processing request."");
  64 |          return;
  65 |      } else throw new ServletException(e);
  66 |  }
  67 | / end doPost
  68 |
  69 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java,59,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  49 |
  50 |  try {
  51 |      java.sql.Connection connection =
  52 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |      java.sql.CallableStatement statement =
  54 |              connection.prepareCall(
  55 |                      sql,
  56 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  57 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  58 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 59 |      java.sql.ResultSet rs = statement.executeQuery();
  60 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  61 |  } catch (java.sql.SQLException e) {
  62 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  63 |          response.getWriter().println(""Error processing request."");
  64 |          return;
  65 |      } else throw new ServletException(e);
  66 |  }
  67 | / end doPost
  68 |
  69 | vate static String doSomething(HttpServletRequest request, String param)
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00677.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |             bar =
  51 |                     new String(
  52 |                             org.apache.commons.codec.binary.Base64.decodeBase64(
  53 |                                     org.apache.commons.codec.binary.Base64.encodeBase64(
  54 |                                             param.getBytes())));
  55 |         }
  56 |
  57 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  58 |         try {
  59 |             java.util.List<String> results =
> 60 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
  61 |                             sql,
  62 |                             new org.springframework.jdbc.core.RowMapper<String>() {
  63 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
  64 |                                         throws java.sql.SQLException {
  65 |                                     try {
  66 |                                         return rs.getString(""USERNAME"");
  67 |                                     } catch (java.sql.SQLException e) {
  68 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
  69 |                                                 .hideSQLErrors) {
  70 |                                             return ""Error processing query."";
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             int count = statement.executeUpdate(sql);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             statement.execute(sql);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             statement.execute(sql);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             statement.execute(sql, new int[] {1, 2});
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = new Test().doSomething(request, param);
  54 |
  55 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         // URL Decode the header value since req.getHeaders() doesn't. Unlike req.getParameters().
  51 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  52 |
  53 |         String bar = new Test().doSomething(request, param);
  54 |
  55 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  56 |
  57 |         try {
  58 |             java.sql.Statement statement =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 60 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  53 |
  54 |         try {
  55 |             java.sql.Connection connection =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |             java.sql.PreparedStatement statement =
  58 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  59 |             statement.setString(1, ""foo"");
> 60 |             statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  53 |
  54 |         try {
  55 |             java.sql.Connection connection =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |             java.sql.PreparedStatement statement =
  58 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  59 |             statement.setString(1, ""foo"");
> 60 |             statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         String bar = new Test().doSomething(request, param);
  51 |
  52 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  53 |
  54 |         try {
  55 |             java.sql.Connection connection =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |             java.sql.PreparedStatement statement =
  58 |                     connection.prepareStatement(sql, new int[] {1, 2});
  59 |             statement.setString(1, ""foo"");
> 60 |             statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |         try {
  51 |             java.sql.Connection connection =
  52 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  53 |             java.sql.PreparedStatement statement =
  54 |                     connection.prepareStatement(
  55 |                             sql,
  56 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  57 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  58 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  59 |             statement.setString(1, ""foo"");
> 60 |             statement.execute();
  61 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  62 |         } catch (java.sql.SQLException e) {
  63 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |                 response.getWriter().println(""Error processing request."");
  65 |                 return;
  66 |             } else throw new ServletException(e);
  67 |         }
  68 |     } // end doPost
  69 |
  70 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java,60,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  50 |  String sql = ""{call "" + bar + ""}"";
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement =
  56 |              connection.prepareCall(
  57 |                      sql,
  58 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
> 60 |      java.sql.ResultSet rs = statement.executeQuery();
  61 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  62 |  } catch (java.sql.SQLException e) {
  63 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  64 |          response.getWriter().println(""Error processing request."");
  65 |          return;
  66 |      } else throw new ServletException(e);
  67 |  }
  68 | / end doPost
  69 |
  70 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         String bar = doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Connection connection =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  58 |             java.sql.PreparedStatement statement =
  59 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  60 |             statement.setString(1, ""foo"");
> 61 |             statement.execute();
  62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  63 |         } catch (java.sql.SQLException e) {
  64 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |                 response.getWriter().println(""Error processing request."");
  66 |                 return;
  67 |             } else throw new ServletException(e);
  68 |         }
  69 |     } // end doPost
  70 |
  71 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         String bar = new Test().doSomething(request, param);
  52 |
  53 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  54 |
  55 |         try {
  56 |             java.sql.Connection connection =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  58 |             java.sql.PreparedStatement statement =
  59 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  60 |             statement.setString(1, ""foo"");
> 61 |             statement.execute();
  62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  63 |         } catch (java.sql.SQLException e) {
  64 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |                 response.getWriter().println(""Error processing request."");
  66 |                 return;
  67 |             } else throw new ServletException(e);
  68 |         }
  69 |     } // end doPost
  70 |
  71 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00195.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         String bar;
  52 |
  53 |         // Simple ? condition that assigns param to bar on false condition
  54 |         int num = 106;
  55 |
  56 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  57 |
  58 |         try {
  59 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  60 |
> 61 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  62 |             response.getWriter()
  63 |                     .println(
  64 |                             ""No results can be displayed for query: ""
  65 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  66 |                                     + ""<br>""
  67 |                                     + "" because the Spring execute method doesn't return results."");
  68 |
  69 |         } catch (org.springframework.dao.DataAccessException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00196.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         String bar;
  52 |
  53 |         // Simple if statement that assigns param to bar on true condition
  54 |         int num = 196;
  55 |         if ((500 / 42) + num > 200) bar = param;
  56 |         else bar = ""This should never happen"";
  57 |
  58 |         try {
  59 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  60 |
> 61 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  62 |             response.getWriter()
  63 |                     .println(
  64 |                             ""No results can be displayed for query: ""
  65 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  66 |                                     + ""<br>""
  67 |                                     + "" because the Spring execute method doesn't return results."");
  68 |
  69 |         } catch (org.springframework.dao.DataAccessException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00673.java,62,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         int num = 196;
  52 |         if ((500 / 42) + num > 200) bar = param;
  53 |         else bar = ""This should never happen"";
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement = connection.prepareStatement(sql);
  61 |             statement.setString(1, ""foo"");
> 62 |             statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |         } catch (java.sql.SQLException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |                 response.getWriter().println(""Error processing request."");
  67 |                 return;
  68 |             } else throw new ServletException(e);
  69 |         }
  70 |     }
  71 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00678.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         int num = 196;
  52 |         if ((500 / 42) + num > 200) bar = param;
  53 |         else bar = ""This should never happen"";
  54 |
  55 |         String sql =
  56 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  57 |         try {
  58 |             // Long results =
  59 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  60 |             Long results =
> 61 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  62 |                             sql, Long.class);
  63 |             response.getWriter().println(""Your results are: "");
  64 |
  65 |             //  System.out.println(""your results are"");
  66 |             response.getWriter().println(results.toString());
  67 |             //  System.out.println(results);
  68 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  69 |             response.getWriter()
  70 |                     .println(
  71 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |         org.owasp.benchmark.helpers.ThingInterface thing =
  52 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  53 |         String bar = thing.doSomething(param);
  54 |
  55 |         String sql =
  56 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  57 |         try {
  58 |             // int results =
  59 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
  60 |             Integer results =
> 61 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  62 |                             sql, Integer.class);
  63 |             response.getWriter().println(""Your results are: "");
  64 |
  65 |             //  System.out.println(""Your results are: "");
  66 |             response.getWriter().println(results.toString());
  67 |             //  System.out.println(results);
  68 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  69 |             response.getWriter()
  70 |                     .println(
  71 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00760.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |  map18915.put(""keyB-18915"", param); // put it in a collection
  52 |  map18915.put(""keyC"", ""another-Value""); // put some stuff in the collection
  53 |  bar = (String) map18915.get(""keyB-18915""); // get it back out
  54 |
  55 |  String sql = ""{call "" + bar + ""}"";
  56 |
  57 |  try {
  58 |      java.sql.Connection connection =
  59 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 61 |      java.sql.ResultSet rs = statement.executeQuery();
  62 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  63 |
  64 |  } catch (java.sql.SQLException e) {
  65 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |          response.getWriter().println(""Error processing request."");
  67 |          return;
  68 |      } else throw new ServletException(e);
  69 |  }
  70 |
  71 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(
  57 |                             sql,
  58 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  60 |             statement.setString(1, ""foo"");
> 61 |             statement.execute();
  62 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  63 |         } catch (java.sql.SQLException e) {
  64 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |                 response.getWriter().println(""Error processing request."");
  66 |                 return;
  67 |             } else throw new ServletException(e);
  68 |         }
  69 |     } // end doPost
  70 |
  71 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement =
  56 |              connection.prepareCall(
  57 |                      sql,
  58 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 61 |      java.sql.ResultSet rs = statement.executeQuery();
  62 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  63 |  } catch (java.sql.SQLException e) {
  64 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |          response.getWriter().println(""Error processing request."");
  66 |          return;
  67 |      } else throw new ServletException(e);
  68 |  }
  69 | / end doPost
  70 |
  71 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02449.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement =
  56 |              connection.prepareCall(
  57 |                      sql,
  58 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 61 |      java.sql.ResultSet rs = statement.executeQuery();
  62 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  63 |  } catch (java.sql.SQLException e) {
  64 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |          response.getWriter().println(""Error processing request."");
  66 |          return;
  67 |      } else throw new ServletException(e);
  68 |  }
  69 | / end doPost
  70 |
  71 | vate static String doSomething(HttpServletRequest request, String param)
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java,61,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  51 |
  52 |  try {
  53 |      java.sql.Connection connection =
  54 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |      java.sql.CallableStatement statement =
  56 |              connection.prepareCall(
  57 |                      sql,
  58 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 61 |      java.sql.ResultSet rs = statement.executeQuery();
  62 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  63 |  } catch (java.sql.SQLException e) {
  64 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  65 |          response.getWriter().println(""Error processing request."");
  66 |          return;
  67 |      } else throw new ServletException(e);
  68 |  }
  69 | / end doPost
  70 |
  71 | vate static String doSomething(HttpServletRequest request, String param)
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01552.java,62,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(
  57 |                             sql,
  58 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  61 |             statement.setString(1, ""foo"");
> 62 |             statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |         } catch (java.sql.SQLException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |                 response.getWriter().println(""Error processing request."");
  67 |                 return;
  68 |             } else throw new ServletException(e);
  69 |         }
  70 |     } // end doPost
  71 |
  72 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java,62,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(
  57 |                             sql,
  58 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  61 |             statement.setString(1, ""foo"");
> 62 |             statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |         } catch (java.sql.SQLException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |                 response.getWriter().println(""Error processing request."");
  67 |                 return;
  68 |             } else throw new ServletException(e);
  69 |         }
  70 |     } // end doPost
  71 |
  72 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java,62,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(
  57 |                             sql,
  58 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  61 |             statement.setString(1, ""foo"");
> 62 |             statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |         } catch (java.sql.SQLException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |                 response.getWriter().println(""Error processing request."");
  67 |                 return;
  68 |             } else throw new ServletException(e);
  69 |         }
  70 |     } // end doPost
  71 |
  72 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java,62,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  52 |         try {
  53 |             java.sql.Connection connection =
  54 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  55 |             java.sql.PreparedStatement statement =
  56 |                     connection.prepareStatement(
  57 |                             sql,
  58 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  59 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  60 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  61 |             statement.setString(1, ""foo"");
> 62 |             statement.execute();
  63 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  64 |         } catch (java.sql.SQLException e) {
  65 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  66 |                 response.getWriter().println(""Error processing request."");
  67 |                 return;
  68 |             } else throw new ServletException(e);
  69 |         }
  70 |     } // end doPost
  71 |
  72 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  52 |
  53 |         // Simple ? condition that assigns param to bar on false condition
  54 |         int num = 106;
  55 |
  56 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  57 |
  58 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  59 |
  60 |         try {
  61 |             java.sql.Statement statement =
  62 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 63 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  64 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  65 |         } catch (java.sql.SQLException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |                 response.getWriter().println(""Error processing request."");
  68 |                 return;
  69 |             } else throw new ServletException(e);
  70 |         }
  71 |     }
  72 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00194.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |             bar =
  54 |                     new String(
  55 |                             org.apache.commons.codec.binary.Base64.decodeBase64(
  56 |                                     org.apache.commons.codec.binary.Base64.encodeBase64(
  57 |                                             param.getBytes())));
  58 |         }
  59 |
  60 |         try {
  61 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  62 |
> 63 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results can be displayed for query: ""
  67 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  68 |                                     + ""<br>""
  69 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  70 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  71 |             // method doesn't return results."");
  72 |         } catch (org.springframework.dao.DataAccessException e) {
  73 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02087.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |         String bar = doSomething(request, param);
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement =
  61 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  62 |             statement.setString(1, ""foo"");
> 63 |             statement.execute();
  64 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  65 |         } catch (java.sql.SQLException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |                 response.getWriter().println(""Error processing request."");
  68 |                 return;
  69 |             } else throw new ServletException(e);
  70 |         }
  71 |     } // end doPost
  72 |
  73 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |         String bar = new Test().doSomething(request, param);
  54 |
  55 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  56 |
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement =
  61 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  62 |             statement.setString(1, ""foo"");
> 63 |             statement.execute();
  64 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  65 |         } catch (java.sql.SQLException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |                 response.getWriter().println(""Error processing request."");
  68 |                 return;
  69 |             } else throw new ServletException(e);
  70 |         }
  71 |     } // end doPost
  72 |
  73 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00339.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |         String bar;
  54 |
  55 |         // Simple ? condition that assigns param to bar on false condition
  56 |         int num = 106;
  57 |
  58 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  59 |
  60 |         String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  61 |         try {
  62 |             org.springframework.jdbc.support.rowset.SqlRowSet results =
> 63 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
  64 |             response.getWriter().println(""Your results are: "");
  65 |
  66 |             //  System.out.println(""Your results are"");
  67 |             while (results.next()) {
  68 |                 response.getWriter()
  69 |                         .println(
  70 |                                 org.owasp
  71 |                                                 .esapi
  72 |                                                 .ESAPI
  73 |                                                 .encoder()
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00341.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |         String bar;
  54 |
  55 |         // Simple if statement that assigns param to bar on true condition
  56 |         int num = 196;
  57 |         if ((500 / 42) + num > 200) bar = param;
  58 |         else bar = ""This should never happen"";
  59 |
  60 |         try {
  61 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  62 |
> 63 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  64 |             response.getWriter()
  65 |                     .println(
  66 |                             ""No results can be displayed for query: ""
  67 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  68 |                                     + ""<br>""
  69 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  70 |         } catch (org.springframework.dao.DataAccessException e) {
  71 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |                 response.getWriter().println(""Error processing request."");
  73 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01383.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |
  54 |         try {
  55 |             java.sql.Connection connection =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |             java.sql.PreparedStatement statement =
  58 |                     connection.prepareStatement(
  59 |                             sql,
  60 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  61 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  62 |             statement.setString(1, ""foo"");
> 63 |             statement.execute();
  64 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  65 |         } catch (java.sql.SQLException e) {
  66 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |                 response.getWriter().println(""Error processing request."");
  68 |                 return;
  69 |             } else throw new ServletException(e);
  70 |         }
  71 |     } // end doPost
  72 |
  73 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java,63,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  53 |
  54 |  try {
  55 |      java.sql.Connection connection =
  56 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |      java.sql.CallableStatement statement =
  58 |              connection.prepareCall(
  59 |                      sql,
  60 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  61 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  62 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 63 |      java.sql.ResultSet rs = statement.executeQuery();
  64 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  65 |  } catch (java.sql.SQLException e) {
  66 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  67 |          response.getWriter().println(""Error processing request."");
  68 |          return;
  69 |      } else throw new ServletException(e);
  70 |  }
  71 | / end doPost
  72 |
  73 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00038.java,64,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |                         param = name;
  55 |                         flag = false;
  56 |                     }
  57 |                 }
  58 |             }
  59 |         }
  60 |
  61 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  62 |         try {
  63 |             java.util.List<String> results =
> 64 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(
  65 |                             sql,
  66 |                             new org.springframework.jdbc.core.RowMapper<String>() {
  67 |                                 public String mapRow(java.sql.ResultSet rs, int rowNum)
  68 |                                         throws java.sql.SQLException {
  69 |                                     try {
  70 |                                         return rs.getString(""USERNAME"");
  71 |                                     } catch (java.sql.SQLException e) {
  72 |                                         if (org.owasp.benchmark.helpers.DatabaseHelper
  73 |                                                 .hideSQLErrors) {
  74 |                                             return ""Error processing query."";
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00199.java,64,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |         int num = 196;
  55 |         if ((500 / 42) + num > 200) bar = param;
  56 |         else bar = ""This should never happen"";
  57 |
  58 |         String sql =
  59 |                 ""SELECT  TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  60 |         try {
  61 |             // int results =
  62 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForInt(sql);
  63 |             Integer results =
> 64 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  65 |                             sql, Integer.class);
  66 |             response.getWriter().println(""Your results are: "");
  67 |
  68 |             //  System.out.println(""Your results are: "");
  69 |             response.getWriter().println(results.toString());
  70 |             //  System.out.println(results);
  71 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  72 |             response.getWriter()
  73 |                     .println(
  74 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java,64,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |         try {
  55 |             java.sql.Connection connection =
  56 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  57 |             java.sql.PreparedStatement statement =
  58 |                     connection.prepareStatement(
  59 |                             sql,
  60 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  61 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  62 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  63 |             statement.setString(1, ""foo"");
> 64 |             statement.execute();
  65 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  66 |         } catch (java.sql.SQLException e) {
  67 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  68 |                 response.getWriter().println(""Error processing request."");
  69 |                 return;
  70 |             } else throw new ServletException(e);
  71 |         }
  72 |     } // end doPost
  73 |
  74 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00428.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |
  55 |             bar = valuesList.get(0); // get the param value
  56 |         }
  57 |
  58 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  59 |
  60 |         try {
  61 |             java.sql.Connection connection =
  62 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  63 |             java.sql.PreparedStatement statement = connection.prepareStatement(sql);
  64 |             statement.setString(1, ""foo"");
> 65 |             statement.execute();
  66 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  67 |         } catch (java.sql.SQLException e) {
  68 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  69 |                 response.getWriter().println(""Error processing request."");
  70 |                 return;
  71 |             } else throw new ServletException(e);
  72 |         }
  73 |     }
  74 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java,64,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |
  55 |         try {
  56 |             java.sql.Connection connection =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  58 |             java.sql.PreparedStatement statement =
  59 |                     connection.prepareStatement(
  60 |                             sql,
  61 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  62 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  63 |             statement.setString(1, ""foo"");
> 64 |             statement.execute();
  65 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  66 |         } catch (java.sql.SQLException e) {
  67 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  68 |                 response.getWriter().println(""Error processing request."");
  69 |                 return;
  70 |             } else throw new ServletException(e);
  71 |         }
  72 |     } // end doPost
  73 |
  74 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00429.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  54 |
  55 |         try {
  56 |             java.sql.Connection connection =
  57 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  58 |             java.sql.PreparedStatement statement =
  59 |                     connection.prepareStatement(
  60 |                             sql,
  61 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  62 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  63 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  64 |             statement.setString(1, ""foo"");
> 65 |             statement.execute();
  66 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  67 |         } catch (java.sql.SQLException e) {
  68 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  69 |                 response.getWriter().println(""Error processing request."");
  70 |                 return;
  71 |             } else throw new ServletException(e);
  72 |         }
  73 |     }
  74 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00039.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |                         flag = false;
  56 |                     }
  57 |                 }
  58 |             }
  59 |         }
  60 |
  61 |         String sql =
  62 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
  63 |         try {
  64 |             java.util.Map<String, Object> results =
> 65 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  66 |             response.getWriter().println(""Your results are: "");
  67 |
  68 |             //  System.out.println(""Your results are"");
  69 |             response.getWriter()
  70 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  71 |             //  System.out.println(results.toString());
  72 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  73 |             response.getWriter()
  74 |                     .println(
  75 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02356.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |                     }
  56 |                 }
  57 |             }
  58 |         }
  59 |
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         try {
  63 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  64 |
> 65 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
  66 |             response.getWriter()
  67 |                     .println(
  68 |                             ""No results can be displayed for query: ""
  69 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  70 |                                     + ""<br>""
  71 |                                     + "" because the Spring execute method doesn't return results."");
  72 |
  73 |         } catch (org.springframework.dao.DataAccessException e) {
  74 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  75 |                 response.getWriter().println(""Error processing request."");
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01471.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |                     }
  56 |                 }
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         try {
  63 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  64 |
> 65 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  66 |             response.getWriter()
  67 |                     .println(
  68 |                             ""No results can be displayed for query: ""
  69 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  70 |                                     + ""<br>""
  71 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  72 |         } catch (org.springframework.dao.DataAccessException e) {
  73 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  74 |                 response.getWriter().println(""Error processing request."");
  75 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00770.java,65,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |             valuesList.remove(0); // remove the 1st safe value
  56 |
  57 |             bar = valuesList.get(0); // get the param value
  58 |         }
  59 |
  60 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  61 |
  62 |         try {
  63 |             java.sql.Statement statement =
  64 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 65 |             statement.addBatch(sql);
  66 |             int[] counts = statement.executeBatch();
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  68 |         } catch (java.sql.SQLException e) {
  69 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |                 response.getWriter().println(""Error processing request."");
  71 |                 return;
  72 |             } else throw new ServletException(e);
  73 |         }
  74 |     }
  75 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00193.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |         if ((500 / 42) + num > 200) bar = param;
  56 |         else bar = ""This should never happen"";
  57 |
  58 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  59 |
  60 |         try {
  61 |             java.sql.Connection connection =
  62 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  63 |             java.sql.PreparedStatement statement =
  64 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  65 |             statement.setString(1, ""foo"");
> 66 |             statement.execute();
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |         } catch (java.sql.SQLException e) {
  69 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |                 response.getWriter().println(""Error processing request."");
  71 |                 return;
  72 |             } else throw new ServletException(e);
  73 |         }
  74 |     }
  75 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00762.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  55 |  String sql = ""{call "" + bar + ""}"";
  56 |
  57 |  try {
  58 |      java.sql.Connection connection =
  59 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |      java.sql.CallableStatement statement =
  61 |              connection.prepareCall(
  62 |                      sql,
  63 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  65 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 66 |      java.sql.ResultSet rs = statement.executeQuery();
  67 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  68 |  } catch (java.sql.SQLException e) {
  69 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |          response.getWriter().println(""Error processing request."");
  71 |          return;
  72 |      } else throw new ServletException(e);
  73 |  }
  74 |
  75 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01470.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |                 }
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         String sql =
  63 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  64 |         try {
  65 |             java.util.Map<String, Object> results =
> 66 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  67 |             response.getWriter().println(""Your results are: "");
  68 |
  69 |             //  System.out.println(""Your results are"");
  70 |             response.getWriter()
  71 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  72 |             //  System.out.println(results.toString());
  73 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  74 |             response.getWriter()
  75 |                     .println(
  76 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |  int num = 106;
  57 |
  58 |  bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  59 |
  60 |  String sql = ""{call "" + bar + ""}"";
  61 |
  62 |  try {
  63 |      java.sql.Connection connection =
  64 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  65 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 66 |      java.sql.ResultSet rs = statement.executeQuery();
  67 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  68 |
  69 |  } catch (java.sql.SQLException e) {
  70 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |          response.getWriter().println(""Error processing request."");
  72 |          return;
  73 |      } else throw new ServletException(e);
  74 |  }
  75 |
  76 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00515.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |
  57 |             valuesList.remove(0); // remove the 1st safe value
  58 |
  59 |             bar = valuesList.get(0); // get the param value
  60 |         }
  61 |
  62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             statement.execute(sql, new int[] {1, 2});
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     }
  76 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement =
  61 |                     connection.prepareStatement(
  62 |                             sql,
  63 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  65 |             statement.setString(1, ""foo"");
> 66 |             statement.execute();
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |         } catch (java.sql.SQLException e) {
  69 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |                 response.getWriter().println(""Error processing request."");
  71 |                 return;
  72 |             } else throw new ServletException(e);
  73 |         }
  74 |     } // end doPost
  75 |
  76 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02088.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement =
  61 |                     connection.prepareStatement(
  62 |                             sql,
  63 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |                             java.sql.ResultSet.CONCUR_READ_ONLY);
  65 |             statement.setString(1, ""foo"");
> 66 |             statement.execute();
  67 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  68 |         } catch (java.sql.SQLException e) {
  69 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |                 response.getWriter().println(""Error processing request."");
  71 |                 return;
  72 |             } else throw new ServletException(e);
  73 |         }
  74 |     } // end doPost
  75 |
  76 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java,66,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  56 |
  57 |  try {
  58 |      java.sql.Connection connection =
  59 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |      java.sql.CallableStatement statement =
  61 |              connection.prepareCall(
  62 |                      sql,
  63 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  65 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 66 |      java.sql.ResultSet rs = statement.executeQuery();
  67 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  68 |  } catch (java.sql.SQLException e) {
  69 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  70 |          response.getWriter().println(""Error processing request."");
  71 |          return;
  72 |      } else throw new ServletException(e);
  73 |  }
  74 | / end doPost
  75 |
  76 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             statement.execute(sql);
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01475.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01476.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         String bar = new Test().doSomething(request, param);
  61 |
  62 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  63 |
  64 |         try {
  65 |             java.sql.Statement statement =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 67 |             statement.execute(sql, new int[] {1, 2});
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00597.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |             }
  58 |         }
  59 |
  60 |         org.owasp.benchmark.helpers.ThingInterface thing =
  61 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  62 |         String bar = thing.doSomething(param);
  63 |
  64 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  65 |         try {
  66 |             java.util.List<java.util.Map<String, Object>> list =
> 67 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  68 |             response.getWriter().println(""Your results are: <br>"");
  69 |
  70 |             //  System.out.println(""Your results are"");
  71 |
  72 |             for (Object o : list) {
  73 |                 response.getWriter()
  74 |                         .println(
  75 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  76 |                                         + ""<br>"");
  77 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00335.java,68,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |         if ((500 / 42) + num > 200) bar = param;
  58 |         else bar = ""This should never happen"";
  59 |
  60 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  61 |
  62 |         try {
  63 |             java.sql.Connection connection =
  64 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  65 |             java.sql.PreparedStatement statement =
  66 |                     connection.prepareStatement(sql, new int[] {1, 2});
  67 |             statement.setString(1, ""foo"");
> 68 |             statement.execute();
  69 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  70 |         } catch (java.sql.SQLException e) {
  71 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  72 |                 response.getWriter().println(""Error processing request."");
  73 |                 return;
  74 |             } else throw new ServletException(e);
  75 |         }
  76 |     }
  77 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java,67,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  57 |         try {
  58 |             java.sql.Connection connection =
  59 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  60 |             java.sql.PreparedStatement statement =
  61 |                     connection.prepareStatement(
  62 |                             sql,
  63 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  64 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  65 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  66 |             statement.setString(1, ""foo"");
> 67 |             statement.execute();
  68 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  69 |         } catch (java.sql.SQLException e) {
  70 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  71 |                 response.getWriter().println(""Error processing request."");
  72 |                 return;
  73 |             } else throw new ServletException(e);
  74 |         }
  75 |     } // end doPost
  76 |
  77 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java,68,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  58 |         }
  59 |
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         String sql =
  63 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  64 |         try {
  65 |             // Long results =
  66 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  67 |             Long results =
> 68 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  69 |                             sql, Long.class);
  70 |             response.getWriter().println(""Your results are: "");
  71 |
  72 |             //  System.out.println(""your results are"");
  73 |             response.getWriter().println(results.toString());
  74 |             //  System.out.println(results);
  75 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  76 |             response.getWriter()
  77 |                     .println(
  78 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00603.java,69,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  58 |         }
  59 |
  60 |         org.owasp.benchmark.helpers.ThingInterface thing =
  61 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  62 |         String bar = thing.doSomething(param);
  63 |
  64 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  65 |
  66 |         try {
  67 |             java.sql.Statement statement =
  68 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 69 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  70 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  71 |         } catch (java.sql.SQLException e) {
  72 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  73 |                 response.getWriter().println(""Error processing request."");
  74 |                 return;
  75 |             } else throw new ServletException(e);
  76 |         }
  77 |     }
  78 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00342.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  59 |
  60 |             valuesList.remove(0); // remove the 1st safe value
  61 |
  62 |             bar = valuesList.get(0); // get the param value
  63 |         }
  64 |
  65 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  66 |
  67 |         try {
  68 |             java.sql.Statement statement =
  69 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 70 |             statement.execute(sql, new String[] {""username"", ""password""});
  71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  72 |         } catch (java.sql.SQLException e) {
  73 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  74 |                 response.getWriter().println(""Error processing request."");
  75 |                 return;
  76 |             } else throw new ServletException(e);
  77 |         }
  78 |     }
  79 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00337.java,69,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  59 |
  60 |             valuesList.remove(0); // remove the 1st safe value
  61 |
  62 |             bar = valuesList.get(0); // get the param value
  63 |         }
  64 |
  65 |         String sql =
  66 |                 ""SELECT TOP 1 USERNAME from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  67 |         try {
  68 |             Object results =
> 69 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  70 |                             sql, new Object[] {}, String.class);
  71 |             response.getWriter().println(""Your results are: "");
  72 |
  73 |             //  System.out.println(""Your results are"");
  74 |             response.getWriter()
  75 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  76 |             //  System.out.println(results.toString());
  77 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  78 |             response.getWriter()
  79 |                     .println(
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  60 |                     break;
  61 |                 }
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         try {
  68 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  69 |
> 70 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  71 |             response.getWriter()
  72 |                     .println(
  73 |                             ""No results can be displayed for query: ""
  74 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  75 |                                     + ""<br>""
  76 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  77 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  78 |             // method doesn't return results."");
  79 |         } catch (org.springframework.dao.DataAccessException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  63 |
  64 |         try {
  65 |             java.sql.Connection connection =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |             java.sql.PreparedStatement statement =
  68 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  69 |             statement.setString(1, ""foo"");
> 70 |             statement.execute();
  71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  72 |         } catch (java.sql.SQLException e) {
  73 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  74 |                 response.getWriter().println(""Error processing request."");
  75 |                 return;
  76 |             } else throw new ServletException(e);
  77 |         }
  78 |     } // end doPost
  79 |
  80 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java,70,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  60 |         String bar = doSomething(request, param);
  61 |
  62 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  63 |
  64 |         try {
  65 |             java.sql.Connection connection =
  66 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |             java.sql.PreparedStatement statement =
  68 |                     connection.prepareStatement(sql, new int[] {1, 2});
  69 |             statement.setString(1, ""foo"");
> 70 |             statement.execute();
  71 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  72 |         } catch (java.sql.SQLException e) {
  73 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  74 |                 response.getWriter().println(""Error processing request."");
  75 |                 return;
  76 |             } else throw new ServletException(e);
  77 |         }
  78 |     } // end doPost
  79 |
  80 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00591.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  61 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  62 |         String bar = thing.doSomething(param);
  63 |
  64 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  65 |
  66 |         try {
  67 |             java.sql.Connection connection =
  68 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  69 |             java.sql.PreparedStatement statement =
  70 |                     connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  71 |             statement.setString(1, ""foo"");
> 72 |             statement.execute();
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     }
  81 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00606.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  61 |
  62 |         // Simple if statement that assigns param to bar on true condition
  63 |         int num = 196;
  64 |         if ((500 / 42) + num > 200) bar = param;
  65 |         else bar = ""This should never happen"";
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql);
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     }
  81 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql);
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     } // end doPost
  81 |
  82 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql);
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     } // end doPost
  81 |
  82 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     } // end doPost
  81 |
  82 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     } // end doPost
  81 |
  82 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = doSomething(request, param);
  66 |
  67 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             int count = statement.executeUpdate(sql, new int[] {1, 2});
  73 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  74 |         } catch (java.sql.SQLException e) {
  75 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |                 response.getWriter().println(""Error processing request."");
  77 |                 return;
  78 |             } else throw new ServletException(e);
  79 |         }
  80 |     } // end doPost
  81 |
  82 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |             }
  63 |         }
  64 |
  65 |         String bar = new Test().doSomething(request, param);
  66 |
  67 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  68 |
  69 |         try {
  70 |             java.sql.Statement statement =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 72 |             statement.addBatch(sql);
  73 |             int[] counts = statement.executeBatch();
  74 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  75 |         } catch (java.sql.SQLException e) {
  76 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  77 |                 response.getWriter().println(""Error processing request."");
  78 |                 return;
  79 |             } else throw new ServletException(e);
  80 |         }
  81 |     } // end doPost
  82 |
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java,72,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |  String sql = ""{call "" + bar + ""}"";
  63 |
  64 |  try {
  65 |      java.sql.Connection connection =
  66 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |      java.sql.CallableStatement statement =
  68 |              connection.prepareCall(
  69 |                      sql,
  70 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  71 |                      java.sql.ResultSet.CONCUR_READ_ONLY);
> 72 |      java.sql.ResultSet rs = statement.executeQuery();
  73 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  74 |  } catch (java.sql.SQLException e) {
  75 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  76 |          response.getWriter().println(""Error processing request."");
  77 |          return;
  78 |      } else throw new ServletException(e);
  79 |  }
  80 | / end doPost
  81 |
  82 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  62 |
  63 |         try {
  64 |             java.sql.Connection connection =
  65 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  66 |             java.sql.PreparedStatement statement =
  67 |                     connection.prepareStatement(
  68 |                             sql,
  69 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  70 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  71 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  72 |             statement.setString(1, ""foo"");
> 73 |             statement.execute();
  74 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  75 |         } catch (java.sql.SQLException e) {
  76 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  77 |                 response.getWriter().println(""Error processing request."");
  78 |                 return;
  79 |             } else throw new ServletException(e);
  80 |         }
  81 |     }
  82 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00598.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |                     new String(
  64 |                             org.apache.commons.codec.binary.Base64.decodeBase64(
  65 |                                     org.apache.commons.codec.binary.Base64.encodeBase64(
  66 |                                             param.getBytes())));
  67 |         }
  68 |
  69 |         String sql =
  70 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  71 |         try {
  72 |             java.util.Map<String, Object> results =
> 73 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  74 |             response.getWriter().println(""Your results are: "");
  75 |
  76 |             //  System.out.println(""Your results are"");
  77 |             response.getWriter()
  78 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  79 |             //  System.out.println(results.toString());
  80 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  81 |             response.getWriter()
  82 |                     .println(
  83 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java,74,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |              new String(
  64 |                      org.apache.commons.codec.binary.Base64.decodeBase64(
  65 |                              org.apache.commons.codec.binary.Base64.encodeBase64(
  66 |                                      param.getBytes())));
  67 |  }
  68 |
  69 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  70 |
  71 |  try {
  72 |      java.sql.Statement statement =
  73 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 74 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  75 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  76 |  } catch (java.sql.SQLException e) {
  77 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  78 |          response.getWriter().println(""Error processing request."");
  79 |          return;
  80 |      } else throw new ServletException(e);
  81 |  }
  82 |
  83 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java,74,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |         }
  64 |
  65 |         org.owasp.benchmark.helpers.ThingInterface thing =
  66 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  67 |         String bar = thing.doSomething(param);
  68 |
  69 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  70 |
  71 |         try {
  72 |             java.sql.Statement statement =
  73 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 74 |             int count = statement.executeUpdate(sql);
  75 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  76 |         } catch (java.sql.SQLException e) {
  77 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  78 |                 response.getWriter().println(""Error processing request."");
  79 |                 return;
  80 |             } else throw new ServletException(e);
  81 |         }
  82 |     }
  83 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |         }
  64 |
  65 |         org.owasp.benchmark.helpers.ThingInterface thing =
  66 |                 org.owasp.benchmark.helpers.ThingFactory.createThing();
  67 |         String bar = thing.doSomething(param);
  68 |
  69 |         String sql =
  70 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  71 |         try {
  72 |             java.util.Map<String, Object> results =
> 73 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
  74 |             response.getWriter().println(""Your results are: "");
  75 |
  76 |             //  System.out.println(""Your results are"");
  77 |             response.getWriter()
  78 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  79 |             //  System.out.println(results.toString());
  80 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  81 |             response.getWriter()
  82 |                     .println(
  83 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |
  64 |  try {
  65 |      java.sql.Connection connection =
  66 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |      java.sql.CallableStatement statement =
  68 |              connection.prepareCall(
  69 |                      sql,
  70 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  71 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  72 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 73 |      java.sql.ResultSet rs = statement.executeQuery();
  74 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  75 |  } catch (java.sql.SQLException e) {
  76 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  77 |          response.getWriter().println(""Error processing request."");
  78 |          return;
  79 |      } else throw new ServletException(e);
  80 |  }
  81 | / end doPost
  82 |
  83 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java,73,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  63 |
  64 |  try {
  65 |      java.sql.Connection connection =
  66 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  67 |      java.sql.CallableStatement statement =
  68 |              connection.prepareCall(
  69 |                      sql,
  70 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  71 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  72 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 73 |      java.sql.ResultSet rs = statement.executeQuery();
  74 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  75 |  } catch (java.sql.SQLException e) {
  76 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  77 |          response.getWriter().println(""Error processing request."");
  78 |          return;
  79 |      } else throw new ServletException(e);
  80 |  }
  81 | / end doPost
  82 |
  83 | vate class Test {
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00594.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  64 |         map29056.put(""keyC"", ""another-Value""); // put some stuff in the collection
  65 |         bar = (String) map29056.get(""keyB-29056""); // get it back out
  66 |
  67 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  68 |
  69 |         try {
  70 |             java.sql.Connection connection =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  72 |             java.sql.PreparedStatement statement =
  73 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  74 |             statement.setString(1, ""foo"");
> 75 |             statement.execute();
  76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  77 |         } catch (java.sql.SQLException e) {
  78 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  79 |                 response.getWriter().println(""Error processing request."");
  80 |                 return;
  81 |             } else throw new ServletException(e);
  82 |         }
  83 |     }
  84 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  64 |
  65 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  66 |
  67 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  68 |
  69 |         try {
  70 |             java.sql.Connection connection =
  71 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  72 |             java.sql.PreparedStatement statement =
  73 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  74 |             statement.setString(1, ""foo"");
> 75 |             statement.execute();
  76 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  77 |         } catch (java.sql.SQLException e) {
  78 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  79 |                 response.getWriter().println(""Error processing request."");
  80 |                 return;
  81 |             } else throw new ServletException(e);
  82 |         }
  83 |     }
  84 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00767.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |                 bar = ""bobs_your_uncle"";
  66 |                 break;
  67 |         }
  68 |
  69 |         String sql =
  70 |                 ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  71 |         try {
  72 |             // Long results =
  73 |             // org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
  74 |             Long results =
> 75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  76 |                             sql, Long.class);
  77 |             response.getWriter().println(""Your results are: "");
  78 |
  79 |             //  System.out.println(""your results are"");
  80 |             response.getWriter().println(results.toString());
  81 |             //  System.out.println(results);
  82 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  83 |             response.getWriter()
  84 |                     .println(
  85 |                             ""No results returned for query: ""
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00516.java,76,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |                 break;
  66 |             default:
  67 |                 bar = ""bobs_your_uncle"";
  68 |                 break;
  69 |         }
  70 |
  71 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  72 |
  73 |         try {
  74 |             java.sql.Statement statement =
  75 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 76 |             statement.execute(sql, new int[] {1, 2});
  77 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  78 |         } catch (java.sql.SQLException e) {
  79 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |                 response.getWriter().println(""Error processing request."");
  81 |                 return;
  82 |             } else throw new ServletException(e);
  83 |         }
  84 |     }
  85 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00596.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |             valuesList.add(""moresafe"");
  66 |
  67 |             valuesList.remove(0); // remove the 1st safe value
  68 |
  69 |             bar = valuesList.get(0); // get the param value
  70 |         }
  71 |
  72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  73 |         try {
  74 |             java.util.List<java.util.Map<String, Object>> list =
> 75 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);
  76 |             response.getWriter().println(""Your results are: <br>"");
  77 |
  78 |             //  System.out.println(""Your results are"");
  79 |
  80 |             for (Object o : list) {
  81 |                 response.getWriter()
  82 |                         .println(
  83 |                                 org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString())
  84 |                                         + ""<br>"");
  85 |                 //   System.out.println(o.toString());
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00761.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |          bar = ""bobs_your_uncle"";
  66 |          break;
  67 |  }
  68 |
  69 |  String sql = ""{call "" + bar + ""}"";
  70 |
  71 |  try {
  72 |      java.sql.Connection connection =
  73 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  74 |      java.sql.CallableStatement statement = connection.prepareCall(sql);
> 75 |      java.sql.ResultSet rs = statement.executeQuery();
  76 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  77 |
  78 |  } catch (java.sql.SQLException e) {
  79 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  80 |          response.getWriter().println(""Error processing request."");
  81 |          return;
  82 |      } else throw new ServletException(e);
  83 |  }
  84 |
  85 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02638.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |         if (ampersandLoc != -1) {
  66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = doSomething(request, param);
  71 |
  72 |         try {
  73 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  74 |
> 75 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  76 |             response.getWriter()
  77 |                     .println(
  78 |                             ""No results can be displayed for query: ""
  79 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  80 |                                     + ""<br>""
  81 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  82 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  83 |             // method doesn't return results."");
  84 |         } catch (org.springframework.dao.DataAccessException e) {
  85 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02646.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |         if (ampersandLoc != -1) {
  66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = doSomething(request, param);
  71 |
  72 |         try {
  73 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  74 |
> 75 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  76 |             response.getWriter()
  77 |                     .println(
  78 |                             ""No results can be displayed for query: ""
  79 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  80 |                                     + ""<br>""
  81 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  82 |         } catch (org.springframework.dao.DataAccessException e) {
  83 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  84 |                 response.getWriter().println(""Error processing request."");
  85 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00846.java,75,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  65 |         if (ampersandLoc != -1) {
  66 |             param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = param;
  71 |
  72 |         try {
  73 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  74 |
> 75 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  76 |             response.getWriter()
  77 |                     .println(
  78 |                             ""No results can be displayed for query: ""
  79 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  80 |                                     + ""<br>""
  81 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  82 |         } catch (org.springframework.dao.DataAccessException e) {
  83 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  84 |                 response.getWriter().println(""Error processing request."");
  85 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  66 |         java.util.HashMap<String, Object> map11928 = new java.util.HashMap<String, Object>();
  67 |         map11928.put(""keyA-11928"", ""a-Value""); // put some stuff in the collection
  68 |         map11928.put(""keyB-11928"", param); // put it in a collection
  69 |         map11928.put(""keyC"", ""another-Value""); // put some stuff in the collection
  70 |         bar = (String) map11928.get(""keyB-11928""); // get it back out
  71 |
  72 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  78 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  79 |         } catch (java.sql.SQLException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |                 response.getWriter().println(""Error processing request."");
  82 |                 return;
  83 |             } else throw new ServletException(e);
  84 |         }
  85 |     }
  86 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java,76,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  66 |
  67 |         // Simple ? condition that assigns param to bar on false condition
  68 |         int num = 106;
  69 |
  70 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  71 |
  72 |         String sql =
  73 |                 ""SELECT TOP 1 USERNAME from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  74 |         try {
  75 |             Object results =
> 76 |                     org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(
  77 |                             sql, new Object[] {}, String.class);
  78 |             response.getWriter().println(""Your results are: "");
  79 |
  80 |             //  System.out.println(""Your results are"");
  81 |             response.getWriter()
  82 |                     .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
  83 |             //  System.out.println(results.toString());
  84 |         } catch (org.springframework.dao.EmptyResultDataAccessException e) {
  85 |             response.getWriter()
  86 |                     .println(
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = doSomething(request, param);
  71 |
  72 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             int count = statement.executeUpdate(sql);
  78 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  79 |         } catch (java.sql.SQLException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |                 response.getWriter().println(""Error processing request."");
  82 |                 return;
  83 |             } else throw new ServletException(e);
  84 |         }
  85 |     } // end doPost
  86 |
  87 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = doSomething(request, param);
  71 |
  72 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  78 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  79 |         } catch (java.sql.SQLException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |                 response.getWriter().println(""Error processing request."");
  82 |                 return;
  83 |             } else throw new ServletException(e);
  84 |         }
  85 |     } // end doPost
  86 |
  87 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = doSomething(request, param);
  71 |
  72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             statement.execute(sql, new int[] {1, 2});
  78 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  79 |         } catch (java.sql.SQLException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |                 response.getWriter().println(""Error processing request."");
  82 |                 return;
  83 |             } else throw new ServletException(e);
  84 |         }
  85 |     } // end doPost
  86 |
  87 |     private static String doSomething(HttpServletRequest request, String param)
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01733.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = new Test().doSomething(request, param);
  71 |
  72 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             int count = statement.executeUpdate(sql, new String[] {""USERNAME"", ""PASSWORD""});
  78 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  79 |         } catch (java.sql.SQLException e) {
  80 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |                 response.getWriter().println(""Error processing request."");
  82 |                 return;
  83 |             } else throw new ServletException(e);
  84 |         }
  85 |     } // end doPost
  86 |
  87 |     private class Test {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |         }
  68 |         param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |         String bar = param;
  71 |
  72 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  73 |
  74 |         try {
  75 |             java.sql.Statement statement =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |             statement.addBatch(sql);
  78 |             int[] counts = statement.executeBatch();
  79 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  80 |         } catch (java.sql.SQLException e) {
  81 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |                 response.getWriter().println(""Error processing request."");
  83 |                 return;
  84 |             } else throw new ServletException(e);
  85 |         }
  86 |     }
  87 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00590.java,78,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |  String sql = ""{call "" + bar + ""}"";
  68 |
  69 |  try {
  70 |      java.sql.Connection connection =
  71 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  72 |      java.sql.CallableStatement statement =
  73 |              connection.prepareCall(
  74 |                      sql,
  75 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  76 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  77 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 78 |      java.sql.ResultSet rs = statement.executeQuery();
  79 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  80 |  } catch (java.sql.SQLException e) {
  81 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  82 |          response.getWriter().println(""Error processing request."");
  83 |          return;
  84 |      } else throw new ServletException(e);
  85 |  }
  86 |
  87 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java,77,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  67 |  }
  68 |  param = java.net.URLDecoder.decode(param, ""UTF-8"");
  69 |
  70 |  String bar = doSomething(request, param);
  71 |
  72 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  73 |
  74 |  try {
  75 |      java.sql.Statement statement =
  76 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 77 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  78 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  79 |  } catch (java.sql.SQLException e) {
  80 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  81 |          response.getWriter().println(""Error processing request."");
  82 |          return;
  83 |      } else throw new ServletException(e);
  84 |  }
  85 | / end doPost
  86 |
  87 | vate static String doSomething(HttpServletRequest request, String param)
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java,79,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  68 |                     new String(
  69 |                             org.apache.commons.codec.binary.Base64.decodeBase64(
  70 |                                     org.apache.commons.codec.binary.Base64.encodeBase64(
  71 |                                             param.getBytes())));
  72 |         }
  73 |
  74 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  75 |
  76 |         try {
  77 |             java.sql.Statement statement =
  78 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 79 |             statement.execute(sql, new String[] {""username"", ""password""});
  80 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  81 |         } catch (java.sql.SQLException e) {
  82 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  83 |                 response.getWriter().println(""Error processing request."");
  84 |                 return;
  85 |             } else throw new ServletException(e);
  86 |         }
  87 |     }
  88 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00192.java,79,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  68 |                 bar = ""bobs_your_uncle"";
  69 |                 break;
  70 |         }
  71 |
  72 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  73 |
  74 |         try {
  75 |             java.sql.Connection connection =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  77 |             java.sql.PreparedStatement statement = connection.prepareStatement(sql);
  78 |             statement.setString(1, ""foo"");
> 79 |             statement.execute();
  80 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  81 |         } catch (java.sql.SQLException e) {
  82 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  83 |                 response.getWriter().println(""Error processing request."");
  84 |                 return;
  85 |             } else throw new ServletException(e);
  86 |         }
  87 |     }
  88 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00840.java,80,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  70 |         String bar;
  71 |
  72 |         // Simple ? condition that assigns param to bar on false condition
  73 |         int num = 106;
  74 |
  75 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  76 |
  77 |         try {
  78 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  79 |
> 80 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  81 |             response.getWriter()
  82 |                     .println(
  83 |                             ""No results can be displayed for query: ""
  84 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  85 |                                     + ""<br>""
  86 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  87 |             //  System.out.println(""no results for query: "" + sql + "" because the Spring batchUpdate
  88 |             // method doesn't return results."");
  89 |         } catch (org.springframework.dao.DataAccessException e) {
  90 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00510.java,82,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  71 |  String sql = ""{call "" + bar + ""}"";
  72 |
  73 |  try {
  74 |      java.sql.Connection connection =
  75 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  76 |      java.sql.CallableStatement statement =
  77 |              connection.prepareCall(
  78 |                      sql,
  79 |                      java.sql.ResultSet.TYPE_FORWARD_ONLY,
  80 |                      java.sql.ResultSet.CONCUR_READ_ONLY,
  81 |                      java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
> 82 |      java.sql.ResultSet rs = statement.executeQuery();
  83 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  84 |  } catch (java.sql.SQLException e) {
  85 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  86 |          response.getWriter().println(""Error processing request."");
  87 |          return;
  88 |      } else throw new ServletException(e);
  89 |  }
  90 |
  91 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java,82,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  71 |
  72 |             valuesList.remove(0); // remove the 1st safe value
  73 |
  74 |             bar = valuesList.get(0); // get the param value
  75 |         }
  76 |
  77 |         String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
  78 |
  79 |         try {
  80 |             java.sql.Statement statement =
  81 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 82 |             int count = statement.executeUpdate(sql);
  83 |             org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
  84 |         } catch (java.sql.SQLException e) {
  85 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  86 |                 response.getWriter().println(""Error processing request."");
  87 |                 return;
  88 |             } else throw new ServletException(e);
  89 |         }
  90 |     }
  91 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java,82,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  71 |
  72 |             valuesList.remove(0); // remove the 1st safe value
  73 |
  74 |             bar = valuesList.get(0); // get the param value
  75 |         }
  76 |
  77 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  78 |
  79 |         try {
  80 |             java.sql.Statement statement =
  81 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 82 |             statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
  83 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  84 |         } catch (java.sql.SQLException e) {
  85 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  86 |                 response.getWriter().println(""Error processing request."");
  87 |                 return;
  88 |             } else throw new ServletException(e);
  89 |         }
  90 |     }
  91 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java,84,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  73 |
  74 |         try {
  75 |             java.sql.Connection connection =
  76 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  77 |             java.sql.PreparedStatement statement =
  78 |                     connection.prepareStatement(
  79 |                             sql,
  80 |                             java.sql.ResultSet.TYPE_FORWARD_ONLY,
  81 |                             java.sql.ResultSet.CONCUR_READ_ONLY,
  82 |                             java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
  83 |             statement.setString(1, ""foo"");
> 84 |             statement.execute();
  85 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  86 |         } catch (java.sql.SQLException e) {
  87 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  88 |                 response.getWriter().println(""Error processing request."");
  89 |                 return;
  90 |             } else throw new ServletException(e);
  91 |         }
  92 |     }
  93 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00600.java,84,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  74 |                 bar = param;
  75 |                 break;
  76 |             default:
  77 |                 bar = ""bobs_your_uncle"";
  78 |                 break;
  79 |         }
  80 |
  81 |         try {
  82 |             String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  83 |
> 84 |             org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
  85 |             response.getWriter()
  86 |                     .println(
  87 |                             ""No results can be displayed for query: ""
  88 |                                     + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql)
  89 |                                     + ""<br>""
  90 |                                     + "" because the Spring batchUpdate method doesn't return results."");
  91 |         } catch (org.springframework.dao.DataAccessException e) {
  92 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  93 |                 response.getWriter().println(""Error processing request."");
  94 |             } else throw new ServletException(e);
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java,85,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  74 |             bar = valuesList.get(0); // get the param value
  75 |         }
  76 |
  77 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  78 |
  79 |         try {
  80 |             java.sql.Connection connection =
  81 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  82 |             java.sql.PreparedStatement statement =
  83 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  84 |             statement.setString(1, ""foo"");
> 85 |             statement.execute();
  86 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  87 |         } catch (java.sql.SQLException e) {
  88 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  89 |                 response.getWriter().println(""Error processing request."");
  90 |                 return;
  91 |             } else throw new ServletException(e);
  92 |         }
  93 |     }
  94 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java,85,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  74 |
  75 |         bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
  76 |
  77 |         String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
  78 |
  79 |         try {
  80 |             java.sql.Connection connection =
  81 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
  82 |             java.sql.PreparedStatement statement =
  83 |                     connection.prepareStatement(sql, new String[] {""Column1"", ""Column2""});
  84 |             statement.setString(1, ""foo"");
> 85 |             statement.execute();
  86 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  87 |         } catch (java.sql.SQLException e) {
  88 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  89 |                 response.getWriter().println(""Error processing request."");
  90 |                 return;
  91 |             } else throw new ServletException(e);
  92 |         }
  93 |     }
  94 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00849.java,87,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  76 |
  77 |             valuesList.remove(0); // remove the 1st safe value
  78 |
  79 |             bar = valuesList.get(0); // get the param value
  80 |         }
  81 |
  82 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  83 |
  84 |         try {
  85 |             java.sql.Statement statement =
  86 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 87 |             statement.execute(sql, new int[] {1, 2});
  88 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
  89 |         } catch (java.sql.SQLException e) {
  90 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  91 |                 response.getWriter().println(""Error processing request."");
  92 |                 return;
  93 |             } else throw new ServletException(e);
  94 |         }
  95 |     }
  96 | }
     ^ Col 0
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00850.java,87,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  76 |
  77 |      valuesList.remove(0); // remove the 1st safe value
  78 |
  79 |      bar = valuesList.get(0); // get the param value
  80 |  }
  81 |
  82 |  String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  83 |
  84 |  try {
  85 |      java.sql.Statement statement =
  86 |              org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 87 |      java.sql.ResultSet rs = statement.executeQuery(sql);
  88 |      org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
  89 |  } catch (java.sql.SQLException e) {
  90 |      if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  91 |          response.getWriter().println(""Error processing request."");
  92 |          return;
  93 |      } else throw new ServletException(e);
  94 |  }
  95 |
  96 |
     ^ Col 7
"
F001_JAVA_SQL,lines,OWASP/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00847.java,87,89,skims,F001. SQL injection - Java SQL API,Use of attacker controlled parameters for querying the data base,"
  77 |             valuesList.remove(0); // remove the 1st safe value
  78 |
  79 |             bar = valuesList.get(0); // get the param value
  80 |         }
  81 |
  82 |         String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
  83 |
  84 |         try {
  85 |             java.sql.Statement statement =
  86 |                     org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
> 87 |             statement.addBatch(sql);
  88 |             int[] counts = statement.executeBatch();
  89 |             org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
  90 |         } catch (java.sql.SQLException e) {
  91 |             if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
  92 |                 response.getWriter().println(""Error processing request."");
  93 |                 return;
  94 |             } else throw new ServletException(e);
  95 |         }
  96 |     }
  97 | }
     ^ Col 0
"
