image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
   - docker:dind


before_script:
    - echo $VAULT > /tmp/.vault.txt
    - docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS

codequality:
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -e sonar-python -e pep8 -e randon -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]

stages:
    - build
    - test
    - deploy
    - install
    - dns

build_base:
    stage: build
    script:
        - sh containers/base/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves:base
    except:
    - triggers

build_alg:
    stage: build
    script:
        - sh containers/alg/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/alg:base
    except:
    - triggers

build_exams:
    stage: build
    script:
        - sh containers/exams/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/exams:base
    except:
    - triggers

build_vpn:
    stage: build
    script:
        - sh containers/vpn/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/vpn:base
    except:
    - triggers

test_terraform:
   stage: test
   before_script:
      - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
      - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
      - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
      - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
      - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
      - echo $SSO_XML > infrastructure/vars/SSO.xml
      - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
      - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
      - cd infrastructure
   script:
      - terraform init
      - tflint --var-file="vars/aws.tfvars"
      - terraform plan -var-file="vars/aws.tfvars"
   except:
    - triggers


deploy_alg:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/alg:base
        - docker tag registry.gitlab.com/fluidsignal/serves/alg:base registry.gitlab.com/fluidsignal/serves/alg:master
        - docker push registry.gitlab.com/fluidsignal/serves/alg:master
    only:
    - master
    except:
    - triggers

deploy_exams:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/exams:base
        - docker tag registry.gitlab.com/fluidsignal/serves/exams:base registry.gitlab.com/fluidsignal/serves/exams:master
        - docker push registry.gitlab.com/fluidsignal/serves/exams:master
    only:
    - master
    except:
    - triggers

deploy_vpn:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/vpn:base
        - docker tag registry.gitlab.com/fluidsignal/serves/vpn:base registry.gitlab.com/fluidsignal/serves/vpn:master
        - docker push registry.gitlab.com/fluidsignal/serves/vpn:master
    only:
    - master
    except:
    - triggers

deploy_terraform:
    stage: deploy
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
        - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
        - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
        - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
        - echo $SSO_XML > infrastructure/vars/SSO.xml
        - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
        - echo sudo docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS >> infrastructure/ec2/host/script.sh
        - aws s3 cp s3://$BUCKET_NAME//terraform/terraform.tfstate infrastructure/terraform.tfstate || echo ""
        - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
        - cd infrastructure
    script:
        - terraform init
        - terraform apply -auto-approve -var-file="vars/aws.tfvars"
        - terraform output instance_ip > ip.txt
        - curl -X POST -F token=$TRIGGER_TOKEN -F ref=master -F "variables[IS_TRIGGER]=true" -F "variables[NEW_SERVES]=$(cat ip.txt)" https://gitlab.com/api/v4/projects/4620828/trigger/pipeline
    after_script:
        - aws s3 cp infrastructure/terraform.tfstate s3://$BUCKET_NAME//terraform/terraform.tfstate
    only:
    - master
    except:
    - triggers

install_alg:
    stage: install
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
        - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
        - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
        - aws s3 cp s3://$BUCKET_NAME//terraform/terraform.tfstate infrastructure/terraform.tfstate
        - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
        - echo $SSO_XML > infrastructure/vars/SSO.xml
        - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
        - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
        - cd infrastructure
        - terraform init
        - terraform refresh -var-file="vars/aws.tfvars"
        - terraform output instance_ip > ip.txt
    script:
        - apk --update add openssh-client
        - echo "$FI_SSH_KEY" | base64 -d > "FLUID_Serves.pem" && chmod 600 FLUID_Serves.pem
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) '(sudo docker stop tmp_alg_1 || echo "") && (sudo docker rm tmp_alg_1 || echo "")'
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) 'sudo docker pull registry.gitlab.com/fluidsignal/serves/alg:master && sudo docker run -d -p 443:443 -p 80:80 --name=tmp_alg_1 registry.gitlab.com/fluidsignal/serves/alg:master'
    only:
    - triggers

install_exams:
    stage: install
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
        - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
        - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
        - aws s3 cp s3://$BUCKET_NAME//terraform/terraform.tfstate infrastructure/terraform.tfstate
        - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
        - echo $SSO_XML > infrastructure/vars/SSO.xml
        - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
        - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
        - cd infrastructure
        - terraform init
        - terraform refresh -var-file="vars/aws.tfvars"
        - terraform output instance_ip > ip.txt
    script:
        - apk --update add openssh-client
        - echo "$FI_SSH_KEY" | base64 -d > "FLUID_Serves.pem" && chmod 600 FLUID_Serves.pem
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) '(sudo docker stop tmp_exams_1 || echo "") && (sudo docker rm tmp_exams_1 || echo "")'
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) 'sudo docker pull registry.gitlab.com/fluidsignal/serves/exams:master && sudo docker run -d -p 8080:80 --name=tmp_exams_1 registry.gitlab.com/fluidsignal/serves/exams:master'
    only:
    - triggers

install_vpn:
    stage: install
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
        - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
        - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
        - aws s3 cp s3://$BUCKET_NAME//terraform/terraform.tfstate infrastructure/terraform.tfstate
        - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
        - echo $SSO_XML > infrastructure/vars/SSO.xml
        - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
        - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
        - cd infrastructure
        - terraform init
        - terraform refresh -var-file="vars/aws.tfvars"
        - terraform output instance_ip > ip.txt
    script:
        - apk --update add openssh-client
        - echo "$FI_SSH_KEY" | base64 -d > "FLUID_Serves.pem" && chmod 600 FLUID_Serves.pem
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) '(sudo docker stop tmp_vpn_1 || echo "") && (sudo docker rm tmp_vpn_1 || echo "")'
        - ssh -o StrictHostKeyChecking=no -i FLUID_Serves.pem admin@$(cat ip.txt) 'sudo docker pull registry.gitlab.com/fluidsignal/serves/vpn:master && sudo docker run -d --privileged=true -p 8081:443 --name=tmp_vpn_1 registry.gitlab.com/fluidsignal/serves/vpn:master'
    only:
    - triggers

change_dns:
    stage: dns
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo acc_key = \"$AWS_ACCESS_KEY_ID\" >> infrastructure/vars/aws.tfvars
        - echo sec_key = \"$AWS_SECRET_ACCESS_KEY\" >> infrastructure/vars/aws.tfvars
        - echo bucket = \"$BUCKET_NAME\" >> infrastructure/terraform.tfvars
        - cp infrastructure/vars/aws.tfvars infrastructure/dns
        - aws s3 cp s3://$BUCKET_NAME//terraform/terraform.tfstate infrastructure/terraform.tfstate
        - aws s3 cp s3://$BUCKET_NAME//terraform/dns/terraform.tfstate infrastructure/dns/terraform.tfstate || echo ""
        - echo "$FI_SSH_KEY" | base64 -d > infrastructure/vars/FLUID_Serves.pem
        - echo $SSO_XML > infrastructure/vars/SSO.xml
        - echo $SSO_FINANCE_XML > infrastructure/vars/SSOFinance.xml
        - echo db_id = \"$DB_ID\" >> infrastructure/terraform.tfvars
        - cd infrastructure
        - terraform init
        - terraform refresh -var-file="vars/aws.tfvars"
        - terraform output variable_ip >> dns/terraform.tfvars
        - terraform output variable_db >> dns/terraform.tfvars
    script:
        - cd dns
        - terraform init
        - terraform apply -auto-approve -var-file="aws.tfvars";
    after_script:
        - aws s3 cp infrastructure/dns/terraform.tfstate s3://$BUCKET_NAME//terraform/dns/terraform.tfstate
    only:
    - triggers
