stages:
  - terraform-backend
  - build-and-test
  - analytics
  - mr-check
  - deploy
  - eks-initial-setup
  - postdeploy
  - rotation

.in_dev_branch: &in_dev_branch
  except:
    refs:
      - master
      - triggers
      - schedules

.in_dev_and_master_branch: &in_dev_and_master_branch
  except:
    refs:
      - triggers
      - schedules

.in_master_branch: &in_master_branch
  only:
    refs:
      - master
  except:
    refs:
      - triggers
      - schedules

.in_schedules: &in_schedules
  only:
    refs:
      - schedules

.in_schedule_deploy_nix_docker_images: &in_schedule_deploy_nix_docker_images
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_DEPLOY_NIX_DOCKER_IMAGES

.in_schedule_nightly_build: &in_schedule_nightly_build
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_NIGHTLY_BUILD

.in_schedule_user_provision_rotate_keys: &in_schedule_user_provision_rotate_keys
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_USER_PROVISION_ROTATE_KEYS

.with_nix: &with_nix
  image: "${CI_REGISTRY_IMAGE}:nix"
  tags:
    - autoscaling-large
  script:
    - ./build.sh "${CI_JOB_NAME}"
  interruptible: true

analytics_formstack:
  <<: *with_nix
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_FORMSTACK]

analytics_dynamodb:
  <<: *with_nix
  stage: analytics
  only:
    refs: [schedules]
    variables: [$SCHEDULE_ANALYTICS_DYNAMODB]

deploy_docker_image_exams:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: build-and-test

deploy_docker_image_nix:
  <<: *with_nix
  <<: *in_schedule_deploy_nix_docker_images
  stage: build-and-test

deploy_docker_image_vpn:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: build-and-test

infra_analytics_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_analytics_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

infra_autoscaling_ci_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_autoscaling_ci_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

infra_aws_sso_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_aws_sso_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

.infra_fluid_eks_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

.infra_fluid_eks_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

.infra_fluid_eks_setup:
  <<: *with_nix
  <<: *in_master_branch
  stage: eks-initial-setup

infra_fluid_vpc_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_fluid_vpc_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

infra_monolith_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_monolith_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

infra_sops_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

infra_sops_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

lint_code:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

run_break_build_static:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

run_break_build_dynamic:
  <<: *with_nix
  <<: *in_master_branch
  stage: postdeploy

send_new_version_email:
  <<: *with_nix
  <<: *in_master_branch
  when: always
  stage: postdeploy

user_provision_continuous_dev_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

user_provision_continuous_dev_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

user_provision_continuous_dev_rotate_keys:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

user_provision_continuous_prod_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

user_provision_continuous_prod_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

user_provision_continuous_prod_rotate_keys:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

user_provision_integrates_dev_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

user_provision_integrates_dev_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

user_provision_integrates_dev_rotate_keys:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

user_provision_integrates_prod_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

user_provision_integrates_prod_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

user_provision_integrates_prod_rotate_keys:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

user_provision_web_prod_test:
  <<: *with_nix
  <<: *in_dev_branch
  stage: build-and-test

user_provision_web_prod_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy

user_provision_web_prod_rotate_keys:
  <<: *with_nix
  <<: *in_schedule_user_provision_rotate_keys
  stage: rotation

build-builder:
  image: fluidattacks/docker-bash:latest
  tags: [autoscaling]
  stage: build-and-test
  script:
    - ./ci-scripts/jobs/build-builder.sh
  only:
    refs:
      - master

commitlint:
  image: starefossen/ruby-node:2-10
  tags: [autoscaling]
  stage: build-and-test
  before_script:
    - npm install --unsafe-perm
  script:
    - ./ci-scripts/commitlint-checks.sh
  except:
    - master
    - schedules

danger:
  image: fluidattacks/danger-ruby
  tags: [autoscaling]
  stage: mr-check
  only:
    - merge_requests
  variables:
    DANGER_GITLAB_API_TOKEN: $DANGER_TOKEN
  before_script:
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head
      | grep ${CI_COMMIT_SHA}
      | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - npm install --unsafe-perm
  script:
    - danger --verbose --fail-on-errors=true

fluidasserts_post:
  tags: [autoscaling]
  stage: postdeploy
  image: fluidattacks/asserts
  script:
    - asserts asserts/exploit.py
  only:
    - master
  except:
    - schedules

change-keys-integrates-jwt:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: rotation
  script:
    ./ci-scripts/jobs/change-keys-integrates-jwt.sh
  <<: *in_schedule_nightly_build
  when: always

vault_backup:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: rotation
  script:
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/kubeconfig
        $HOME/.kube/config
    - cd infrastructure/eks/manifests/vault/
    - kubectl apply -f backup-operator.yaml
    - kubectl rollout status deploy/vault-etcd-operator-etcd-backup-operator
    - envsubst < credentials > creds
        && mv creds credentials
    - envsubst < config > conf
        && mv conf config
    - kubectl create secret generic aws
        --from-file=credentials
        --from-file=config
    - export DATE=$(date +%Y-%m-%d)
    - envsubst < backup.yaml > backup
        && mv backup backup.yaml
    - kubectl apply -f backup.yaml
    - while ! aws s3 ls s3://$VAULT_S3_BUCKET | grep backup-$(date +%Y-%m-%d);
        do sleep 2;
      done
    - kubectl delete -f backup.yaml
    - kubectl delete secret aws
    - kubectl delete -f backup-operator.yaml
    - rm credentials
  <<: *in_schedule_nightly_build

analytics-sync-timedoctor:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-timedoctor.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_TIMEDOCTOR

analytics-sync-git:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling-large]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-git.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_GIT

analytics-sync-mandrill:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-mandrill.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_MANDRILL

analytics-sync-infrastructure:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-infrastructure.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_INFRASTRUCTURE

analytics-sync-intercom:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-intercom.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_INTERCOM

analytics-sync-gitlab:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling-large]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-gitlab.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_GITLAB

analytics-sync-continuous:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-continuous.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_CONTINUOUS

analytics-refresh-token-timedoctor:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-refresh-token-timedoctor.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_REFRESH_TOKENS

analytics-sync-zoho:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: analytics
  script:
    - ./ci-scripts/jobs/analytics-sync-zoho.sh
  <<: *in_schedules
  only:
    variables:
      - $FLAG_SYNC_ZOHO

terraform-states-bucket:
  image: registry.gitlab.com/fluidattacks/serves/builder:$CI_COMMIT_REF_NAME
  tags: [autoscaling]
  stage: terraform-backend
  script:
    - ./ci-scripts/jobs/terraform-states-bucket.sh
  only:
    - master
  except:
    - schedules
