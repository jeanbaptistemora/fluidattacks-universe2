image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
   - docker:dind


before_script:
  - echo "$CI_REGISTRY_PASSWORD" |
        docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin

after_script:
  - docker logout "$CI_REGISTRY"

stages:
  - deps
  - test-infra
  - build
  - tag
  - deploy
  - postdeploy
  - dns
  - cleanup

.vault_login: &vault_login
  before_script:
    - aws s3 cp
        s3://$VAULT_S3_BUCKET/vault-ca.crt
        /usr/local/share/ca-certificates/
    - update-ca-certificates
    - ROLE_ID=$(aws secretsmanager --region us-east-1
        get-secret-value --secret-id SERVES_ROLE_ID | jq -r '.SecretString')
    - SECRET_ID=$(aws secretsmanager --region us-east-1
        get-secret-value --secret-id SERVES_SECRET_ID | jq -r '.SecretString')
    - export VAULT_TOKEN=$(curl --request POST
        --data '{"role_id":"'"$ROLE_ID"'","secret_id":"'"$SECRET_ID"'"}'
        "https://$VAULT_S3_BUCKET.com/v1/auth/approle/login" |
        jq -r '.auth.client_token')
    - export VAULT_HOST="$VAULT_S3_BUCKET.com"
    - export VAULT_PORT=443
    - export VAULTENV_SECRETS_FILE="$CI_PROJECT_DIR/env.vars"
    - echo "$CI_REGISTRY_PASSWORD" |
        docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin

build:
  stage: deps 
  script:
    - mkdir -p /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
    - cp -a ${CI_PROJECT_DIR} /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src
  retry: 2

build_base:
  stage: deps
  script:
    - sh containers/base/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:base"
  except:
    - master

build_builder:
  stage: deps
  script:
    - docker build
        --cache-from "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
        containers/builder/
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
  except:
    - master

test_terraform:
  stage: test-infra
  <<: *vault_login
  script:
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
        infrastructure/terraform.tfstate ||
        echo "No previous state for infrastructure found"
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
        infrastructure/dns/terraform.tfstate ||
        echo "No previous state for DNS found"
    - vaultenv infrastructure/terraform.sh
  after_script:
    - rm infrastructure/*.xml
    - docker logout "$CI_REGISTRY"
  except:
    - master

build_alg:
  stage: build
  <<: *vault_login
  script:
    - vaultenv containers/alg/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
  except:
    - master

build_exams:
  stage: build
  <<: *vault_login
  script:
    - vaultenv containers/exams/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
  except:
    - master

build_vpn:
  stage: build
  <<: *vault_login
  script:
    - vaultenv containers/vpn/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
  except:
    - master

tag-alg:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg:master"
  only:
    - master

tag-exams:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams:master"
  only:
    - master

tag-vpn:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn:master"
  only:
    - master

deploy_infra:
  stage: deploy
  <<: *vault_login
  script:
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
        infrastructure/terraform.tfstate ||
        (echo "No previous state found" && NEW_DEPLOY=true)
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
        infrastructure/dns/terraform.tfstate ||
        echo "No previous state for DNS found"
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/kubeconfig
        $HOME/.kube/config || echo "No Kubernetes configuration file found"
    - sed -i 's/plan/apply\ -auto-approve/g' infrastructure/terraform.sh
    - vaultenv infrastructure/terraform.sh deployment
  after_script:
    - aws s3 cp
        infrastructure/terraform.tfstate
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
    - aws s3 cp
        infrastructure/dns/terraform.tfstate
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
    - aws s3 cp
        $HOME/.kube/config
        s3://$FS_S3_BUCKET_NAME/terraform/kubeconfig
    - aws s3 cp
        "$HOME/vault-ca.crt"
        s3://$VAULT_S3_BUCKET/vault-ca.crt
    - rm infrastructure/*.xml
    - docker logout "$CI_REGISTRY"
  only:
    - master

fluidasserts:
  stage: postdeploy
  script:
    - docker pull fluidattacks/asserts
    - docker run -e FA_STRICT="true" -w /code
      -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      -v /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src:/code
      fluidattacks/asserts asserts /code/asserts/exploit.py
  only:
    - master

clean:
  stage: cleanup
  script:
    - rm -rf /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
    - rm -rf /tmp/helm*
  when: always
