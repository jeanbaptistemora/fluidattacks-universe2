stages:
  - rotation
  - build
  - lint-code
  - test-code
  - test-infra
  - merge-request
  - deploy-infra
  - deploy-app
  - post-deploy
  - analytics
  - subscriptions
  - external
  - scheduler

.commit_stages:
  - &all_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|forces|integrates|reviews|skims)/'
  - &forces_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|forces)/'
  - &integrates_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|integrates)/'
  - &reviews_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|reviews)/'
  - &skims_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|skims)/'

.in_everywhere_except_periodic_jobs_and_mrs_integrates: &in_everywhere_except_periodic_jobs_and_mrs_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern

.in_master_except_periodic_jobs_integrates: &in_master_except_periodic_jobs_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: *integrates_commit_pattern

.in_dev_branch_integrates: &in_dev_branch_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern


.in_dev_and_master_branch_integrates: &in_dev_and_master_branch_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern

.forces_in_dev_and_master_branch: &forces_in_dev_and_master_branch
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *forces_commit_pattern

.forces_in_master_branch: &forces_in_master_branch
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *forces_commit_pattern

.in_master_branch_integrates: &in_master_branch_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern

.in_master_branch_and_schedules_integrates: &in_master_branch_and_schedules_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern

.in_mrs_and_master_branch_integrates: &in_mrs_and_master_branch_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_BRANCH != "master"'
      when: never
    - if: *integrates_commit_pattern

.in_mrs: &in_mrs
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.in_schedule_nightly_build_integrates: &in_schedule_nightly_build_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - if:  '$integrates_nightly_build == null'
      when: never
    - when: always

.with_nix: &with_nix
  tags: [autoscaling]
  image: "${CI_REGISTRY_IMAGE}/nix:${CI_JOB_NAME}"
  needs: []
  script:
    - ./build.sh "${CI_JOB_NAME% *}"
  interruptible: true

.all_in_dev_and_master_branch: &all_in_dev_and_master_branch
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *all_commit_pattern

.skims_in_dev_and_master_branch: &skims_in_dev_and_master_branch
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *skims_commit_pattern

.skims_in_master_branch: &skims_in_master_branch
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *skims_commit_pattern

.reviews_in_dev_and_master_branch: &reviews_in_dev_and_master_branch
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *reviews_commit_pattern

.analytics_template: &analytics_template
  <<: *with_nix
  artifacts:
    expire_in: 1 week
    paths:
      - analytics
    when: on_success
  stage: analytics
  tags: [autoscaling]

analytics_make_documents_dev:
  <<: *analytics_template
  <<: *in_dev_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:analytics_make_documents_dev"
  parallel: 3

analytics_make_documents_prod:
  <<: *analytics_template
  <<: *in_master_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:analytics_make_documents_prod"
  interruptible: false
  parallel: 6

analytics_make_documents_prod_schedule:
  <<: *analytics_template
  image: "${CI_REGISTRY_IMAGE}/nix:analytics_make_documents_prod_schedule"
  interruptible: false
  only:
    refs: [schedules]
    variables: [$analytics]
  parallel: 6

analytics_make_snapshots_prod_schedule:
  <<: *analytics_template
  interruptible: false
  only:
    refs: [schedules]
    variables: [$analytics]

subscriptions_trigger_user_to_entity_report_dev:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  stage: subscriptions

subscriptions_trigger_user_to_entity_report_prod_schedule:
  <<: *with_nix
  interruptible: false
  stage: subscriptions
  only:
    refs: [schedules]
    variables: [$subscriptions]

.scheduler_prod_template: &scheduler_prod_template
  <<: *with_nix
  interruptible: false
  stage: scheduler
  image: "${CI_REGISTRY_IMAGE}/nix:scheduler_prod"
  tags: [autoscaling]
  script:
    - ./build.sh scheduler_prod "${CI_JOB_NAME/scheduler_/}"

scheduler_delete_pending_projects:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$delete_pending_projects]

scheduler_reset_expired_accepted_findings:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$reset_expired_accepted_findings]

scheduler_update_indicators:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$update_indicators]

scheduler_get_new_releases:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_new_releases]

scheduler_get_remediated_findings:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_remediated_findings]

scheduler_get_new_vulnerabilities:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_new_vulnerabilities]

scheduler_send_unsolved_to_all:
  <<: *scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$send_unsolved_to_all]

build_front:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: build
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - app/static/
    when: on_success

build_mobile_android:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: build
  tags: [autoscaling-large]
  artifacts:
    expire_in: 1 day
    paths:
      - mobile/output/
    when: on_success

build_lambdas:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: build
  artifacts:
    expire_in: 1 day
    paths:
      - lambda/packages/
    when: on_success

coverage_report:
  <<: *with_nix
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern
      when: always
  needs:
    - test_back
    - test_front
    - test_mobile
  stage: external
  retry: 1

clean_registries:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: post-deploy

deploy_k8s_back_ephemeral:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  stage: deploy-app
  needs: [build_container_app]
  retry: 1
  environment:
    name: "ephemeral/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.env.fluidattacks.com/integrates"
    on_stop: deploy_k8s_stop_ephemeral

# Take into account that changing this job name impacts the rotation of
#   AWS secrets at serves.
# The rotation script looks the last deploy_k8s_back execution
#   and decides if keys should be rotated or not.
# This is done to avoid keys expiration on the current integrates deployment
#   in case the continuous delivery system at Integrates is failing
# Please follow the link and adjust if needed, thanks!
#   https://gitlab.com/fluidattacks/serves/-/blob/0cb7556d236a3668bdcae64027941565e92131ad/build/include/helpers.sh#L180
deploy_k8s_back:
  <<: *with_nix
  <<: *in_master_except_periodic_jobs_integrates
  stage: deploy-app
  needs: [build_container_app]
  retry: 1
  environment:
    name: "production"
    url: "https://fluidattacks.com/integrates"

deploy_k8s_stop_ephemeral:
  <<: *with_nix
  stage: deploy-app
  retry: 1
  environment:
    name: "ephemeral/$CI_COMMIT_REF_SLUG"
    action: stop
  rules:
    - if: '$CI_PIPELINE_SOURCE == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: *integrates_commit_pattern
      when: manual

deploy_mobile_ota:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: deploy-app
  tags: [autoscaling-large]

deploy_mobile_playstore:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-app
  needs: [build_mobile_android]
  dependencies:
    - build_mobile_android

deploy_permissions_matrix:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: deploy-app
  artifacts:
    expire_in: 1 day
    paths:
      - deploy/permissions-matrix/group_level.html
      - deploy/permissions-matrix/organization_level.html
      - deploy/permissions-matrix/user_level.html
    when: on_success

build_container_app:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: build
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - version.txt
      - django-apps/packages/
    when: on_success

build_nix_caches:
  <<: *with_nix
  tags: [autoscaling-large]
  image: nixos/nix:2.3
  stage: build
  before_script:
    - apk add --no-cache bash
  parallel: 20
  interruptible: false
  only:
    refs: [schedules]
    variables: [$build_nix_caches]

deploy_front:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: deploy-app
  needs: [build_front]

functional_tests_dev:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:functional_tests_dev"
  needs:
    - deploy_k8s_back_ephemeral
    - deploy_front
  stage: post-deploy
  retry: 1
  parallel: 6
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - test/functional/screenshots/
    when: always

functional_tests_prod:
  <<: *with_nix
  <<: *in_master_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:functional_tests_prod"
  needs:
    - deploy_k8s_back
    - deploy_front
  stage: post-deploy
  retry: 1
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - test/functional/screenshots/
    when: always

infra_backup_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

infra_backup_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

infra_database_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

infra_database_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

infra_cache_db_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

infra_cache_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

infra_django_db_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

infra_django_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

infra_resources_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  needs:
    - build_lambdas
  stage: deploy-infra

infra_resources_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  needs:
    - build_lambdas
  stage: test-infra

infra_secret_management_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

infra_secret_management_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

lint_back:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

lint_front:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

lint_graphics:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

lint_build_system:
  <<: *with_nix
  <<: *all_in_dev_and_master_branch
  stage: lint-code

lint_mobile:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

lint_secrets:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

renew_certificates:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: post-deploy
  environment:
    name: "ephemeral/renew-ephemeral-cert"
    auto_stop_in: 1 hour

rotate_jwt_token:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: rotation

send_new_release_email:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: post-deploy
  needs:
    - deploy_k8s_back

test_back:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  retry: 1
  artifacts:
    name: "coverage_xml_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - coverage.xml
    expire_in: 1 week

test_front:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - front/coverage.lcov
    expire_in: 1 week

test_mobile:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - mobile/coverage.lcov
    expire_in: 1 week

forces_static:
  stage: test-code
  tags: [autoscaling]
  needs: []
  image:
    name: fluidattacks/break-build
    entrypoint: [""]
  before_script:
    - docker pull fluidattacks/break-build
  script:
    - bash <(docker run fluidattacks/break-build
              --static
              --id ${FORCES_ID}
              --secret ${FORCES_SECRET}
              --gitlab-docker-socket-binding
             )
  interruptible: true
  <<: *in_dev_and_master_branch_integrates

forces_dynamic:
  stage: post-deploy
  tags: [autoscaling]
  needs: []
  image:
    name: fluidattacks/break-build
    entrypoint: [""]
  before_script:
    - docker pull fluidattacks/break-build
  script:
    - bash <(docker run fluidattacks/break-build
              --dynamic
              --id ${FORCES_ID}
              --secret ${FORCES_SECRET}
              --gitlab-docker-socket-binding
             )
  interruptible: true
  allow_failure: true
  <<: *in_master_branch_integrates

lint_commit_msg:
  <<: *with_nix
  except:
    refs:
      - schedules
      - triggers
  stage: lint-code

danger:
  <<: *in_mrs
  tags: [autoscaling]
  needs: []
  stage: merge-request
  image: fluidattacks/danger-ruby
  variables:
    DANGER_GITLAB_API_TOKEN: $DANGER_TOKEN
  before_script:
    - curl -LOJ https://static-objects.gitlab.net/fluidattacks/public/raw/master/commitlint-configs/integrates/parser-preset.js
    - curl -LOJ https://static-objects.gitlab.net/fluidattacks/public/raw/master/commitlint-configs/integrates/commitlint.config.js
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head
      | grep ${CI_COMMIT_SHA}
      | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - npm install @commitlint/{config-conventional,cli}
  script:
    - danger --verbose --fail-on-errors=true

skims_deploy:
  <<: *with_nix
  <<: *skims_in_master_branch
  stage: deploy-app

skims_lint:
  <<: *with_nix
  <<: *skims_in_dev_and_master_branch
  stage: lint-code

skims_structure:
  <<: *with_nix
  <<: *skims_in_dev_and_master_branch
  artifacts:
    expire_in: 1 week
    paths:
      - skims
    when: on_success
  stage: test-code

skims_test:
  <<: *with_nix
  <<: *skims_in_dev_and_master_branch
  stage: test-code

reviews_lint:
  <<: *with_nix
  <<: *reviews_in_dev_and_master_branch
  stage: lint-code

reviews_structure:
  <<: *with_nix
  <<: *reviews_in_dev_and_master_branch
  artifacts:
    expire_in: 1 week
    paths:
      - reviews
    when: on_success
  stage: test-code

forces_lint:
  <<: *with_nix
  <<: *forces_in_dev_and_master_branch
  stage: lint-code

forces_test:
  <<: *with_nix
  <<: *forces_in_dev_and_master_branch
  stage: test-code

forces_deploy:
  <<: *with_nix
  <<: *forces_in_master_branch
  stage: build

forces_deploy_to_docker_hub:
  <<: *with_nix
  <<: *forces_in_master_branch
  stage: deploy-app
  needs:
    - forces_deploy
