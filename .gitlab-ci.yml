image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
   - docker:dind


before_script:
  - echo "$CI_REGISTRY_PASSWORD" |
        docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin

after_script:
  - docker logout "$CI_REGISTRY"

stages:
  - deps
  - test-infra
  - build
  - tag
  - deploy
  - dns

build_base:
  stage: deps
  script:
    - sh containers/base/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:base"
  except:
    - master

build_builder:
  stage: deps
  script:
    - docker build
        --cache-from "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
        containers/builder/
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:builder"
  except:
    - master

test_terraform:
  stage: test-infra
  before_script:
    - mkdir infrastructure/vars
    - cd infrastructure
    - torus run -- ./set-tfvars.sh
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
        terraform.tfstate || echo "No previous state for infrastructure found"
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
        dns/terraform.tfstate || echo "No previous state for DNS found"
    - cp vars/aws.tfvars dns/
  script:
    - terraform init
    - tflint --var-file="vars/aws.tfvars"
    - terraform refresh --var-file="vars/aws.tfvars"
    - terraform plan -var-file="vars/aws.tfvars"
    - terraform output variable_db >> dns/terraform.tfvars
    - terraform output variable_web >> dns/terraform.tfvars
    - terraform output variable_integrates >> dns/terraform.tfvars
    - cd dns/
    - export TF_VAR_ELB_DNS="$(aws elb --region us-east-1
        describe-load-balancers |
        jq -r '.LoadBalancerDescriptions[].DNSName')"
    - export TF_VAR_ELB_ZONE="$(aws elb --region us-east-1
        describe-load-balancers |
        jq -r '.LoadBalancerDescriptions[].CanonicalHostedZoneNameID')"
    - terraform init
    - terraform refresh -var-file="aws.tfvars"
    - terraform plan -var-file="aws.tfvars"
  after_script:
    - rm -rf infrastructure/vars
    - rm -rf infrastructure/terraform.tfvars
    - rm -rf infrastructure/dns/aws.tfvars
    - rm -rf infrastructure/dns/terraform.tfvars
  except:
    - master

build_alg:
  stage: build
  script:
    - torus run -- sh containers/alg/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
  except:
    - master

build_exams:
  stage: build
  script:
    - torus run -- sh containers/exams/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
  except:
    - master

build_vpn:
  stage: build
  script:
    - torus run -- sh containers/vpn/build.sh
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
  except:
    - master

tag-alg:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/alg:master"
  only:
    - master

tag-exams:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/exams:master"
  only:
    - master

tag-vpn:
  stage: tag
  script:
    - docker pull
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
    - docker tag
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn/dev:$CI_COMMIT_SHA"
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn:master"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/vpn:master"
  only:
    - master

deploy_infra:
  stage: deploy
  before_script:
    - mkdir infrastructure/vars
    - mkdir -p $HOME/.kube
    - cd infrastructure
    - torus run -- ./set-tfvars.sh
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/FLUID_Serves.pem
        vars/FLUID_Serves.pem ||
        (pip install boto && python infrastructure/create-key.py && export
        NEW_DEPLOY=true)
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
        terraform.tfstate || echo "No previous state found"
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/kubeconfig
        $HOME/.kube/config || echo "No Kubernetes configuration file found"
  script:
    - terraform init
    - terraform refresh -var-file="vars/aws.tfvars"
    - torus run -- terraform apply -auto-approve -var-file="vars/aws.tfvars"
    - torus run -- ./eks/manifests/deploy.sh
    - sh set-keys.sh
    - if [ -n "${NEW_DEPLOY}" ]; then
            git clone https://github.com/checkr/s3-sync.git;
            fi
    - if [ -n "${NEW_DEPLOY}" ]; then
            sh create-config.sh && cd s3-sync && \
            go run main.go sync --config ./config-prod.yaml;
            fi
  after_script:
    - aws s3 cp
        infrastructure/terraform.tfstate
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
    - aws s3 cp
        $HOME/.kube/config
        s3://$FS_S3_BUCKET_NAME/terraform/kubeconfig
    - aws s3 cp
        infrastructure/vars/FLUID_Serves.pem
        s3://$FS_S3_BUCKET_NAME/terraform/FLUID_Serves.pem
    - rm -rf infrastructure/vars
    - rm -rf infrastructure/terraform.tfvars
  only:
    - master

change_dns:
  stage: dns
  dependencies: []
  before_script:
    - mkdir infrastructure/vars
    - cd infrastructure
    - torus run -- ./set-tfvars.sh
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/FLUID_Serves.pem
        vars/FLUID_Serves.pem
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/terraform.tfstate
        terraform.tfstate
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
        dns/terraform.tfstate || echo ""
    - cp vars/aws.tfvars dns/
    - terraform init
    - terraform refresh -var-file="vars/aws.tfvars"
    - terraform output variable_db >> dns/terraform.tfvars
    - terraform output variable_web >> dns/terraform.tfvars
    - terraform output variable_integrates >> dns/terraform.tfvars
  script:
    - cd dns/
    - export TF_VAR_ELB_DNS="$(aws elb --region us-east-1
        describe-load-balancers |
        jq -r '.LoadBalancerDescriptions[].DNSName')"
    - export TF_VAR_ELB_ZONE="$(aws elb --region us-east-1
        describe-load-balancers |
        jq -r '.LoadBalancerDescriptions[].CanonicalHostedZoneNameID')"
    - terraform init
    - terraform refresh -var-file="aws.tfvars"
    - terraform apply -auto-approve -var-file="aws.tfvars";
  after_script:
    - aws s3 cp
        infrastructure/dns/terraform.tfstate
        s3://$FS_S3_BUCKET_NAME/terraform/dns/terraform.tfstate
    - rm -rf infrastructure/dns/aws.tfvars
    - rm -rf infrastructure/vars
    - rm -rf infrastructure/terraform.tfvars
  only:
    - master
