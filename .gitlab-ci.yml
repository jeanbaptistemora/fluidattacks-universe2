image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
   - docker:dind


before_script:
    - echo $VAULT > /tmp/.vault.txt
<<<<<<< HEAD
    - mkdir terraform/vars && echo $AWS_VARS > terraform/vars/aws.tfvars
    - echo $KEY_SERVES > terraform/vars/fluidtestingserves.pem
=======
>>>>>>> d051e4e... Test mkdir in before
    - docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS

codequality:
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -e sonar-python -e pep8 -e randon -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]

stages:
    - build
    - test
    - deploy

build_base:
    stage: build
    script:
        - sh containers/base/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves:base

build_alg:
    stage: build
    script:
        - sh containers/alg/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/alg:base

build_exams:
    stage: build
    script:
        - sh containers/exams/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/exams:base

build_vpn:
    stage: build
    script:
        - sh containers/vpn/build.sh
        - docker push registry.gitlab.com/fluidsignal/serves/vpn:base

test_terraform:
   stage: test
   before_script:
<<<<<<< HEAD
<<<<<<< HEAD
      - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      - aws s3 cp s3://fluidserves/terraform/FLUID_ServesTF.pem infrastructure/vars/FLUID_ServesTF.pem
=======
      - echo $KEY_SERVES > infrastructure/vars/fluidtestingserves.pem
      - apk update && apk add curl
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/0.11.2/terraform_0.11.2_linux_amd64.zip
      - unzip terraform.zip && rm terraform.zip
      - cp terraform /bin/terraform
      - curl -Lo tflint.zip https://github.com/wata727/tflint/releases/download/v0.5.4/tflint_linux_amd64.zip
      - unzip tflint.zip && rm tflint.zip
      - install tflint /bin
>>>>>>> d051e4e... Test mkdir in before
=======
>>>>>>> 3b4ee5a... Test builder
=======
      - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
      - echo $KEY_SERVES > infrastructure/vars/fluidtestingserves.pem
>>>>>>> 1cb7165... Echo on before again
=======
      - aws s3 cp s3://serves/fluidtestingserves.pem infrastructure/vars/fluidtestingserves.pem
>>>>>>> 05362e3... Pull key from aws
=======
      - aws s3 cp s3://fluidserves/terraform/FLUID_ServesTF.pem infrastructure/vars/FLUID_ServesTF.pem
>>>>>>> a8416e6... Little changes to master
      - cd infrastructure
   script:
      - terraform init
      - tflint --var-file="vars/aws.tfvars"
      - terraform plan -var-file="vars/aws.tfvars"


deploy_alg:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/alg:base
        - docker tag registry.gitlab.com/fluidsignal/serves/alg:base registry.gitlab.com/fluidsignal/serves/alg:master
        - docker push registry.gitlab.com/fluidsignal/serves/alg:master
    only:
    - master

deploy_exams:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/exams:base
        - docker tag registry.gitlab.com/fluidsignal/serves/exams:base registry.gitlab.com/fluidsignal/serves/exams:master
        - docker push registry.gitlab.com/fluidsignal/serves/exams:master
    only:
    - master

deploy_vpn:
    stage: deploy
    script:
        - docker pull registry.gitlab.com/fluidsignal/serves/vpn:base
        - docker tag registry.gitlab.com/fluidsignal/serves/vpn:base registry.gitlab.com/fluidsignal/serves/vpn:master
        - docker push registry.gitlab.com/fluidsignal/serves/vpn:master
    only:
    - master
<<<<<<< HEAD
<<<<<<< HEAD

deploy_terraform:
    stage: deploy
    before_script:
<<<<<<< HEAD
<<<<<<< HEAD
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - aws s3 cp s3://fluidserves/terraform/FLUID_ServesTF.pem infrastructure/vars/FLUID_ServesTF.pem
        - aws s3 cp s3://fluidserves/terraform/terraform.tfstate infrastructure/terraform.tfstate || echo ""
        - cd infrastructure
    script:
        - terraform init
        - terraform apply -auto-approve -var-file="vars/aws.tfvars"
    after_script:
        - aws s3 cp infrastructure/terraform.tfstate s3://fluidserves/terraform/terraform.tfstate
    only:
    - master
=======
>>>>>>> ffb44dd... Networking and Instance created, starting DNS routes
=======

deploy_terraform:
<<<<<<< HEAD
   stage: deploy
   before_script:
      - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
      - echo $KEY_SERVES > infrastructure/vars/fluidtestingserves.pem
      - cd infrastructure
   script:
      - terraform init
      - terraform apply -var-file="vars/aws.tfvars"
<<<<<<< HEAD
>>>>>>> 63c28d6... Apply to test
=======
=======
    stage: deploy
    before_script:
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
        - echo $KEY_SERVES > infrastructure/vars/fluidtestingserves.pem
=======
>>>>>>> 3b4ee5a... Test builder
=======
        - mkdir infrastructure/vars && echo $AWS_VARS > infrastructure/vars/aws.tfvars
<<<<<<< HEAD
<<<<<<< HEAD
        - echo $KEY_SERVES > infrastructure/vars/fluidtestingserves.pem
>>>>>>> 1cb7165... Echo on before again
=======
        - aws s3 cp s3://serves/fluidtestingserves.pem infrastructure/vars/fluidtestingserves.pem
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 05362e3... Pull key from aws
=======
        - aws s3 cp s3://serves/.terraform infrastructure/.terraform || echo ""
=======
        - aws s3 cp --recursive s3://serves/.terraform infrastructure/.terraform || echo ""
<<<<<<< HEAD
>>>>>>> f041d97... Put recursive
        - aws s3 cp s3://serves/terraform.tfstate infrastructure/terraform.tfstate|| echo ""
>>>>>>> 2d8d680... Use s3 to save and load state
=======
        - rm -r infrastructure/.terraform/plugins/ || echo ""
=======
>>>>>>> 1ba677d... Change file names
        - aws s3 cp s3://serves/terraform.tfstate infrastructure/terraform.tfstate || echo ""
>>>>>>> 8b757c3... Deleting plugins
=======
        - aws s3 cp s3://fluidserves/terraform/FLUID_ServesTF.pem infrastructure/vars/FLUID_ServesTF.pem
        - aws s3 cp s3://fluidserves/terraform/terraform.tfstate infrastructure/terraform.tfstate || echo ""
>>>>>>> a8416e6... Little changes to master
        - cd infrastructure
    script:
        - terraform init
<<<<<<< HEAD
        - terraform apply -var-file="vars/aws.tfvars"
>>>>>>> 4cf9d89... Fix spaces
=======
        - terraform apply -auto-approve -var-file="vars/aws.tfvars"
<<<<<<< HEAD
>>>>>>> 1c3bfd0... Set auto approve
=======
    after_script:
<<<<<<< HEAD
        - aws s3 cp infrastructure/terraform.tfstate s3://serves/terraform.tfstate
>>>>>>> 2d8d680... Use s3 to save and load state
    only:
    - jarmas
>>>>>>> 14c7ae7... Apply to test
=======
        - aws s3 cp infrastructure/terraform.tfstate s3://fluidserves/terraform/terraform.tfstate
    only:
    - master
>>>>>>> a8416e6... Little changes to master
