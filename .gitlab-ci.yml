---

image: "${CI_REGISTRY_IMAGE}:builder"

stages:
  - build
  - test
  - before-mr
  - at-mr
  - deploy

.kaniko_config: &kaniko_config
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo '{"auths":{'
              '"'"${CI_REGISTRY}"'":{"auth":"'${CI_REGISTRY_AUTH}'"},'
              '"'"${DOCKER_HUB_URL}"'":{"auth":"'${DOCKER_HUB_AUTH}'"}}}' >
          /kaniko/.docker/config.json

.in_dev_branch: &in_dev_branch
  except:
    refs:
      - master
      - triggers
      - schedules

.in_prod_branch: &in_prod_branch
  only:
    refs:
      - master
  except:
    refs:
      - triggers
      - schedules

.with_nix: &with_nix
  tags: [autoscaling-large]
  image: fluidattacks/nix
  script:
    - ./build.sh
  interruptible: true

build:
  stage: build
  tags: [autoscaling-large]
  <<: *kaniko_config
  services: []
  script:
    - /kaniko/executor
        --dockerfile Dockerfile.builder
        --context .
        --destination "${CI_REGISTRY_IMAGE}:builder"
        --cache
        --cache-repo "${CI_REGISTRY_IMAGE}"/builder-cache
        --cleanup
        --verbosity warn
  retry:
    max: 2
    when:
      - runner_system_failure
  only:
    - schedules
  interruptible: true

commitlint:
  image: starefossen/ruby-node:2-10
  stage: test
  tags: [autoscaling]
  before_script:
    - npm install --unsafe-perm
  script:
    - ./ci-scripts/commitlint-checks.sh
  except:
    - master
    - schedules
  interruptible: true

lint:
  stage: test
  tags: [autoscaling-large]
  script:
    - scons lint
    - overcommit -s && overcommit -s pre-commit && overcommit -r
  except:
    - master
    - schedules
  interruptible: true

lint_nix_code:
  <<: *with_nix
  stage: test
  <<: *in_dev_branch

lint_python_code_bandit:
  <<: *with_nix
  stage: test
  <<: *in_dev_branch

lint_shell_code:
  <<: *with_nix
  stage: test
  <<: *in_dev_branch

populate_caches:
  <<: *with_nix
  stage: deploy
  <<: *in_prod_branch

.test-template: &test-template
  stage: test
  tags: [autoscaling-large]
  services:
    - docker:dind
  before_script:
    - export ASSERTS_MODULE=${CI_JOB_NAME#*-}
  script:
    - scons test
    - cp build/coverage/results.xml coverage.xml
    - cp build/coverage/html/index.html coverage.html
  artifacts:
    name: "coverage_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_${ASSERTS_MODULE}"
    paths:
      - coverage.xml
      - coverage.html
  except:
    - master
    - schedules
  interruptible: true

test-cloud.aws.api:
  <<: *test-template

test-cloud.aws.cloudformation:
  <<: *test-template

test-cloud.aws.terraform:
  <<: *test-template

test-cloud.azure:
  <<: *test-template

test-cloud.gcp:
  <<: *test-template

test-cloud.kubernetes:
  <<: *test-template

test-cloud:
  <<: *test-template

test-db:
  <<: *test-template

test-format:
  <<: *test-template

test-helper:
  <<: *test-template

test-iot:
  <<: *test-template

test-lang:
  <<: *test-template

test-ot:
  <<: *test-template

test-proto:
  <<: *test-template

test-sca:
  <<: *test-template

test-syst:
  <<: *test-template

test-utils:
  <<: *test-template

fluidasserts:
  stage: test
  tags: [autoscaling-large]
  variables:
    FA_STRICT: "false"
  script:
    - pip3 install .
    - asserts -o deploy/container/exploit.py
  except:
    - master
    - schedules
  interruptible: true

.coverage-report:
  stage: before-mr
  tags: [autoscaling]
  variables:
    GITLAB_API: "${CI_API_V4_URL}"
    PROJECT_ID: "${CI_PROJECT_ID}"
    BRANCH: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    TOKEN: "${CI_JOB_TOKEN}"
  script:
    - scons codecov
    - cat coverage.html | grep -Po '(?<=pc_cov">)\d+%' | xargs echo 'Coverage:'
  needs: [test]
  except:
    - master
    - schedules
  interruptible: true

danger:
  image: fluidattacks/danger-ruby
  stage: at-mr
  tags: [autoscaling]
  only:
    - merge_requests
  variables:
    DANGER_GITLAB_API_TOKEN: $DANGER_TOKEN
  before_script:
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head
      | grep ${CI_COMMIT_SHA}
      | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - npm install --unsafe-perm
  script:
    - danger --verbose --fail-on-errors=true

deploy:
  stage: deploy
  tags: [autoscaling]
  script:
    - version=$(./deploy/get_version.py)
    - sed -i "s/_get_version(),/'${version}',/g" setup.py
    - scons dist
    - scons deploy
    - mkdir -p dist && cp -a build/dist/*.zip dist/
  only:
    - master
  except:
    - schedules
  retry:
    max: 2
    when:
      - runner_system_failure
  interruptible: true

pages:
  stage: deploy
  tags: [autoscaling]
  script:
    - scons sphinxdoc
  artifacts:
    paths: [public/]
  only:
    - master
  except:
    - schedules
  retry:
    max: 2
    when:
      - runner_system_failure
  interruptible: true

push-container:
  stage: deploy
  tags: [autoscaling-large]
  <<: *kaniko_config
  services: []
  dependencies: []
  script:
    - /kaniko/executor
        --build-arg BUILDER_IMAGE="${CI_REGISTRY_IMAGE}:builder"
        --build-arg CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME}"
        --build-arg CI_REPOSITORY_URL="${CI_REPOSITORY_URL}"
        --context .
        --cleanup
        --destination "${CI_REGISTRY_IMAGE}:runner-light"
        --destination fluidattacks/asserts:light
        --dockerfile Dockerfile.runner
        --target light
        --verbosity warn
        --cache=true
        --cache-repo "${CI_REGISTRY_IMAGE}/runner-cache"
    - /kaniko/executor
        --build-arg BUILDER_IMAGE="${CI_REGISTRY_IMAGE}:builder"
        --build-arg CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME}"
        --build-arg CI_REPOSITORY_URL="${CI_REPOSITORY_URL}"
        --context .
        --cleanup
        --destination "${CI_REGISTRY_IMAGE}:runner"
        --destination fluidattacks/asserts
        --dockerfile Dockerfile.runner
        --target full
        --verbosity warn
        --cache=true
        --cache-repo "${CI_REGISTRY_IMAGE}/runner-cache"
  only:
    - master
  except:
    - schedules
  retry:
    max: 2
    when:
      - runner_system_failure
  interruptible: true
