Description: vulnerable
Resources:
  cluster1:
    Properties:
      BackupRetentionPeriod: 0
      Engine: postgres
      StorageEncrypted: 'false'
    Type: AWS::RDS::DBCluster
  cluster2:
    Properties:
      BackupRetentionPeriod:
        Fn::If:
          - prod
          - 32
          - 0
      Engine: postgres
    Type: AWS::RDS::DBCluster
  ec2Volume1:
    Properties:
      AvailabilityZone: us-east-1
      Encrypted: 'false'
    Type: AWS::EC2::Volume
  ec2instance1:
    Type: AWS::EC2::Instance
  instance1:
    Properties:
      BackupRetentionPeriod: '0'
      DBInstanceClass: t2.micro
      Engine: postgres
      MasterUserPassword: pass
      MasterUsername: user
      PubliclyAccessible: 'true'
      StorageEncrypted: 'false'
    Type: AWS::RDS::DBInstance
  key1:
    Properties:
      EnableKeyRotation: 'false'
      KeyPolicy: {}
    Type: AWS::KMS::Key
  mangedPolicy1:
    Properties:
      PolicyDocument:
        Statement:
          - Action: '*'
            Effect: Deny
            Resource: '*'
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - '*'
          - Action: ecr:*
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            NotAction: []
          - Effect: Allow
            NotResource: []
        Version: '2012-10-17'
      Users:
        - user1
    Type: AWS::IAM::ManagedPolicy
  policy1:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - '*'
          - Action: ecr:*
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            NotAction: []
          - Effect: Allow
            NotResource: []
        Version: '2012-10-17'
      PolicyName: policy1
      Users:
        - user1
    Type: AWS::IAM::Policy
  role1:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - '*'
          - Effect: Allow
            NotAction: []
          - Effect: Allow
            NotPrincipal: []
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ecr:*
                Effect: Allow
                Resource:
                  - '*'
              - Action: ecr:*
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                NotAction: []
              - Effect: Allow
                NotResource: []
            Version: '2012-10-17'
          PolicyName: policy1
    Type: AWS::IAM::Role
  secret1:
    Properties:
      GenerateSecretString:
        ExcludeCharacters: 01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
        ExcludeLowercase: 'true'
        ExcludeNumbers: 'true'
        ExcludePunctuation: 'true'
        ExcludeUppercase: 'true'
        PasswordLength: 10
        RequireEachIncludedType: 'false'
    Type: AWS::SecretsManager::Secret
  secret2:
    Type: AWS::SecretsManager::Secret
  securityGroup1:
    Properties:
      GroupDescription: groupDescription1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 1
          IpProtocol: '-1'
          ToPort: 65535
        - CidrIpv6: ::/0
          FromPort: 1
          IpProtocol: '-1'
          ToPort: 65535
        - CidrIp: 123.123.123.0/24
          FromPort: 22
          IpProtocol: '-1'
          ToPort: 22
        - CidrIpv6: 2001:db8:a0b:12f0::64/16
          FromPort: 22
          IpProtocol: '-1'
          ToPort: 22
    Type: AWS::EC2::SecurityGroup
  securityGroupEgress1:
    Properties:
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - securityGroup2
          - GroupId
      FromPort: 1
      GroupId:
        Ref: securityGroup1
      IpProtocol: '-1'
      ToPort: 65535
    Type: AWS::EC2::SecurityGroupEgress
  securityGroupIngress1:
    Properties:
      FromPort: 1
      GroupId:
        Fn::GetAtt:
          - securityGroup2
          - GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Fn::GetAtt:
          - securityGroup1
          - GroupId
      ToPort: 65535
    Type: AWS::EC2::SecurityGroupIngress
  user1:
    Properties:
      Policies:
        - Ref: policy1
    Type: AWS::IAM::User
