# -*- coding: utf-8 -*-

import os
import sys

# Garantizando version de scons
EnsureSConsVersion(2, 3)

# Construcción del entorno de construcción por defecto
env = Environment()

# Variables que se propagan del entorno exterior a todos los entornos
env['ENV']['FA_NOTRACK'] = 'true'
env['ENV']['PATH'] = os.environ['PATH']
env['ENV']['HOME'] = os.environ['HOME']
env['ENV']['CPUS'] = os.environ.get('CPUS', '')

for var in (
        'DOCKER_USER',
        'DOCKER_PASS',
        'WEBBOT_GMAIL_USER',
        'WEBBOT_GMAIL_PASS',
        'CI_COMMIT_REF_NAME',
        'AWS_ACCESS_KEY_ID',
        'AWS_SECRET_ACCESS_KEY',
	    'GOOGLE_APPLICATION_CREDENTIALS_CONTENT',
        'CODECOV_TOKEN',
        'KUBERNETES_API_SERVER',
        'KUBERNETES_API_TOKEN',
        'AZURE_SUBSCRIPTION_ID',
        'AZURE_CLIENT_ID',
        'AZURE_CLIENT_SECRET',
        'AZURE_TENANT_ID',):
    try:
        env['ENV'][var] = os.environ[var]
    except KeyError:
        print(var, 'env variable must be set')
        sys.exit(1)

# Variables que se propagan del entorno exterior en caso de existir
if 'VERBOSE' in os.environ:
    env['ENV']['VERBOSE'] = os.environ['VERBOSE']
if 'CIRCLECI' in os.environ:
    env['ENV']['CIRCLECI'] = os.environ['CIRCLECI']
if 'ASSERTS_MODULE' in os.environ:
    env['ENV']['ASSERTS_MODULE'] = os.environ['ASSERTS_MODULE']

#
# Variables que se definen aqui para todos los entornos
#

# no generar pyc pyo o directorio __pycache__
env['ENV']['PYTHONDONTWRITEBYTECODE'] = 1
# https://docs.python.org/3.1/library/warnings.html#the-warnings-filter
env['ENV']['PYTHONWARNINGS'] = 'ignore'

# ubicación del cache de cambio de archivos
env.SConsignFile('build/decider')

# Codigo fuente
source_files = Glob('#fluidasserts/*.py')
test_files = Glob('#test/*.py')
env.NoClean(source_files)

#
# Reglas
#

# Builder de ambiente virtual y depedencias
deps_needs = ['#conf/tox.ini']
deps_results = ['#build/virtual/log/tox-0.log']
deps_builder = Builder(action = 'tox -c conf/tox.ini --notest')
env.Append(BUILDERS = {'Deps' : deps_builder})
deps_run = env.Deps(target = deps_results, source = deps_needs)
env.Clean(deps_run, ['#build/virtual'])  # dir no en targets
env.Alias('deps', deps_results)

# Builder de distribución de fuente
sdist_needs = [source_files,
               'MANIFEST.in',
               '#setup.cfg',
               '#setup.py']
sdist_results = ['#build/dist/FLUIDAsserts-0.1.zip']
sdist_command = 'python3 setup.py sdist' # conf en setup.cfg
sdist_builder = Builder(action = sdist_command)
env.Append(BUILDERS = {'SDist' : sdist_builder})
sdist_run = env.SDist(target=sdist_results, source=sdist_needs)
env.Alias('sdist', sdist_results)

# Builder de distribución de binario
bdist_needs = source_files
bdist_results = ['#build/dist/FLUIDAsserts-0.1-py2.py3-none-any.whl',
                 '#build/dist/FLUIDAsserts-0.1-py2.7.egg']
bdist_command = 'python3 setup.py bdist_wheel bdist_egg'  # conf en setup.cfg
bdist_builder = Builder(action = bdist_command)
env.Append(BUILDERS = {'BDist' : bdist_builder})
bdist_run = env.BDist(target=bdist_results, source=bdist_needs)
env.Alias('bdist', bdist_results)


# Builder para pylint
pylint_results = ['#build/lint/pylint.txt']
env.Command(
    source=[source_files, test_files, '#conf/pylintrc'],
    action=['tox -c conf/tox.ini -e lint'],
    target=pylint_results,
)
env.Alias('pylint', pylint_results)

# Run codecov
codecov_results = ['#build/codecov/codecov.txt']
env.Command(
    source=[source_files],
    action=['tox -c conf/tox.ini -e codecov'],
    target=codecov_results,
)
env.Alias('codecov', codecov_results)

#
# Scripts Subordinados
#

# Phony Targets
SConscript('#conf/sconscript')

# Pruebas de unidad
SConscript('#test/sconscript', exports=['env', 'source_files', 'deps_results'])

#
# Alias Agrupadores
#
env.Alias('dist', [sdist_results,
                   bdist_results])
env.Alias('lint', [pylint_results])

# Solo construccion explicita
Default(None)
