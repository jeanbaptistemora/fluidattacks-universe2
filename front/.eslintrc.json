{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "fp",
    "prettier",
    "jest"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/all",
    "plugin:react/all",
    "plugin:jest/all",
    "plugin:fp/recommended",
    "plugin:prettier/recommended",
    "prettier/@typescript-eslint",
    "prettier/react"
  ],
  "rules": {
    "func-style": ["error", "declaration", { "allowArrowFunctions": true }],
    "line-comment-position": ["error", "above"],
    "multiline-comment-style": ["error", "starred-block"],
    "no-console": "error",
    "no-duplicate-imports": "error",
    "no-useless-rename": "error",
    "one-var": ["error", "never"],
    "require-unicode-regexp": "error",
    "sort-keys": "error",
    "sort-imports": [
      "error",
      {
        "memberSyntaxSortOrder": ["single", "all", "multiple", "none"]
      }
    ],
    "prettier/prettier": [
      "error",
      {},
      {
        "usePrettierrc": true
      }
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
        "allowTypedFunctionExpressions": false,
        "allowHigherOrderFunctions": false
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      }
    ],
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-magic-numbers": [
      "error",
      {
        "ignore": [0, 1, 2]
      }
    ],
    /*
     * Since we are working with external libraries that use any in there type
     * definitions. We need to disable the next rule, until they update to the
     * new unknown type.
     */
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/prefer-function-type": "off",
    "@typescript-eslint/typedef": [
      "error",
      {
        "variableDeclaration": true
      }
    ],
    "fp/no-mutation": [
      "error",
      {
        "commonjs": true
      }
    ],
    /*
     * Since we need side effects to make our program meaningful, for instace:
     * callbacks, DOM mutations, Node processes, etc. We need to disable the
     * next TWO rules, the result is: from now on it should be inferred that
     * any method call without an assignment, produce some kind of side effect.
     */
    "fp/no-unused-expression": "off",
    "fp/no-nil": "off",
    "jest/lowercase-name": [
      "error",
      {
        "ignoreTopLevelDescribe": true
      }
    ],
    /*
     * This rule has been deprecated in favor of jest/no-restricted-matchers.
     */
    "jest/no-truthy-falsy": "off",
    "jest/no-restricted-matchers": [
      "error",
      {
        "toBeTruthy": "Avoid `toBeTruthy`, use `toBe(true)` instead.",
        "toBeFalsy": "Avoid `toBeFalsy`, use `toBe(false)` instead."
      }
    ],
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [".tsx"]
      }
    ],
    "react/jsx-fragments": ["error", "element"],
    "react/jsx-boolean-value": ["error", "always"],
    "react/jsx-curly-brace-presence": ["error", "always"],
    "react/jsx-max-depth": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function"
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error"
  }
}
