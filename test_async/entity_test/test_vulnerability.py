from datetime import datetime
import json
import os
import pytest

from ariadne import graphql, graphql_sync
from django.test import TestCase
from django.test.client import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.core.files.uploadedfile import SimpleUploadedFile
from django.conf import settings
from jose import jwt
from backend.api.schema import SCHEMA
from backend.dal import finding as finding_dal
from backend.domain import vulnerability as vuln_domain
from backend.exceptions import VulnNotFound


class VulnerabilityTests(TestCase):

    async def _get_result_async(self, data, user=None):
        """Get result."""
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = user or 'integratesmanager@gmail.com'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': user or 'integratesmanager@gmail.com',
                'company': 'unittest',
                'first_name': 'unit',
                'last_name': 'test'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        _, result = await graphql(SCHEMA, data, context_value=request)
        return result

    async def test_approve_vulnerability(self):
        """Check for approveVulnerability mutation."""
        query = '''
            mutation {
                approveVulnerability(
                    findingId: "463461507",
                    approvalStatus: true,
                    uuid: "09afd608-aa53-4bbc-9094-0076181fa0ea"
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['approveVulnerability']
        finding = finding_dal.get_attributes('463461507', ['lastVulnerability'])
        today_date = str(datetime.today().strftime('%Y-%m-%d'))
        assert today_date == finding.get('lastVulnerability', '').split(' ')[0]

    async def test_delete_tags(self):
        """Check for deleteTags mutation."""
        query = '''
            mutation {
                deleteTags(
                    findingId: "463558592",
                    vulnerabilities: [
                        "0a848781-b6a4-422e-95fa-692151e6a98e",
                        "3bcdb384-5547-4170-a0b6-3b397a245465"
                    ]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteTags']
        assert result['data']['deleteTags']['success']

    async def test_update_treatment_vuln(self):
        """Check for updateTreatmentVuln mutation."""
        query = '''
            mutation {
                updateTreatmentVuln (
                    btsUrl: "https://www.google.com/",
                    findingId: "422286126",
                    treatment: "accepted",
                    acceptanceDate: ""
                    treatmentJustification:
                        "Will be solved the next sprint."
                    treatmentManager: "integratesuser@gmail.com"
                    vulnerabilities:
                        ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"]
                ){
                success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result_async(
            data, user='continuoushacking@gmail.com')
        assert 'errors' not in result
        assert 'success' in result['data']['updateTreatmentVuln']
        assert result['data']['updateTreatmentVuln']['success']

    async def test_request_verification(self):
        """Check for requestVerificationVuln mutation."""
        query = '''
            mutation {
                requestVerificationVuln(
                    findingId: "436992569",
                    justification: "this is a comenting test of a request verification in vulns",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62955"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['requestVerificationVuln']
        vulnerability = vuln_domain.get('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'
        vulnerability = vuln_domain.get('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'

    async def test_verify_requested_vulns(self):
        """Check for verifyRequestVuln mutation."""
        query = '''
            mutation {
                verifyRequestVuln(
                    findingId: "422286126",
                    justification: "Vuln verified",
                    openVulns: ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"],
                    closedVulns: []
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result_async(data)
        expected_error = 'Exception - Error verification not requested'
        assert 'errors' in result
        assert result['errors'][0]['message'] == expected_error

    async def test_remove_vulnerability(self):
        """Check for deleteVulnerability mutation."""
        query = '''
            mutation{
                deleteVulnerability (
                id: "a8c0ff07-bb21-4cd5-bb9f-4d716fc69320"
                findingId: "475041513"
                justification: REPORTING_ERROR
                ) {
                success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteVulnerability']
        with pytest.raises(VulnNotFound):
            assert vuln_domain.get(
                '475041513', 'a8c0ff07-bb21-4cd5-bb9f-4d716fc69320')

    async def test_upload_file(self):
        """Check for uploadFile mutation."""
        filename = os.path.dirname(os.path.abspath(__file__))
        filename = os.path.join(filename, '../../test/mock/test-vulns.yaml')
        with open(filename, 'rb') as test_file:
            uploaded_file = SimpleUploadedFile(name=test_file.name,
                                               content=test_file.read(),
                                               content_type='text/x-yaml')
            query = '''
                mutation UploadFileMutation(
                    $file: Upload!, $findingId: String!, $origin: String
                ) {
                    uploadFile (
                        file: $file,
                        findingId: $findingId
                        origin: $origin) {
                            success
                    }
                }
            '''
            variables = {
                'file': uploaded_file,
                'findingId': '463461507',
                'origin': 'pytest'
            }
        data = {'query': query, 'variables': variables}
        result = self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['uploadFile']
