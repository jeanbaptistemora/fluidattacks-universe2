from datetime import datetime
import json
import os
import pytest

from ariadne import graphql_sync
from django.test import TestCase
from django.test.client import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.conf import settings
from jose import jwt
from backend.api.schema import SCHEMA
from backend.dal import finding as finding_dal


class VulnerabilityTests(TestCase):

    def _get_result(self, data, user=None, user_role=None):
        """Get result."""
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = user or 'integratesmanager@gmail.com'
        request.session['company'] = 'unittest'
        request.session['role'] = user_role or 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': user or 'integratesmanager@gmail.com',
                'user_role': user_role or 'admin',
                'company': 'unittest',
                'first_name': 'unit',
                'last_name': 'test'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        _, result = graphql_sync(SCHEMA, data, context_value=request)
        return result

    def test_approve_vulnerability(self):
        """Check for approveVulnerability mutation."""
        query = '''
            mutation {
                approveVulnerability(
                    findingId: "463461507",
                    approvalStatus: true,
                    uuid: "09afd608-aa53-4bbc-9094-0076181fa0ea"
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result(data)
        assert 'errors' not in result
        assert 'success' in result['data']['approveVulnerability']
        finding = finding_dal.get_attributes('463461507', ['lastVulnerability'])
        today_date = str(datetime.today().strftime('%Y-%m-%d'))
        assert today_date == finding.get('lastVulnerability', '').split(' ')[0]

    def test_delete_tags(self):
        """Check for deleteTags mutation."""
        query = '''
            mutation {
                deleteTags(
                    findingId: "463558592",
                    vulnerabilities: [
                        "0a848781-b6a4-422e-95fa-692151e6a98e",
                        "3bcdb384-5547-4170-a0b6-3b397a245465"
                    ]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result(data)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteTags']
        assert result['data']['deleteTags']['success']

    def test_update_treatment_vuln(self):
        """Check for updateTreatmentVuln mutation."""
        query = '''
            mutation {
                updateTreatmentVuln (
                    btsUrl: "https://www.google.com/",
                    findingId: "422286126",
                    treatment: "accepted",
                    acceptanceDate: ""
                    treatmentJustification:
                        "Will be solved the next sprint."
                    treatmentManager: "integratesuser@gmail.com"
                    vulnerabilities:
                        ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"]
                ){
                success
                }
            }
        '''
        data = {'query': query}
        result = self._get_result(
            data, user='integratesuser@gmail.com', user_role='customer')
        assert 'errors' not in result
        assert 'success' in result['data']['updateTreatmentVuln']
        assert result['data']['updateTreatmentVuln']['success']
