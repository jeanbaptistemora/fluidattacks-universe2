import pytest
import pytz
import uuid
import yaml

from asgiref.sync import async_to_sync
from django.conf import settings
from django.contrib.sessions.middleware import SessionMiddleware
from django.test import TestCase
from django.test.client import RequestFactory
from graphql.type import GraphQLResolveInfo
from jose import jwt

from datetime import datetime
from backend.dal.finding import get_finding
from backend.dal.vulnerability import get_vulnerabilities
from backend.domain.vulnerability import (
    get_open_vuln_by_type, get_vulnerabilities_by_type, list_vulnerabilities,
    group_vulnerabilities, update_all_pending_vulns, update_vuln_state,
    reject_vulnerability, set_updated_manager_mail_content,
    approve_vulnerability, add_vulnerability_aux, set_treatment_manager,
    verify_vulnerabilities, update_last_vuln_date, validate_file_schema
)
from backend.exceptions import InvalidRange, InvalidSchema
from backend.utils.vulnerabilities import (
    as_range, get_ranges,
    ungroup_specific, is_range, is_sequence, range_to_list,
    format_vulnerabilities, get_specific,
    group_specific, sort_vulnerabilities
)

class VulnerabilityTests(TestCase):

    def test_ungroup_specific(self):
        specific = '13,14,18-20,24-30,40'
        test_data = ungroup_specific(specific)
        expected_output = [
            '13', '14', '18', '19', '20', '24', '25', '26', '27', '28', '29',
            '30', '40']
        assert isinstance(test_data, list)
        assert test_data == expected_output

    def test_is_range(self):
        range_value = '100-200'
        no_range_value = '20'
        assert is_range(range_value)
        assert not is_range(no_range_value)

    def test_is_sequence(self):
        secuence_value = '20,21,22'
        no_secuence_values = ['20-30', '20']
        assert is_sequence(secuence_value)
        for no_secuence_value in no_secuence_values:
            assert not is_sequence(no_secuence_value)

    def test_range_to_list(self):
        range_value = '10-15'
        bad_range_value = '13-12'
        test_data = range_to_list(range_value)
        expected_output = ['10', '11', '12', '13', '14', '15']
        assert isinstance(test_data, list)
        assert test_data == expected_output
        with pytest.raises(InvalidRange):
            assert range_to_list(bad_range_value)

    def test_sort_vulnerabilities(self):
        item_to_sort = [{'where': 'abaa'},
                        {'where': '1abc'},
                        {'where': 'aaaa'}]
        test_data = sort_vulnerabilities(item_to_sort)
        expected_output = [{'where': '1abc'},
                           {'where': 'aaaa'},
                           {'where': 'abaa'}]
        assert test_data == expected_output

    def test_group_specific(self):
        vuln_type = 'inputs'
        items_to_group = get_vulnerabilities('422286126')
        test_data = group_specific(items_to_group, vuln_type)
        assert isinstance(test_data, list)
        assert len(test_data) == 1
        assert isinstance(test_data[0], dict)
        assert test_data[0] is not None

    def test_get_specific(self):
        no_input_vuln_with_specific = {'specific': '10'}
        test_data = get_specific(no_input_vuln_with_specific)
        expected_output = 10
        assert test_data == expected_output

    def test_as_range(self):
        range_to_stringify = [1, 2, 3, 4, 5]
        test_data = as_range(range_to_stringify)
        expected_output = '1-5'
        assert test_data == expected_output

    def test_get_ranges(self):
        working_list = [1, 2, 3, 7, 9, 10, 11, 12, 13, 19]
        test_data = get_ranges(working_list)
        expected_output = '1-3,7,9-13,19'
        assert test_data == expected_output

    def test_get_open_vuln_by_type(self):
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        finding_id = '422286126'
        test_data = get_open_vuln_by_type(finding_id, request)
        expected_output = {
            'linesVulns': [],
            'inputsVulns': [
                {'specific': 'phone',
                 'where': 'https://example.com'}],
            'closedVulnerabilities': 0,
            'openVulnerabilities': 1, 'portsVulns': []}
        assert test_data == expected_output

    def test_get_vulnerabilities_by_type(self):
        finding_id = ('422286126')
        test_data = get_vulnerabilities_by_type(finding_id)
        expected_output = {
            'inputs': [
                {'url': 'https://example.com', 'field': 'phone',
                 'state': 'open'}],
            'lines': [], 'ports': []}
        assert test_data == expected_output

    def test_group_vulnerabilities(self):
        items_to_group = get_vulnerabilities('422286126')
        test_data = group_vulnerabilities(items_to_group)
        expected_output = [
           {'specific': 'phone', 'vuln_type': 'inputs',
            'finding_id': '422286126',
            'UUID': '80d6a69f-a376-46be-98cd-2fdedcffdcc0',
            'historic_state': [
                {'date': '2018-09-28 10:32:58', 'state': 'open', 'analyst':'test@unittesting.com'},
                {'date': '2019-01-08 16:01:26', 'state': 'open',  'analyst':'test@unittesting.com'}],
            'where': 'https://example.com'}]
        assert test_data == expected_output

    def test_format_vulnerabilities(self):
        finding_id = ('422286126')
        testable_vulnerability = get_vulnerabilities(finding_id)
        test_data = format_vulnerabilities(testable_vulnerability)
        expected_output = {
            'inputs': [
                {'url': 'https://example.com',
                 'field': 'phone', 'state': 'open'}],
            'lines': [], 'ports': []}
        assert test_data == expected_output

    def test_list_vulnerabilities(self):
        finding_ids = ['436992569', '422286126', '560175507']
        test_data = list_vulnerabilities(finding_ids)
        assert isinstance(test_data, list)
        assert len(test_data) == 30
        assert isinstance(test_data[0], dict)
        assert test_data[0] is not None

    @pytest.mark.changes_db
    def test_update_all_pending_vulns(self):
        finding_id = '463461507'
        approval_status = True
        test_data = async_to_sync(update_all_pending_vulns)(finding_id, approval_status)
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_update_vuln_state(self):
        finding_id = '463461507'
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest@fluidattacks.com',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
        vuln = get_vulnerabilities(finding_id)[-1]
        now = datetime.now()
        date = now.strftime('%Y-%m-%d %H:%M:%S')
        test_data = update_vuln_state(info, [vuln], {'state': 'closed'}, finding_id, date)
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_update_last_vuln_date(self):
        finding_id = '436992569'
        assert update_last_vuln_date(finding_id) == True

    @pytest.mark.changes_db
    def test_approve_vulnerability(self):
        finding_id = '463461507'
        vuln = get_vulnerabilities(finding_id)[-1]
        historic_state = vuln.get('historic_state')
        last_state = historic_state[-1]
        test_data = approve_vulnerability(finding_id, historic_state, last_state, [vuln])
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_reject_vulnerability(self):
        finding_id = '463461507'
        vuln_id = '09afd608-aa53-4bbc-9094-0076181fa0ea'
        vuln = get_vulnerabilities(finding_id)[-1]
        historic_state = vuln.get('historic_state')
        test_data = reject_vulnerability(finding_id, historic_state, [vuln], vuln_id)
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_set_updated_manager_mail_content(self):
        finding_id = '422286126'
        items_to_group = get_vulnerabilities(finding_id)
        vulns_grouped = group_vulnerabilities(items_to_group)
        vulns_data = format_vulnerabilities(vulns_grouped)
        test_data = set_updated_manager_mail_content(vulns_data)
        expected_output = '- https://example.com (phone)<br />'
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_add_vulnerability_aux(self):
        finding_id = '436992569'
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest@fluidattacks.com',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
        vuln = 'ports'
        specific = '4444'
        data = {
            'where': '192.168.100.107',
            'state': 'open',
            'origin': 'api'
        }
        test_data = add_vulnerability_aux(vuln, specific, data, finding_id, info)
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    @pytest.mark.changes_db
    def test_set_treatment_manager(self):
        finding_id = '463461507'
        finding = get_finding(finding_id)
        test_user = 'integratesuser@gmail.com'
        test_treatment_manager = 'testmanager@unittesting.com'
        treatment_manager = set_treatment_manager(
            'ACCEPTED', test_treatment_manager, finding, False, test_user)
        expected_output = 'integratesuser@gmail.com'
        assert treatment_manager == expected_output
        finding.get('historic_treatment')[-1]['acceptance_status'] = 'SUBMITTED'
        treatment_manager = set_treatment_manager(
            'ACCEPTED_UNDEFINED', test_treatment_manager, finding, False, test_user)
        assert treatment_manager == expected_output
        treatment_manager = set_treatment_manager(
            'IN PROGRESS', test_treatment_manager, finding, False, test_user)
        assert treatment_manager == expected_output

    @pytest.mark.changes_db
    def test_verify_vulnerabilities(self):
        finding_id = '436992569'
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest@fluidattacks.com',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        info = GraphQLResolveInfo(None, None, None, None, None, None, None, None, None, None, request)
        user_email = 'unittest@fluidattacks.com'
        user_fullname = 'Miguel de Orellana'
        parameters = {
            'justification': 'Vuln verified',
            'open_vulns': ['587c40de-09a0-4d85-a9f9-eaa46aa895d7'],
            'closed_vulns': []
        }
        test_data = verify_vulnerabilities(finding_id, user_email, user_fullname, info, parameters)
        expected_output = True
        assert isinstance(test_data, bool)
        assert test_data == expected_output

    def test_validate_file_schema_invalid(self):
        finding_id = '463461507'
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest@fluidattacks.com',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
        file_url = f'/tmp/vulnerabilities-{uuid.uuid4()}-{finding_id}.yaml'
        with open(file_url, 'w') as stream:
            yaml.safe_dump('', stream)
        with self.assertRaises(InvalidSchema) as context:
            validate_file_schema(file_url, info)
        self.assertTrue('Exception - Invalid Schema' in str(context.exception))
