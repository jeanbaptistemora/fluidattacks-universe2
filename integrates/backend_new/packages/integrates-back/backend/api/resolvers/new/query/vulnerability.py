# Standard
# None

# Third party
from aiodataloader import DataLoader
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    rename_kwargs,
    require_integrates,
    require_login
)
from backend.typing import Vulnerability


@rename_kwargs({'uuid': 'vuln_uuid'})
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates
)
@rename_kwargs({'vuln_uuid': 'uuid'})
async def resolve(
    _parent: None,
    info: GraphQLResolveInfo,
    **kwargs: str
) -> Vulnerability:
    uuid: str = kwargs['uuid']

    vuln_loader: DataLoader = info.context.loaders['vulnerability']
    vuln: Vulnerability = await vuln_loader.load(uuid)

    return vuln
