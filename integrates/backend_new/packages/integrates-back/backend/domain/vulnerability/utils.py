# Standard library
from typing import (
    Dict,
    List,
    cast,
)

# Local
from backend import authz
from backend.exceptions import (
    AcceptionNotRequested,
    InvalidTreatmentManager,
    VulnNotInFinding,
)
from backend.typing import (
    Finding,
    Historic,
)


def validate_vulns_in_finding(
    finding_id: str,
    vulns: List[Dict[str, Finding]]
) -> None:
    for vuln in vulns:
        if vuln.get('finding_id', '') != finding_id:
            raise VulnNotInFinding()


def validate_acceptation(vuln: Dict[str, Finding]) -> Dict[str, Finding]:
    historic_treatment = cast(
        Historic,
        vuln.get('historic_treatment', [{}])
    )
    if historic_treatment[-1].get('acceptance_status') != 'SUBMITTED':
        raise AcceptionNotRequested()
    return vuln


async def validate_treatment_manager(
    *,
    treatment_manager: str,
    is_customer_admin: bool,
    user_email: str,
    group_name: str,
) -> str:
    if not is_customer_admin:
        treatment_manager = user_email
    enforcer = await authz.get_group_level_enforcer(treatment_manager)

    if not enforcer(group_name, 'valid_treatment_manager'):
        raise InvalidTreatmentManager()

    return treatment_manager
