from datetime import datetime, timedelta
import pytest
import pytz
import uuid
import yaml

from asgiref.sync import async_to_sync
from django.conf import settings
from django.contrib.sessions.middleware import SessionMiddleware
from django.test.client import RequestFactory
from graphql.type import GraphQLResolveInfo
from jose import jwt

from datetime import datetime, timedelta
from backend import util
from backend.dal.finding import get_finding
from backend.domain.vulnerability import (
    get_open_vuln_by_type, get_vulnerabilities_by_type, get_vulnerabilities_file,
    list_vulnerabilities_async, group_vulnerabilities,
    update_vuln_state, set_updated_manager_mail_content,
    ungroup_vulnerability_specific, get,
    get_by_finding,
    verify_vulnerabilities, update_last_vuln_date, validate_file_schema
)
from backend.exceptions import InvalidRange, InvalidSchema
from backend.utils.vulnerabilities import (
    as_range, get_ranges,
    ungroup_specific, is_range, is_sequence, range_to_list,
    format_vulnerabilities, get_specific,
    group_specific, sort_vulnerabilities
)

from backend_new import settings

from test_async.utils import create_dummy_session

pytestmark = [
    pytest.mark.asyncio,
]

TZN = pytz.timezone(settings.TIME_ZONE)


def test_ungroup_specific():
    specific = '13,14,18-20,24-30,40'
    test_data = ungroup_specific(specific)
    expected_output = [
        '13', '14', '18', '19', '20', '24', '25', '26', '27', '28', '29',
        '30', '40']
    assert isinstance(test_data, list)
    assert test_data == expected_output

def test_is_range():
    range_value = '100-200'
    no_range_value = '20'
    assert is_range(range_value)
    assert not is_range(no_range_value)

def test_is_sequence():
    secuence_value = '20,21,22'
    no_secuence_values = ['20-30', '20']
    assert is_sequence(secuence_value)
    for no_secuence_value in no_secuence_values:
        assert not is_sequence(no_secuence_value)

def test_range_to_list():
    range_value = '10-15'
    bad_range_value = '13-12'
    test_data = range_to_list(range_value)
    expected_output = ['10', '11', '12', '13', '14', '15']
    assert isinstance(test_data, list)
    assert test_data == expected_output
    with pytest.raises(InvalidRange):
        assert range_to_list(bad_range_value)

def test_sort_vulnerabilities():
    item_to_sort = [{'where': 'abaa'},
                    {'where': '1abc'},
                    {'where': 'aaaa'}]
    test_data = sort_vulnerabilities(item_to_sort)
    expected_output = [{'where': '1abc'},
                        {'where': 'aaaa'},
                        {'where': 'abaa'}]
    assert test_data == expected_output

async def test_group_specific():
    vuln_type = 'inputs'
    items_to_group = await list_vulnerabilities_async(
        ['422286126'],
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    test_data = group_specific(items_to_group, vuln_type)
    assert isinstance(test_data, list)
    assert len(test_data) == 2
    assert isinstance(test_data[0], dict)
    assert test_data[0] is not None

def test_get_specific():
    no_input_vuln_with_specific = {'specific': '10'}
    test_data = get_specific(no_input_vuln_with_specific)
    expected_output = 10
    assert test_data == expected_output

def test_as_range():
    range_to_stringify = [1, 2, 3, 4, 5]
    test_data = as_range(range_to_stringify)
    expected_output = '1-5'
    assert test_data == expected_output

def test_get_ranges():
    working_list = [1, 2, 3, 7, 9, 10, 11, 12, 13, 19]
    test_data = get_ranges(working_list)
    expected_output = '1-3,7,9-13,19'
    assert test_data == expected_output

async def test_get_open_vuln_by_type():
    request = await create_dummy_session('unittest@fluidattacks.com')
    finding_id = '422286126'
    test_data = await get_open_vuln_by_type(finding_id, request)
    expected_output = {
        'linesVulns': [
            {
                'specific': '12',
                'where': 'test/data/lib_path/f060/csharp.cs'
            }
        ],
        'inputsVulns': [],
        'closedVulnerabilities': 0,
        'openVulnerabilities': 1,
        'portsVulns': []
    }
    assert test_data == expected_output

async def test_get_vulnerabilities_by_type():
    finding_id = ('422286126')
    test_data = await get_vulnerabilities_by_type(finding_id)
    expected_output = {
        'inputs': [],
        'lines': [
            {
                'line': '12',
                'path': 'test/data/lib_path/f060/csharp.cs',
                'state': 'open'
            }
        ], 'ports': []}
    assert test_data == expected_output

async def test_group_vulnerabilities():
    items_to_group = await list_vulnerabilities_async(
        ['422286126'],
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    test_data = group_vulnerabilities(items_to_group)
    expected_output = [
        {'UUID': '0a848781-b6a4-422e-95fa-692151e6a98z',
            'finding_id': '422286126',
            'historic_state': [{'analyst': 'unittest@fluidattacks.com',
                    'date': '2020-09-09 10:43:39',
                    'state': 'open'}],
            'specific': '12',
            'vuln_type': 'lines',
            'where': 'test/data/lib_path/f060/csharp.cs'},
        {'specific': 'phone', 'vuln_type': 'inputs',
        'finding_id': '422286126',
        'UUID': '80d6a69f-a376-46be-98cd-2fdedcffdcc0',
        'historic_state': [
            {'date': '2018-09-28 10:32:58', 'state': 'open', 'analyst':'test@unittesting.com'},
            {'date': '2020-09-09 16:01:26', 'state': 'open',  'analyst':'test@unittesting.com'}],
        'where': 'https://example.com'},
    ]
    assert test_data == expected_output

async def test_format_vulnerabilities():
    finding_id = ('422286126')
    testable_vulnerability = await list_vulnerabilities_async(
        [finding_id],
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    test_data = format_vulnerabilities(testable_vulnerability)
    expected_output = {
        'inputs': [
            {'url': 'https://example.com',
                'field': 'phone', 'state': 'open'}],
        'lines': [
            {
                'line': '12',
                'path': 'test/data/lib_path/f060/csharp.cs',
                'state': 'open'
            }
        ], 'ports': []}
    assert test_data == expected_output

async def test_list_vulnerabilities():
    finding_ids = ['436992569', '422286126', '560175507']
    test_data_delete_listed = await list_vulnerabilities_async(
        finding_ids,
        should_list_deleted=True,
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    test_data = await list_vulnerabilities_async(
        finding_ids,
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    assert isinstance(test_data, list)
    assert len(test_data_delete_listed) == 31
    assert len(test_data) == 30
    assert isinstance(test_data[0], dict)
    assert test_data[0] is not None

@pytest.mark.changes_db
async def test_update_vuln_state():
    finding_id = '463461507'
    request = await create_dummy_session('unittest@fluidattacks.com')
    info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
    vuln = await get('e248e8e0-0323-41c7-bc02-4ee61d09f9c4')
    now = datetime.now()
    date = now.strftime('%Y-%m-%d %H:%M:%S')
    test_data = await update_vuln_state(info, vuln, {'state': 'closed'}, finding_id, date)
    expected_output = True
    assert isinstance(test_data, bool)
    assert test_data == expected_output

@pytest.mark.changes_db
async def test_update_last_vuln_date():
    finding_id = '475041513'
    vuln_uuid = '5c689459-64c2-4687-9fef-e5f2dd3c710c'
    request = await create_dummy_session('unittest@fluidattacks.com')
    info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
    vuln = await get(vuln_uuid)
    date = datetime.now(tz=TZN).strftime('%Y-%m-%d %H:%M:%S')
    test_data = await update_vuln_state(info, vuln, {'state': 'open'}, finding_id, date)
    assert test_data and await update_last_vuln_date(finding_id) == True

@pytest.mark.changes_db
async def test_set_updated_manager_mail_content():
    finding_id = '422286126'
    items_to_group = await list_vulnerabilities_async(
        [finding_id],
        include_confirmed_zero_risk=True,
        include_requested_zero_risk=True
    )
    vulns_grouped = group_vulnerabilities(items_to_group)
    vulns_data = format_vulnerabilities(vulns_grouped)
    test_data = set_updated_manager_mail_content(vulns_data)
    expected_output = '- test/data/lib_path/f060/csharp.cs (12)<br />- https://example.com (phone)<br />'
    assert test_data == expected_output

def test_ungroup_vulnerability_specific():
    vuln = 'ports'
    specific = '4444'
    data = {
        'where': '192.168.100.107',
        'state': 'open',
        'origin': 'api'
    }
    test_data = ungroup_vulnerability_specific(vuln, specific, data)
    expected_output = [{**data, 'specific': '4444'}]
    assert isinstance(test_data, list)
    assert test_data == expected_output

@pytest.mark.changes_db
async def test_verify_vulnerabilities():
    finding_id = '436992569'
    request = await create_dummy_session('unittest@fluidattacks.com')
    info = GraphQLResolveInfo(None, None, None, None, None, None, None, None, None, None, request)
    user_email = 'unittest@fluidattacks.com'
    user_fullname = 'Miguel de Orellana'
    parameters = {
        'justification': 'Vuln verified',
        'open_vulns': ['587c40de-09a0-4d85-a9f9-eaa46aa895d7'],
        'closed_vulns': []
    }
    test_data = await verify_vulnerabilities(
        finding_id, user_email, user_fullname, info, parameters)
    expected_output = True
    assert isinstance(test_data, bool)
    assert test_data == expected_output

async def test_validate_file_schema_invalid():
    finding_id = '463461507'
    request = await create_dummy_session('unittest@fluidattacks.com')
    info = GraphQLResolveInfo(None , None, None, None, None, None, None, None, None, None, request)
    file_url = f'/tmp/vulnerabilities-{uuid.uuid4()}-{finding_id}.yaml'
    with open(file_url, 'w') as stream:
        yaml.safe_dump('', stream)
    with pytest.raises(InvalidSchema) as context:
        await validate_file_schema(file_url, info)

async def test_get_vulnerabilities_file():
    finding_id = '988493279'
    project_name = 'unittesting'
    assert f'files.fluidattacks.com/{project_name}-{finding_id}' \
        in await get_vulnerabilities_file(finding_id, project_name)

async def test_getters():
    vuln_uuid = 'e248e8e0-0323-41c7-bc02-4ee61d09f9c4'
    finding_id = '463461507'
    vulnerability = await get(vuln_uuid)
    vulnerability_by_finding = await get_by_finding(
        finding_id,
        vuln_uuid
    )
    expected_output = {
        'finding_id': finding_id,
        'where': '192.168.1.18',
        'historic_state': [{
            'date': '2019-09-12 08:45:48',
            'analyst': 'unittest@fluidattacks.com',
            'state': 'open'
        }],
        'historic_treatment': [{
            'acceptance_date': '2021-01-16 12:46:10',
            'date': '2020-11-13 12:46:10',
            'justification': 'accepted justification',
            'treatment': 'ACCEPTED',
            'user': 'integratesuser@gmail.com'}],
        'UUID': vuln_uuid,
        'specific': '7777',
        'vuln_type': 'ports'
    }
    assert vulnerability == expected_output
    assert vulnerability_by_finding == vulnerability
