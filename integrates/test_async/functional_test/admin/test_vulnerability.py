from datetime import date
import os
import pytest

from django.test import TestCase
from django.core.files.uploadedfile import SimpleUploadedFile

from test_async.functional_test.admin.utils import get_result

pytestmark = pytest.mark.asyncio


class VulnerabilityTests(TestCase):

    async def test_vulnerability(self):
        finding_id = '463558592'
        filename = os.path.dirname(os.path.abspath(__file__))
        filename = os.path.join(filename, '../../mock/test-vulns.yaml')
        with open(filename, 'rb') as test_file:
            uploaded_file = SimpleUploadedFile(name=test_file.name,
                                               content=test_file.read(),
                                               content_type='text/x-yaml')
            query = '''
                mutation UploadFileMutation(
                    $file: Upload!, $findingId: String!
                ) {
                    uploadFile (
                        file: $file,
                        findingId: $findingId
                    ) {
                        success
                    }
                }
            '''
            variables = {
                'file': uploaded_file,
                'findingId': finding_id,
            }
        data = {'query': query, 'variables': variables}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['uploadFile']['success']
        query = f'''
            query {{
                finding(identifier: "{finding_id}"){{
                    vulnerabilities{{
                        id
                        where
                    }}
                    openVulnerabilities
                    closedVulnerabilities
                }}
           }}
        '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['finding']['openVulnerabilities'] == 3
        assert result['data']['finding']['closedVulnerabilities'] == 4
        vulns = result['data']['finding']['vulnerabilities']
        vuln_uuid = [x for x in vulns if x['where'] == 'https://example.com'][0]['id']
        query = f'''
            mutation {{
                requestVerificationVuln(
                    findingId: "{finding_id}",
                    justification: "this is a comenting test of a request verification in vulns",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['requestVerificationVuln']['success']
        query = f'''
            mutation {{
                verifyRequestVuln(
                    findingId: "{finding_id}",
                    justification: "Vuln verified",
                    openVulns: ["{vuln_uuid}"],
                    closedVulns: []
                ) {{
                    success
                }}
            }}
        '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['verifyRequestVuln']['success']
        query = f'''
            mutation {{
                downloadVulnFile (findingId: "{finding_id}") {{
                    url
                    success
                }}
            }}
        '''
        project_name = 'unittesting'
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['downloadVulnFile']['success']
        assert 'url' in result['data']['downloadVulnFile']
        assert f'files.fluidattacks.com/{project_name}-{finding_id}' \
            in result['data']['downloadVulnFile']['url']
        expected_output = {
            'finding_id': '463558592',
            'UUID': vuln_uuid,
            'vuln_type': 'inputs',
            'specific': 'phone',
            'where': 'https://example.com',
            'historic_state': [{
                'date': date.today().isoformat(),
                'analyst': 'integratesmanager@gmail.com',
                'state': 'open',
            }],
            'historic_verification': [
                {
                    'date': date.today().isoformat(),
                    'status': 'REQUESTED'
                },
                {
                    'date': date.today().isoformat(),
                    'status': 'VERIFIED'
                }
            ],
            'analyst': 'integratesmanager@gmail.com',
            'last_analyst': 'integratesmanager@gmail.com',
        }
        query = f'''
            query {{
                vulnerability(uuid: "{vuln_uuid}") {{
                    findingId
                    id
                    vulnType
                    specific
                    where
                    historicState
                    historicVerification{{
                        date
                        status
                    }}
                    analyst
                    lastAnalyst
                }}
            }}
        '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['vulnerability']['findingId'] == expected_output.get('finding_id')
        assert result['data']['vulnerability']['where'] == expected_output.get('where')
        result['data']['vulnerability']['historicState'][0]['date'] = (
            result['data']['vulnerability']['historicState'][0]['date'][:-9]
        )
        assert result['data']['vulnerability']['historicState'] == expected_output.get('historic_state')
        assert result['data']['vulnerability']['id'] == expected_output.get('UUID')
        assert result['data']['vulnerability']['specific'] == expected_output.get('specific')
        assert result['data']['vulnerability']['vulnType'] == expected_output.get('vuln_type')
        result['data']['vulnerability']['historicVerification'][0]['date'] = (
            result['data']['vulnerability']['historicVerification'][0]['date'][:-9]
        )
        result['data']['vulnerability']['historicVerification'][1]['date'] = (
            result['data']['vulnerability']['historicVerification'][1]['date'][:-9]
        )
        assert result['data']['vulnerability']['historicVerification'] == expected_output.get('historic_verification')
        assert result['data']['vulnerability']['analyst'] == expected_output.get('analyst')
        assert result['data']['vulnerability']['lastAnalyst'] == expected_output.get('last_analyst')
        query = f'''
            mutation {{
                deleteVulnerability (
                id: "{vuln_uuid}"
                findingId: "{finding_id}"
                justification: REPORTING_ERROR
                ) {{
                success
                }}
            }}
        '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['deleteVulnerability']
        query = f'''
            query {{
                finding(identifier: "{finding_id}"){{
                    vulnerabilities{{
                        id
                        where
                    }}
                    openVulnerabilities
                    closedVulnerabilities
                }}
            }}
       '''
        data = {'query': query}
        result = await get_result(data)
        assert 'errors' not in result
        assert result['data']['finding']['openVulnerabilities'] == 2
        assert result['data']['finding']['closedVulnerabilities'] == 4
        vulns = result['data']['finding']['vulnerabilities']
        assert [] == [x for x in vulns if x['id'] == vuln_uuid]
