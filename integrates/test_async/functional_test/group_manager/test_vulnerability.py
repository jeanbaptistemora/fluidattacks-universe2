import pytest

from backend.utils import datetime as datetime_utils
from test_async.functional_test.group_manager.utils import get_result

pytestmark = pytest.mark.asyncio


async def test_vulnerability():
    today = datetime_utils.get_as_str(
        datetime_utils.get_now(),
        date_format='%Y-%m-%d'
    )
    finding_id = '463558592'
    vuln_uuid = '54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6'
    query = f'''
        mutation {{
            updateTreatmentVuln (
                findingId: "{finding_id}",
                tag: "test1, test2",
                vulnerabilityId: "{vuln_uuid}"
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['updateTreatmentVuln']
    assert result['data']['updateTreatmentVuln']['success']

    expected_output = {
        'finding_id': finding_id,
        'UUID': vuln_uuid,  
        'vuln_type': 'lines',
        'specific': '564',
        'where': 'path/to/file4.ext',
        'historic_state': [
            {
                'date': '2019-01-16 08:47:07',
                'analyst': 'unittest@fluidattacks.com',
                'state': 'open'
            }
        ],
        'analyst': 'unittest@fluidattacks.com',
        'source': 'integrates',
        'current_state': 'open',
        'current_approval_status': '',
        'severity': '',
        'tag': 'test_two, test1, test2',
        'tags': ['test_two', 'test1', 'test2'],
        'remediated': True,
        'verification': 'Requested'
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                findingId
                id
                vulnType
                specific
                where
                historicState
                analyst
                source
                currentState
                currentApprovalStatus
                severity
                tag
                tags
                remediated
                verification
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['vulnerability']['findingId'] == expected_output.get('finding_id')
    assert result['data']['vulnerability']['where'] == expected_output.get('where')
    assert result['data']['vulnerability']['historicState'] == expected_output.get('historic_state')
    assert result['data']['vulnerability']['id'] == expected_output.get('UUID')
    assert result['data']['vulnerability']['specific'] == expected_output.get('specific')
    assert result['data']['vulnerability']['vulnType'] == expected_output.get('vuln_type')
    assert result['data']['vulnerability']['analyst'] == expected_output.get('analyst')
    assert result['data']['vulnerability']['source'] == expected_output.get('source')
    assert result['data']['vulnerability']['currentState'] == expected_output.get('current_state')
    assert result['data']['vulnerability']['currentApprovalStatus'] == expected_output.get('current_approval_status')
    assert result['data']['vulnerability']['severity'] == expected_output.get('severity')
    assert result['data']['vulnerability']['tag'] == expected_output.get('tag')
    assert result['data']['vulnerability']['tags'] == expected_output.get('tags')
    assert result['data']['vulnerability']['remediated'] == expected_output.get('remediated')
    assert result['data']['vulnerability']['verification'] == expected_output.get('verification')

    query = f'''
        mutation {{
            deleteTags(
                findingId: "{finding_id}",
                vulnerabilities: ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['deleteTags']
    assert result['data']['deleteTags']['success']

    query = f'''
        mutation {{
            requestVerificationVuln(
                findingId: "{finding_id}",
                justification: "this is a comenting test of a request verification in vulns",
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' in result
    assert result['errors'][0]['message'] == 'Exception - Request verification already requested'

    query = f'''
        mutation {{
            updateTreatmentVuln (
                findingId: "{finding_id}",
                tag: "test_two",
                vulnerabilityId: "{vuln_uuid}"
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['updateTreatmentVuln']
    assert result['data']['updateTreatmentVuln']['success']

    query = f'''
            mutation {{
                requestZeroRiskVuln(
                    findingId: "{finding_id}",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' in result
    assert result['errors'][0]['message'] == 'Exception - Zero risk vulnerability is already requested'

    query = f'''
        mutation {{
            handleVulnsAcceptation(
                acceptedVulns:
                    ["{vuln_uuid}"]
                findingId: "{finding_id}",
                justification: "test of handle vulns justification",
                rejectedVulns: []
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['handleVulnsAcceptation']['success']

    expected_output = {
        'historic_treatment': [
            {
                'acceptanceStatus': 'APPROVED',
                'treatmentManager': 'integratesuser@gmail.com',
                'treatment': 'ACCEPTED_UNDEFINED',
                'justification': 'test of handle vulns justification',
                'user': 'unittest2@fluidattacks.com',
            }
        ],
        'historic_verification': [
            {
                'date': today,
                'status': 'REQUESTED'
            }
        ],
        'historic_zero_risk': [
            {
                'date': '2018-09-28 10:32:58',
                'status': 'REQUESTED'
            }
        ],
        'tag': 'test_two',
        'tags': ['test_two'],
        'zero_risk': 'Requested',
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                historicTreatment {{
                    acceptanceStatus
                    treatmentManager
                    treatment
                    justification
                    user
                }}
                historicVerification{{
                    date
                    status
                }}
                historicZeroRisk {{
                    date
                    status
                }}
                tag
                tags
                zeroRisk
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, 'integratesmanager@gmail.com')
    assert 'errors' not in result
    result['data']['vulnerability']['historicVerification'][0]['date'] = (
        result['data']['vulnerability']['historicVerification'][0]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicVerification'] == expected_output.get('historic_verification')
    assert result['data']['vulnerability']['historicZeroRisk'] == expected_output.get('historic_zero_risk')
    assert result['data']['vulnerability']['tag'] == expected_output.get('tag')
    assert result['data']['vulnerability']['tags'] == expected_output.get('tags')
    assert result['data']['vulnerability']['zeroRisk'] == expected_output.get('zero_risk')
    assert result['data']['vulnerability']['historicTreatment'][-1]['acceptanceStatus'] == (
        expected_output['historic_treatment'][-1]['acceptanceStatus']
    )
    assert result['data']['vulnerability']['historicTreatment'][-1]['treatmentManager'] == (
        expected_output['historic_treatment'][-1]['treatmentManager']
    )
    assert result['data']['vulnerability']['historicTreatment'][-1]['treatment'] == (
        expected_output['historic_treatment'][-1]['treatment']
    )
    assert result['data']['vulnerability']['historicTreatment'][-1]['justification'] == (
        expected_output['historic_treatment'][-1]['justification']
    )
    assert result['data']['vulnerability']['historicTreatment'][-1]['user'] == (
        expected_output['historic_treatment'][-1]['user']
    )
