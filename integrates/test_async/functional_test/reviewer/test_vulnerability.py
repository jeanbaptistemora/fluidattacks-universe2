import os
import pytest

from starlette.datastructures import UploadFile

from backend.utils import datetime as datetime_utils
from test_async.functional_test.reviewer.utils import get_result

pytestmark = pytest.mark.asyncio


async def test_vulnerability():
    today = datetime_utils.get_as_str(
        datetime_utils.get_now(),
        date_format='%Y-%m-%d'
    )
    cwe = '200'
    description = 'This is pytest created draft'
    group_name = 'unittesting'
    recommendation = 'Solve this finding'
    requirements = 'REQ.0001. Apply filters'
    risk = 'This is pytest created draft'
    threat = 'Attacker'
    title = 'FIN.S.0001. Very serious vulnerability'
    draft_type = 'SECURITY'
    query = f'''
        mutation {{
            createDraft(
                cwe: "{cwe}",
                description: "{description}",
                projectName: "{group_name}",
                recommendation: "{recommendation}",
                requirements: "{requirements}",
                risk: "{risk}",
                threat: "{threat}",
                title: "{title}",
                type: {draft_type}
            ) {{
                success
            }}
        }}

    '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratesanalyst@fluidattacks.com')
    assert 'errors' not in result
    assert 'success' in result['data']['createDraft']
    assert result['data']['createDraft']['success']

    query = f'''
        query {{
            project(projectName: "{group_name}"){{
                drafts {{
                    id
                    title
                }}
                stakeholders {{
                    email
                    firstLogin
                    lastLogin
                    phoneNumber
                    responsibility
                    role
                }}
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    draft = [draft for draft in result['data']['project']['drafts'] if draft['title'] == title][0]
    draft_id = draft['id']

    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, '../../mock/test-vulns.yaml')
    with open(filename, 'rb') as test_file:
        uploaded_file = UploadFile(test_file.name, test_file, 'text/x-yaml')
        query = '''
            mutation UploadFileMutation(
                $file: Upload!, $findingId: String!
            ) {
                uploadFile (
                    file: $file,
                    findingId: $findingId
                ) {
                    success
                }
            }
        '''
        variables = {
            'file': uploaded_file,
            'findingId': draft_id,
        }
        data = {'query': query, 'variables': variables}
        result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['uploadFile']['success']

    query = f'''
        mutation {{
            updateSeverity (
            findingId: "{draft_id}",
            data: {{
                attackComplexity: 0.77, attackVector: 0.62,
                availabilityImpact: "0", availabilityRequirement: "1",
                confidentialityImpact: "0", confidentialityRequirement: "1",
                cvssVersion: "3.1", exploitability: 0.91, id: "{draft_id}",
                integrityImpact: "0.22", integrityRequirement: "1",
                modifiedAttackComplexity: 0.77, modifiedAttackVector: 0.62,
                modifiedAvailabilityImpact: "0",
                modifiedConfidentialityImpact: "0",
                modifiedIntegrityImpact: "0.22",
                modifiedPrivilegesRequired: "0.62",
                modifiedSeverityScope: 0, modifiedUserInteraction: 0.85,
                privilegesRequired: "0.62", remediationLevel: "0.97",
                reportConfidence: "0.92",
                severity: "2.9", severityScope: 0, userInteraction: 0.85
            }}
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratesanalyst@fluidattacks.com')
    assert 'errors' not in result
    assert 'success' in result['data']['updateSeverity']
    assert result['data']['updateSeverity']['success']

    query = '''
        mutation UpdateEvidenceMutation(
            $evidenceId: EvidenceType!, $file: Upload!, $findingId: String!
        ) {
            updateEvidence(
                evidenceId: $evidenceId, file: $file, findingId: $findingId
            ) {
                success
            }
        }
    '''
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, '../../mock/test-anim.gif')
    with open(filename, 'rb') as test_file:
        uploaded_file = UploadFile(test_file.name, test_file, 'image/gif')
        variables = {
            'evidenceId': 'ANIMATION',
            'findingId': draft_id,
            'file': uploaded_file
        }
        data = {'query': query, 'variables': variables}
        result = await get_result(data, stakeholder='integratesanalyst@fluidattacks.com')
        assert 'errors' not in result
        assert 'success' in result['data']['updateEvidence']
        assert result['data']['updateEvidence']['success']

    query = f'''
        mutation {{
            submitDraft(findingId: "{draft_id}") {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratesanalyst@fluidattacks.com')
    assert 'errors' not in result
    assert result['data']['submitDraft']['success']

    query = f'''
        mutation {{
            approveDraft(draftId: "{draft_id}") {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratesreviewer@fluidattacks.com')
    assert 'errors' not in result
    assert result['data']['approveDraft']['success']

    finding_id = draft_id
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                vulnerabilities{{
                    id
                    where
                }}
                openVulnerabilities
                closedVulnerabilities
                state
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['finding']['openVulnerabilities'] == 1
    assert result['data']['finding']['closedVulnerabilities'] == 2
    assert result['data']['finding']['state'] == 'open'
    vulns = result['data']['finding']['vulnerabilities']
    vuln_uuid = [x for x in vulns if x['where'] == 'https://example.com'][0]['id']

    query = f'''
            mutation {{
                requestZeroRiskVuln(
                    findingId: "{finding_id}",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratescustomer@gmail.com')
    assert 'errors' not in result
    assert 'success' in result['data']['requestZeroRiskVuln']
    assert result['data']['requestZeroRiskVuln']['success']

    query = f'''
            mutation {{
                rejectZeroRiskVuln(
                    findingId: "{finding_id}",
                    justification: "reject zero risk vuln",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['rejectZeroRiskVuln']
    assert result['data']['rejectZeroRiskVuln']['success']

    query = f'''
            mutation {{
                requestZeroRiskVuln(
                    findingId: "{finding_id}",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
    data = {'query': query}
    result = await get_result(data, stakeholder='integratesuser@gmail.com')
    assert 'errors' not in result
    assert 'success' in result['data']['requestZeroRiskVuln']
    assert result['data']['requestZeroRiskVuln']['success']

    query = f'''
            mutation {{
                confirmZeroRiskVuln(
                    findingId: "{finding_id}",
                    justification: "confirm zero risk vuln",
                    vulnerabilities:
                        ["{vuln_uuid}"]
                ) {{
                    success
                }}
            }}
        '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['confirmZeroRiskVuln']
    assert result['data']['confirmZeroRiskVuln']['success']

    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                id
                historicZeroRisk {{
                    date
                    status
                }}
                zeroRisk
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['vulnerability']['id'] == vuln_uuid
    historic_zero_risk = result['data']['vulnerability']['historicZeroRisk']
    for index in range(len(historic_zero_risk)):
        historic_zero_risk[index]['date'] = (
            historic_zero_risk[index]['date'][:-9]
        )
    assert historic_zero_risk == [
        {
            'date': today,
            'status': 'REQUESTED'
        },
        {
            'date': today,
            'status': 'REJECTED'
        },
        {
            'date': today,
            'status': 'REQUESTED'
        },
        {
            'date': today,
            'status': 'CONFIRMED'
        }
    ]
    assert result['data']['vulnerability']['zeroRisk'] == 'Confirmed'

    finding_id = draft_id
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                state
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['finding']['state'] == 'closed'
