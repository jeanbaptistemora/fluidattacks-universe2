import pytest
import pytz
from datetime import datetime

from test_async.functional_test.customer.utils import get_result

from backend_new import settings

pytestmark = pytest.mark.asyncio


async def test_vulnerability():
    tzn = pytz.timezone(settings.TIME_ZONE)
    today = datetime.now(tz=tzn).strftime('%Y-%m-%d')
    finding_id = '463558592'
    vuln_uuid = '54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6'
    expected_output = {
        'finding_id': finding_id,
        'UUID': vuln_uuid,  
        'vuln_type': 'lines',
        'specific': '564',
        'where': 'path/to/file4.ext',
        'historic_state': [
            {
                'date': '2019-01-16 08:47:07',
                'analyst': 'unittest@fluidattacks.com',
                'state': 'open'
            }
        ],
        'analyst': 'unittest@fluidattacks.com',
        'last_analyst': 'unittest@fluidattacks.com',
        'source': 'integrates',
        'current_state': 'open',
        'current_approval_status': '',
        'last_approved_status': 'open',
        'treatment_manager': 'integratescustomer@gmail.com',
        'severity': '',
        'tag': 'test1, test2',
        'tags': ['test1', 'test2'],
        'remediated': False,
        'verification': ''
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                findingId
                id
                vulnType
                specific
                where
                historicState
                analyst
                lastAnalyst
                source
                currentState
                currentApprovalStatus
                lastApprovedStatus
                treatmentManager
                severity
                tag
                tags
                remediated
                verification
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['vulnerability']['findingId'] == expected_output.get('finding_id')
    assert result['data']['vulnerability']['where'] == expected_output.get('where')
    assert result['data']['vulnerability']['historicState'] == expected_output.get('historic_state')
    assert result['data']['vulnerability']['id'] == expected_output.get('UUID')
    assert result['data']['vulnerability']['specific'] == expected_output.get('specific')
    assert result['data']['vulnerability']['vulnType'] == expected_output.get('vuln_type')
    assert result['data']['vulnerability']['analyst'] == expected_output.get('analyst')
    assert result['data']['vulnerability']['lastAnalyst'] == expected_output.get('last_analyst')
    assert result['data']['vulnerability']['source'] == expected_output.get('source')
    assert result['data']['vulnerability']['currentState'] == expected_output.get('current_state')
    assert result['data']['vulnerability']['currentApprovalStatus'] == expected_output.get('current_approval_status')
    assert result['data']['vulnerability']['lastApprovedStatus'] == expected_output.get('last_approved_status')
    assert result['data']['vulnerability']['treatmentManager'] == expected_output.get('treatment_manager')
    assert result['data']['vulnerability']['severity'] == expected_output.get('severity')
    assert result['data']['vulnerability']['tag'] == expected_output.get('tag')
    assert result['data']['vulnerability']['tags'] == expected_output.get('tags')
    assert result['data']['vulnerability']['remediated'] == expected_output.get('remediated')
    assert result['data']['vulnerability']['verification'] == expected_output.get('verification')
    query = f'''
        mutation {{
            deleteTags(
                findingId: "{finding_id}",
                vulnerabilities: ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['deleteTags']
    assert result['data']['deleteTags']['success']
    query = f'''
        mutation {{
            requestVerificationVuln(
                findingId: "{finding_id}",
                justification: "this is a comenting test of a request verification in vulns",
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert result['data']['requestVerificationVuln']['success']
    query = f'''
        mutation {{
            updateTreatmentVuln (
                findingId: "{finding_id}",
                treatmentManager: "integratesuser@gmail.com"
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data)
    assert 'errors' not in result
    assert 'success' in result['data']['updateTreatmentVuln']
    assert result['data']['updateTreatmentVuln']['success']
    expected_output = {
        'historic_verification': [
            {
                'date': today,
                'status': 'REQUESTED'
            }
        ],
        'treatment_manager': 'integratescustomer@gmail.com',
        'tag': '',
        'tags': []
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                historicVerification{{
                        date
                        status
                 }}
                 treatmentManager
                 tag
                 tags
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, 'integratesmanager@gmail.com')
    assert 'errors' not in result
    result['data']['vulnerability']['historicVerification'][0]['date'] = (
        result['data']['vulnerability']['historicVerification'][0]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicVerification'] == expected_output.get('historic_verification')
    assert result['data']['vulnerability']['treatmentManager'] == expected_output.get('treatment_manager')
    assert result['data']['vulnerability']['tag'] == expected_output.get('tag')
    assert result['data']['vulnerability']['tags'] == expected_output.get('tags')
