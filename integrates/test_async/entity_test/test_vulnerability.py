from datetime import datetime, timedelta
import json
import os
import pytest

from ariadne import graphql, graphql_sync
from django.test import TestCase
from django.test.client import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.conf import settings
from freezegun import freeze_time
from jose import jwt
from starlette.datastructures import UploadFile

from backend import util
from backend.api.dataloaders.finding import FindingLoader
from backend.api.dataloaders.vulnerability import VulnerabilityLoader
from backend.api.schema import SCHEMA
from backend.dal import (
    comment as comment_dal,
    finding as finding_dal,
)
from backend.domain import vulnerability as vuln_domain
from backend.exceptions import VulnNotFound
from test_async.utils import create_dummy_session

pytestmark = pytest.mark.asyncio


class VulnerabilityTests(TestCase):

    async def _get_result_async(self, data, user='integratesmanager@gmail.com'):
        """Get result."""
        request = await create_dummy_session(user)
        request.loaders = {
            'finding': FindingLoader(),
            'vulnerability': VulnerabilityLoader(),
        }
        _, result = await graphql(SCHEMA, data, context_value=request)
        return result


    async def test_vulnerability(self):
        vuln_uuid = '09afd608-aa53-4ccb-9094-0076181fa0ea'
        expected_output = {
            'finding_id': '475041513',
            'UUID': vuln_uuid,
            'vuln_type': 'ports',
            'specific': '3636',
            'where': '192.168.100.105',
            'historic_state': [{
                'date': '2019-09-13 09:58:38',
                'analyst': 'unittest@fluidattacks.com',
                'state': 'open',
            }],
            'historic_zero_risk': [
                {
                    'date': '2018-09-28 10:32:58',
                    'status': 'REQUESTED'
                },
                {
                    'date': '2020-09-09 16:01:26',
                    'status': 'CONFIRMED'
                }
            ],
            'zero_risk': 'Confirmed'
        }
        query = '''
            query {
                vulnerability(uuid: "$vuln_uuid") {
                    findingId
                    id
                    vulnType
                    specific
                    where
                    historicState
                    historicZeroRisk {
                        date
                        status
                    }
                    zeroRisk
                }
            }
        '''.replace('$vuln_uuid', vuln_uuid)
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert result['data']['vulnerability']['findingId'] == expected_output.get('finding_id')
        assert result['data']['vulnerability']['where'] == expected_output.get('where')
        assert result['data']['vulnerability']['historicState'] == expected_output.get('historic_state')
        assert result['data']['vulnerability']['historicZeroRisk'] == expected_output.get('historic_zero_risk')
        assert result['data']['vulnerability']['id'] == expected_output.get('UUID')
        assert result['data']['vulnerability']['specific'] == expected_output.get('specific')
        assert result['data']['vulnerability']['vulnType'] == expected_output.get('vuln_type')
        assert result['data']['vulnerability']['zeroRisk'] == expected_output.get('zero_risk')


    @pytest.mark.changes_db
    async def test_delete_tags(self):
        """Check for deleteTags mutation."""
        query = '''
            mutation {
                deleteTags(
                    findingId: "463558592",
                    vulnerabilities: [
                        "0a848781-b6a4-422e-95fa-692151e6a98e",
                        "3bcdb384-5547-4170-a0b6-3b397a245465"
                    ]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(
            data, user='integratesuser@gmail.com')
        assert 'errors' not in result
        assert 'success' in result['data']['deleteTags']
        assert result['data']['deleteTags']['success']


    @pytest.mark.changes_db
    async def test_update_treatment_vuln(self):
        """Check for updateTreatmentVuln mutation."""
        query = '''
            mutation {
                updateTreatmentVuln (
                    findingId: "422286126",
                    treatmentManager: "integratesuser@gmail.com"
                    vulnerabilities:
                        ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"]
                ){
                success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(
            data, user='continuoushacking@gmail.com')
        assert 'errors' not in result
        assert 'success' in result['data']['updateTreatmentVuln']
        assert result['data']['updateTreatmentVuln']['success']


    @pytest.mark.changes_db
    async def test_request_verification(self):
        """Check for requestVerificationVuln mutation."""
        query = '''
            mutation {
                requestVerificationVuln(
                    findingId: "436992569",
                    justification: "this is a comenting test of a request verification in vulns",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62955"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['requestVerificationVuln']
        vulnerability = await vuln_domain.get_by_finding('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'
        vulnerability = await vuln_domain.get_by_finding('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'


    @pytest.mark.changes_db
    async def test_verify_requested_vulns(self):
        """Check for verifyRequestVuln mutation."""
        query = '''
            mutation {
                verifyRequestVuln(
                    findingId: "422286126",
                    justification: "Vuln verified",
                    openVulns: ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"],
                    closedVulns: []
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        expected_error = 'Exception - Error verification not requested'
        assert 'errors' in result
        assert result['errors'][0]['message'] == expected_error


    @pytest.mark.changes_db
    @freeze_time("2019-12-01")
    async def test_request_zero_risk_vuln(self):
        """Check for requestZeroRiskVuln mutation."""
        query = '''
            mutation {
                requestZeroRiskVuln(
                    findingId: "436992569",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62955"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data, user='integratescustomer@gmail.com')
        assert 'errors' not in result
        assert 'success' in result['data']['requestZeroRiskVuln']
        assert result['data']['requestZeroRiskVuln']['success']

        comments = await comment_dal.get_comments('zero_risk', 436992569)
        assert len(comments) == 1
        assert comments[0]['content'] == 'request zero risk vuln'
        assert comments[0]['created'] == '2019-11-30 19:00:00'
        assert comments[0]['email'] == 'integratescustomer@gmail.com'
        assert comments[0]['finding_id'] == 436992569
        assert comments[0]['fullname'] == 'unit test'
        assert comments[0]['modified'] == '2019-11-30 19:00:00'
        comment_id = comments[0]['user_id']

        vulnerability = await vuln_domain.get_by_finding('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert len(vulnerability['historic_zero_risk']) == 1
        assert vulnerability['historic_zero_risk'][-1].get('comment_id') == comment_id
        assert vulnerability['historic_zero_risk'][-1].get('date') == '2019-11-30 19:00:00'
        assert vulnerability['historic_zero_risk'][-1].get('email') == 'integratescustomer@gmail.com'
        assert vulnerability['historic_zero_risk'][-1].get('status') == 'REQUESTED'
        vulnerability = await vuln_domain.get_by_finding('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert len(vulnerability['historic_zero_risk']) == 1
        assert vulnerability['historic_zero_risk'][-1].get('comment_id') == comment_id
        assert vulnerability['historic_zero_risk'][-1].get('date') == '2019-11-30 19:00:00'
        assert vulnerability['historic_zero_risk'][-1].get('email') == 'integratescustomer@gmail.com'
        assert vulnerability['historic_zero_risk'][-1].get('status') == 'REQUESTED'


    @pytest.mark.changes_db
    async def test_request_zero_risk_vuln_error_already_requested(self):
        """Check for already requested vuln with requestZeroRiskVuln mutation."""
        query = '''
            mutation {
                requestZeroRiskVuln(
                    findingId: "436992569",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62955"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' in result
        assert result['errors'][0]['message'] == 'Exception - Zero risk vulnerability is already requested'

        vulnerability = await vuln_domain.get_by_finding('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert len(vulnerability['historic_zero_risk']) == 1
        vulnerability = await vuln_domain.get_by_finding('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert len(vulnerability['historic_zero_risk']) == 1

        comments = await comment_dal.get_comments('zero_risk', 436992569)
        assert len(comments) == 1


    @pytest.mark.changes_db
    async def test_request_zero_risk_vuln_error_vuln_not_in_finding(self):
        """Check for vuln not in finding with requestZeroRiskVuln mutation."""
        query = '''
            mutation {
                requestZeroRiskVuln(
                    findingId: "436992569",
                    justification: "request zero risk vuln",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62952"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data, user='integratesuser@gmail.com')
        assert 'errors' in result
        assert result['errors'][0]['message'] == 'Exception - Vulnerability does not belong to finding'

        vulnerability = await vuln_domain.get_by_finding('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert len(vulnerability['historic_zero_risk']) == 1
        vulnerability = await vuln_domain.get_by_finding('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert len(vulnerability['historic_zero_risk']) == 1

        comments = await comment_dal.get_comments('zero_risk', 436992569)
        assert len(comments) == 1


    @pytest.mark.changes_db
    @freeze_time("2019-12-01")
    async def test_confirm_zero_risk_vuln(self):
        """Check for confirmZeroRiskVuln mutation."""
        query = '''
            mutation {
                confirmZeroRiskVuln(
                    findingId: "463558592",
                    justification: "confirm zero risk vuln",
                    vulnerabilities:
                        ["54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6",
                         "6f023c26-5b10-4ded-aa27-bb563c2206ab"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data, user='integratesanalyst@fluidattacks.com')
        assert 'errors' not in result
        assert 'success' in result['data']['confirmZeroRiskVuln']
        assert result['data']['confirmZeroRiskVuln']['success']

        comments = await comment_dal.get_comments('zero_risk', 463558592)
        assert len(comments) == 1
        assert comments[0]['content'] == 'confirm zero risk vuln'
        assert comments[0]['created'] == '2019-11-30 19:00:00'
        assert comments[0]['email'] == 'integratesanalyst@fluidattacks.com'
        assert comments[0]['finding_id'] == 463558592
        assert comments[0]['fullname'] == 'unit test'
        assert comments[0]['modified'] == '2019-11-30 19:00:00'
        comment_id = comments[0]['user_id']

        vulnerability = await vuln_domain.get_by_finding('463558592', '6f023c26-5b10-4ded-aa27-bb563c2206ab')
        assert len(vulnerability['historic_zero_risk']) == 2
        assert vulnerability['historic_zero_risk'][-1].get('comment_id') == comment_id
        assert vulnerability['historic_zero_risk'][-1].get('date') == '2019-11-30 19:00:00'
        assert vulnerability['historic_zero_risk'][-1].get('email') == 'integratesanalyst@fluidattacks.com'
        assert vulnerability['historic_zero_risk'][-1].get('status') == 'CONFIRMED'
        vulnerability = await vuln_domain.get_by_finding('463558592', '54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6')
        assert len(vulnerability['historic_zero_risk']) == 2
        assert vulnerability['historic_zero_risk'][-1].get('comment_id') == comment_id
        assert vulnerability['historic_zero_risk'][-1].get('date') == '2019-11-30 19:00:00'
        assert vulnerability['historic_zero_risk'][-1].get('email') == 'integratesanalyst@fluidattacks.com'
        assert vulnerability['historic_zero_risk'][-1].get('status') == 'CONFIRMED'


    @pytest.mark.changes_db
    async def test_confirm_zero_risk_vuln_error_already_confirmed(self):
        """Check for not requested zero risk vuln with confirmZeroRiskVuln mutation."""
        query = '''
            mutation {
                confirmZeroRiskVuln(
                    findingId: "463558592",
                    justification: "confirm zero risk vuln",
                    vulnerabilities:
                        ["54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6",
                         "6f023c26-5b10-4ded-aa27-bb563c2206ab"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' in result
        assert result['errors'][0]['message'] == 'Exception - Zero risk vulnerability is not requested'

        vulnerability = await vuln_domain.get_by_finding('463558592', '6f023c26-5b10-4ded-aa27-bb563c2206ab')
        assert len(vulnerability['historic_zero_risk']) == 2
        vulnerability = await vuln_domain.get_by_finding('463558592', '54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6')
        assert len(vulnerability['historic_zero_risk']) == 2

        comments = await comment_dal.get_comments('zero_risk', 463558592)
        assert len(comments) == 1


    @pytest.mark.changes_db
    async def test_confirm_zero_risk_vuln_error_vuln_not_in_finding(self):
        """Check for vuln not in finding with confirmZeroRiskVuln mutation."""
        query = '''
            mutation {
                confirmZeroRiskVuln(
                    findingId: "463558592",
                    justification: "confirm zero risk vuln",
                    vulnerabilities:
                        ["54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62959"]
                ) {
                    success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data, user='integratesreviewer@fluidattacks.com')
        assert 'errors' in result
        assert result['errors'][0]['message'] == 'Exception - Vulnerability does not belong to finding'

        vulnerability = await vuln_domain.get_by_finding('463558592', '6f023c26-5b10-4ded-aa27-bb563c2206ab')
        assert len(vulnerability['historic_zero_risk']) == 2
        vulnerability = await vuln_domain.get_by_finding('463558592', '54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6')
        assert len(vulnerability['historic_zero_risk']) == 2

        comments = await comment_dal.get_comments('zero_risk', 463558592)
        assert len(comments) == 1


    @pytest.mark.changes_db
    async def test_remove_vulnerability(self):
        """Check for deleteVulnerability mutation."""
        query = '''
            mutation{
                deleteVulnerability (
                id: "a8c0ff07-bb21-4cd5-bb9f-4d716fc69320"
                findingId: "475041513"
                justification: REPORTING_ERROR
                ) {
                success
                }
            }
        '''
        data = {'query': query}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteVulnerability']
        with pytest.raises(VulnNotFound):
            assert await vuln_domain.get_by_finding(
                '475041513', 'a8c0ff07-bb21-4cd5-bb9f-4d716fc69320')


    @pytest.mark.changes_db
    async def test_upload_file(self):
        """Check for uploadFile mutation."""
        filename = os.path.dirname(os.path.abspath(__file__))
        filename = os.path.join(filename, '../mock/test-vulns.yaml')
        vuln = await vuln_domain.get('74632c0c-db08-47c2-b013-c70e5b67c49f')
        assert vuln['historic_verification'][-1].get('status') == 'REQUESTED'

        with open(filename, 'rb') as test_file:
            uploaded_file = UploadFile(
                filename=test_file.name,
                file=test_file,
                content_type='text/x-yaml'
            )
            query = '''
                mutation UploadFileMutation(
                    $file: Upload!, $findingId: String!
                ) {
                    uploadFile (
                        file: $file,
                        findingId: $findingId
                    ) {
                        success
                    }
                }
            '''
            variables = {
                'file': uploaded_file,
                'findingId': '463558592',
            }
            data = {'query': query, 'variables': variables}
            result = await self._get_result_async(data)

        assert 'errors' not in result
        assert 'success' in result['data']['uploadFile']
        vuln = await vuln_domain.get('74632c0c-db08-47c2-b013-c70e5b67c49f')
        finding = await finding_dal.get_attributes(
            '463558592', ['historic_verification']
        )
        assert vuln['historic_verification'][-1].get('status') == 'VERIFIED'
        assert len(finding['historic_verification'][-1].get('vulns')) == 2


    async def test_download_vuln_file(self):
        """Check for downloadVulnFile mutation."""
        query = '''
            mutation DownloadVulnFile($findingId: String!) {
                downloadVulnFile (findingId: $findingId) {
                    url
                    success
                }
            }
        '''
        finding_id = '463461507'
        project_name = 'unittesting'
        variables = {
            'findingId': finding_id,
        }
        data = {'query': query, 'variables': variables}
        result = await self._get_result_async(data)
        assert 'errors' not in result
        assert 'success' in result['data']['downloadVulnFile']
        assert 'url' in result['data']['downloadVulnFile']
        assert f'files.fluidattacks.com/{project_name}-{finding_id}' \
            in result['data']['downloadVulnFile']['url']
