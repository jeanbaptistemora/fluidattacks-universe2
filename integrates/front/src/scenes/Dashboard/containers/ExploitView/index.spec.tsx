import { ExploitView } from "scenes/Dashboard/containers/ExploitView";
import { GET_FINDING_EXPLOIT } from "scenes/Dashboard/containers/ExploitView/queries";
import { MockedProvider } from "@apollo/react-testing";
import type { MockedResponse } from "@apollo/react-testing";
import { Provider } from "react-redux";
import { PureAbility } from "@casl/ability";
import React from "react";
import type { ReactWrapper } from "enzyme";
import { act } from "react-dom/test-utils";
import { authzPermissionsContext } from "utils/authz/config";
import { mount } from "enzyme";
import store from "store";
import wait from "waait";
import { MemoryRouter, Route } from "react-router";

describe("FindingExploitView", (): void => {
  const mocks: readonly MockedResponse[] = [
    {
      request: {
        query: GET_FINDING_EXPLOIT,
        variables: { findingId: "422286126" },
      },
      result: {
        data: {
          finding: {
            exploit: "print('hello world')",
            id: "422286126",
          },
        },
      },
    },
  ];

  it("should return a function", (): void => {
    expect.hasAssertions();

    expect(typeof ExploitView).toStrictEqual("function");
  });

  it("should render", (): void => {
    expect.hasAssertions();

    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <Route
            component={ExploitView}
            path={"/:projectName/vulns/:findingId/exploit"}
          />
        </MockedProvider>
      </MemoryRouter>
    );

    expect(wrapper).toHaveLength(1);
  });

  it("should render code", async (): Promise<void> => {
    expect.hasAssertions();

    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <Route
            component={ExploitView}
            path={"/:projectName/vulns/:findingId/exploit"}
          />
        </MockedProvider>
      </MemoryRouter>
    );
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );

    expect(wrapper.find("code")).toHaveLength(1);
    expect(wrapper.text()).toContain("print('hello world')");
  });

  it("should render as editable", async (): Promise<void> => {
    expect.hasAssertions();

    const mockedPermissions: PureAbility<string> = new PureAbility([
      { action: "backend_api_mutations_update_evidence_mutate" },
    ]);
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <authzPermissionsContext.Provider value={mockedPermissions}>
            <Route
              component={ExploitView}
              path={"/:projectName/vulns/:findingId/exploit"}
            />
          </authzPermissionsContext.Provider>
        </MockedProvider>
      </MemoryRouter>
    );
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );
    const editButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Edit"))
      .at(0);

    expect(editButton).toHaveLength(1);
  });

  it("should render as readonly", async (): Promise<void> => {
    expect.hasAssertions();

    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <Route
            component={ExploitView}
            path={"/:projectName/vulns/:findingId/exploit"}
          />
        </MockedProvider>
      </MemoryRouter>
    );
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );
    const editButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Edit"))
      .at(0);

    expect(editButton).toHaveLength(0);
  });

  it("should render upload field", async (): Promise<void> => {
    expect.hasAssertions();

    const mockedPermissions: PureAbility<string> = new PureAbility([
      { action: "backend_api_mutations_update_evidence_mutate" },
    ]);
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <Provider store={store}>
          <MockedProvider addTypename={false} mocks={mocks}>
            <authzPermissionsContext.Provider value={mockedPermissions}>
              <Route
                component={ExploitView}
                path={"/:projectName/vulns/:findingId/exploit"}
              />
            </authzPermissionsContext.Provider>
          </MockedProvider>
        </Provider>
      </MemoryRouter>
    );
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );
    const editButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Edit"))
      .at(0);

    expect(editButton).toHaveLength(1);

    editButton.simulate("click");
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );

    expect(wrapper.text()).toContain("Update");
    expect(wrapper.text()).toContain("Explore");
  });

  it("should render empty UI", async (): Promise<void> => {
    expect.hasAssertions();

    const emptyMocks: readonly MockedResponse[] = [
      {
        request: {
          query: GET_FINDING_EXPLOIT,
          variables: { findingId: "422286126" },
        },
        result: {
          data: {
            finding: {
              exploit: "",
              id: "422286126",
            },
          },
        },
      },
    ];
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider addTypename={false} mocks={emptyMocks}>
          <Route
            component={ExploitView}
            path={"/:projectName/vulns/:findingId/exploit"}
          />
        </MockedProvider>
      </MemoryRouter>
    );
    await act(
      async (): Promise<void> => {
        await wait(0);
        wrapper.update();
      }
    );

    expect(wrapper.text()).toContain("There is no exploit");
  });
});
