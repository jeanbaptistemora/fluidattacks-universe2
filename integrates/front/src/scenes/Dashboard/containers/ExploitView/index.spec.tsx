import { MockedProvider, MockedResponse } from "@apollo/react-testing";
import { PureAbility } from "@casl/ability";
import { mount, ReactWrapper } from "enzyme";
import React from "react";
// tslint:disable-next-line: no-submodule-imports
import { act } from "react-dom/test-utils";
import { Provider } from "react-redux";
import { MemoryRouter, Route } from "react-router";
import wait from "waait";

import { ExploitView } from "scenes/Dashboard/containers/ExploitView";
import { GET_FINDING_EXPLOIT } from "scenes/Dashboard/containers/ExploitView/queries";
import store from "store";
import { authzPermissionsContext } from "utils/authz/config";

describe("FindingExploitView", (): void => {
  const mocks: ReadonlyArray<MockedResponse> = [{
    request: {
      query: GET_FINDING_EXPLOIT,
      variables: { findingId: "422286126" },
    },
    result: {
      data: {
        finding: {
          exploit: "print('hello world')",
          id: "422286126",
        },
      },
    },
  }];

  it("should return a function", (): void => {
    expect(typeof (ExploitView))
      .toEqual("function");
  });

  it("should render", (): void => {
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider mocks={mocks} addTypename={false}>
          <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
        </MockedProvider>
      </MemoryRouter>,
    );
    expect(wrapper)
      .toHaveLength(1);
  });

  it("should render code", async () => {
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider mocks={mocks} addTypename={false}>
          <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
        </MockedProvider>
      </MemoryRouter>,
    );
    await act(async () => { await wait(0); wrapper.update(); });
    expect(wrapper.find("code"))
      .toHaveLength(1);
    expect(wrapper.text())
      .toContain("print('hello world')");
  });

  it("should render as editable", async () => {
    const mockedPermissions: PureAbility<string> = new PureAbility([
      { action: "backend_api_mutations_update_evidence_mutate" },
    ]);
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider mocks={mocks} addTypename={false}>
          <authzPermissionsContext.Provider value={mockedPermissions}>
            <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
          </authzPermissionsContext.Provider>
        </MockedProvider>
      </MemoryRouter>,
    );
    await act(async () => { await wait(0); wrapper.update(); });
    const editButton: ReactWrapper = wrapper.find("button")
      .findWhere((element: ReactWrapper) => element.contains("Edit"))
      .at(0);
    expect(editButton)
      .toHaveLength(1);
  });

  it("should render as readonly", async () => {
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider mocks={mocks} addTypename={false}>
          <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
        </MockedProvider>
      </MemoryRouter>,
    );
    await act(async () => { await wait(0); wrapper.update(); });
    const editButton: ReactWrapper = wrapper.find("button")
      .findWhere((element: ReactWrapper) => element.contains("Edit"))
      .at(0);
    expect(editButton)
      .toHaveLength(0);
  });

  it("should render upload field", async () => {
    const mockedPermissions: PureAbility<string> = new PureAbility([
      { action: "backend_api_mutations_update_evidence_mutate" },
    ]);
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <Provider store={store}>
          <MockedProvider mocks={mocks} addTypename={false}>
            <authzPermissionsContext.Provider value={mockedPermissions}>
              <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
            </authzPermissionsContext.Provider>
          </MockedProvider>
        </Provider>
      </MemoryRouter>,
    );
    await act(async () => { await wait(0); wrapper.update(); });
    const editButton: ReactWrapper = wrapper.find("button")
      .findWhere((element: ReactWrapper) => element.contains("Edit"))
      .at(0);
    expect(editButton)
      .toHaveLength(1);
    editButton.simulate("click");
    await act(async () => { wrapper.update(); });
    expect(wrapper.text())
      .toContain("Update");
    expect(wrapper.text())
      .toContain("Explore");
  });

  it("should render empty UI", async () => {
    const emptyMocks: ReadonlyArray<MockedResponse> = [{
      request: {
        query: GET_FINDING_EXPLOIT,
        variables: { findingId: "422286126" },
      },
      result: {
        data: {
          finding: {
            exploit: "",
            id: "422286126",
          },
        },
      },
    }];
    const wrapper: ReactWrapper = mount(
      <MemoryRouter initialEntries={["/TEST/vulns/422286126/exploit"]}>
        <MockedProvider mocks={emptyMocks} addTypename={false}>
          <Route path={"/:projectName/vulns/:findingId/exploit"} component={ExploitView} />
        </MockedProvider>
      </MemoryRouter>,
    );
    await act(async () => { await wait(0); wrapper.update(); });
    expect(wrapper.text())
      .toContain("There is no exploit");
  });
});
