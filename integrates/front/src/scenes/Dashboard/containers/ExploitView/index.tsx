/* eslint-disable @typescript-eslint/no-unsafe-member-access, react/jsx-no-bind
-- annotation needed as the DB handles "any" type */
import type { ApolloError } from "apollo-client";
import { Button } from "components/Button";
import { Can } from "utils/authz/Can";
import { Field } from "redux-form";
import { FileInput } from "utils/forms/fields";
import { FluidIcon } from "components/FluidIcon";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { GET_FINDING_EXPLOIT } from "scenes/Dashboard/containers/ExploitView/queries";
import { GenericForm } from "scenes/Dashboard/components/GenericForm";
import type { GraphQLError } from "graphql";
import type { InjectedFormProps } from "redux-form";
import { Logger } from "utils/logger";
import React from "react";
import SyntaxHighlighter from "react-syntax-highlighter/dist/esm/light";
import { TooltipWrapper } from "components/TooltipWrapper";
import _ from "lodash";
import globalStyle from "styles/global.css";
import language from "react-syntax-highlighter/dist/esm/languages/hljs/python";
import mixpanel from "mixpanel-browser";
import monokaiSublime from "react-syntax-highlighter/dist/esm/styles/hljs/monokai-sublime";
import { msgError } from "utils/notifications";
import { translate } from "utils/translations/translate";
import { useParams } from "react-router";
import { ButtonToolbarRow, FormGroup } from "styles/styledComponents";
import { Mutation, Query } from "@apollo/react-components";
import type {
  MutationFunction,
  MutationResult,
  QueryResult,
} from "@apollo/react-common";
import {
  REMOVE_EVIDENCE_MUTATION,
  UPDATE_EVIDENCE_MUTATION,
} from "scenes/Dashboard/containers/EvidenceView/queries";
import {
  faCloudUploadAlt,
  faTerminal,
} from "@fortawesome/free-solid-svg-icons";
import { required, validExploitFile } from "utils/validations";

const ExploitView: React.FC = (): JSX.Element => {
  SyntaxHighlighter.registerLanguage("python", language);
  const { findingId } = useParams<{ findingId: string }>();

  const [isEditing, setEditing] = React.useState(false);
  const handleEditClick: () => void = React.useCallback((): void => {
    setEditing(!isEditing);
  }, [isEditing]);

  const handleErrors: (error: ApolloError) => void = React.useCallback(
    ({ graphQLErrors }: ApolloError): void => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        msgError(translate.t("group_alerts.error_textsad"));
        Logger.warning("An error occurred loading finding exploit", error);
      });
    },
    []
  );

  return (
    <React.StrictMode>
      <Query
        onError={handleErrors}
        query={GET_FINDING_EXPLOIT}
        variables={{ findingId }}
      >
        {({ data, refetch }: QueryResult): JSX.Element => {
          if (_.isUndefined(data) || _.isEmpty(data)) {
            return <div />;
          }

          const handleUpdateResult: () => void = (): void => {
            void refetch();
          };
          const handleUpdateError: (updateError: ApolloError) => void = (
            updateError: ApolloError
          ): void => {
            updateError.graphQLErrors.forEach(
              ({ message }: GraphQLError): void => {
                switch (message) {
                  case "Exception - Invalid File Size":
                    msgError(
                      translate.t("validations.file_size", { count: 1 })
                    );
                    break;
                  case "Exception - Invalid File Type":
                    msgError(translate.t("group_alerts.file_type_py"));
                    break;
                  default:
                    msgError(translate.t("group_alerts.error_textsad"));
                    Logger.warning(
                      "An error occurred updating exploit",
                      updateError
                    );
                }
              }
            );
          };

          const handleRemoveErrors: (removeError: ApolloError) => void = (
            removeError: ApolloError
          ): void => {
            msgError(translate.t("group_alerts.error_textsad"));
            Logger.warning("An error occurred removing exploit", removeError);
          };

          return (
            <React.Fragment>
              <ButtonToolbarRow>
                <Can do={"backend_api_mutations_update_evidence_mutate"}>
                  <TooltipWrapper
                    id={translate.t(
                      "search_findings.tab_exploit.editable_tooltip.id"
                    )}
                    message={translate.t(
                      "search_findings.tab_exploit.editable_tooltip"
                    )}
                  >
                    <Button onClick={handleEditClick}>
                      <FluidIcon icon={"edit"} />
                      &nbsp;
                      {translate.t("search_findings.tab_exploit.editable")}
                    </Button>
                  </TooltipWrapper>
                </Can>
              </ButtonToolbarRow>
              <br />
              {isEditing ? (
                <Mutation
                  mutation={UPDATE_EVIDENCE_MUTATION}
                  onCompleted={handleUpdateResult}
                  onError={handleUpdateError}
                >
                  {(
                    updateExploit: MutationFunction,
                    updateRes: MutationResult
                  ): JSX.Element => {
                    const handleSubmit: (values: {
                      filename: FileList;
                    }) => void = (values: { filename: FileList }): void => {
                      setEditing(false);
                      void updateExploit({
                        variables: {
                          evidenceId: "EXPLOIT",
                          file: values.filename[0],
                          findingId,
                        },
                      });
                    };

                    return (
                      <GenericForm name={"exploit"} onSubmit={handleSubmit}>
                        {({ pristine }: InjectedFormProps): React.ReactNode => (
                          <React.Fragment>
                            <ButtonToolbarRow>
                              <FormGroup>
                                <Field
                                  accept={".exp, .py"}
                                  className={"fr"} // eslint-disable-line react/forbid-component-props
                                  component={FileInput}
                                  id={"exploitFile"}
                                  name={"filename"}
                                  validate={[required, validExploitFile]}
                                />
                              </FormGroup>
                              <Button
                                disabled={pristine || updateRes.loading}
                                type={"submit"}
                              >
                                <FontAwesomeIcon icon={faCloudUploadAlt} />
                                &nbsp;
                                {translate.t(
                                  "search_findings.tab_evidence.update"
                                )}
                              </Button>
                            </ButtonToolbarRow>
                            {_.isEmpty(data.finding.exploit) ? undefined : (
                              <Mutation
                                mutation={REMOVE_EVIDENCE_MUTATION}
                                onCompleted={handleUpdateResult}
                                onError={handleRemoveErrors}
                              >
                                {(
                                  removeExploit: MutationFunction,
                                  removeRes: MutationResult
                                ): JSX.Element => {
                                  const handleRemoveClick: () => void = (): void => {
                                    mixpanel.track("RemoveExploit");
                                    setEditing(false);
                                    void removeExploit({
                                      variables: {
                                        evidenceId: "EXPLOIT",
                                        findingId,
                                      },
                                    });
                                  };

                                  return (
                                    <ButtonToolbarRow>
                                      <Button
                                        disabled={removeRes.loading}
                                        onClick={handleRemoveClick}
                                      >
                                        <FluidIcon icon={"delete"} />
                                        &nbsp;
                                        {translate.t(
                                          "search_findings.tab_evidence.remove"
                                        )}
                                      </Button>
                                    </ButtonToolbarRow>
                                  );
                                }}
                              </Mutation>
                            )}
                          </React.Fragment>
                        )}
                      </GenericForm>
                    );
                  }}
                </Mutation>
              ) : undefined}
              {_.isEmpty(data.finding.exploit) ? (
                <div className={globalStyle["no-data"]}>
                  <FontAwesomeIcon icon={faTerminal} size={"2x"} />
                  <p>{translate.t("group.findings.exploit.noData")}</p>
                </div>
              ) : (
                <SyntaxHighlighter
                  language={"python"}
                  showLineNumbers={true}
                  style={monokaiSublime} // eslint-disable-line react/forbid-component-props
                  wrapLines={true}
                >
                  {data.finding.exploit}
                </SyntaxHighlighter>
              )}
            </React.Fragment>
          );
        }}
      </Query>
    </React.StrictMode>
  );
};

export { ExploitView };
