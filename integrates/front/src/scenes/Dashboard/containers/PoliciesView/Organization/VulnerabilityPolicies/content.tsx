import type { ApolloError } from "@apollo/client";
import { useMutation } from "@apollo/client";
import type { PureAbility } from "@casl/ability";
import { useAbility } from "@casl/react";
import {
  faArrowRight,
  faCheck,
  faMinus,
  faTimes,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import _ from "lodash";
import React, { useState } from "react";
import { useTranslation } from "react-i18next";
import { useParams } from "react-router-dom";
import styled from "styled-components";

import {
  handleOrgFindingPolicyDeactivation,
  handleOrgFindingPolicyDeactivationError,
  handleOrgFindingPolicyError,
  handleOrgFindingPolicyNotification,
  handleSubmitOrganizationFindingPolicy,
  handleSubmitOrganizationFindingPolicyError,
} from "./helpers";

import { Button } from "components/Button";
import { ConfirmDialog } from "components/ConfirmDialog";
import { ExternalLink } from "components/ExternalLink";
import { Tooltip } from "components/Tooltip";
import { GET_ORGANIZATION_POLICIES } from "scenes/Dashboard/containers/PoliciesView/Organization/queries";
import { statusFormatter } from "scenes/Dashboard/containers/PoliciesView/Organization/VulnerabilityPolicies/formatter";
import {
  DEACTIVATE_ORGANIZATION_FINDING_POLICY,
  HANDLE_ORGANIZATION_FINDING_POLICY,
  RESUBMIT_ORGANIZATION_FINDING_POLICY,
} from "scenes/Dashboard/containers/PoliciesView/Organization/VulnerabilityPolicies/queries";
import type { IVulnerabilityPoliciesData } from "scenes/Dashboard/containers/PoliciesView/Organization/VulnerabilityPolicies/types";
import { authzPermissionsContext } from "utils/authz/config";
import { formatIsoDate } from "utils/date";

const tPath = "organization.tabs.policies.findings.";

const StyledText = styled.input.attrs({
  className: "w-100 pa2 lh-copy bw0",
})``;

interface IOrganizationVulnerabilityPolicies
  extends IVulnerabilityPoliciesData {
  organizationId: string;
}
export const OrganizationVulnerabilityPolicy: React.FC<IOrganizationVulnerabilityPolicies> =
  ({
    id,
    lastStatusUpdate,
    name,
    organizationId,
    status,
    tags,
  }: IOrganizationVulnerabilityPolicies): JSX.Element => {
    const { t } = useTranslation();
    const { organizationName } = useParams<{ organizationName: string }>();
    const permissions: PureAbility<string> = useAbility(
      authzPermissionsContext
    );
    const canDeactivateFindingPolicy: boolean = permissions.can(
      "api_mutations_deactivate_organization_finding_policy_mutate"
    );
    const canHandleFindingPolicy: boolean = permissions.can(
      "api_mutations_handle_organization_finding_policy_acceptance_mutate"
    );
    const canResubmitFindingPolicy: boolean = permissions.can(
      "api_mutations_submit_organization_finding_policy_mutate"
    );
    const [handlePolicyStatus, setHandlePolicyStatus] = useState<
      "APPROVED" | "REJECTED"
    >("APPROVED");

    const [handleOrgFindingPolicy, { loading: handling }] = useMutation(
      HANDLE_ORGANIZATION_FINDING_POLICY,
      {
        onCompleted: (result: {
          handleOrganizationFindingPolicyAcceptance: { success: boolean };
        }): void => {
          handleOrgFindingPolicyNotification(
            result,
            handlePolicyStatus,
            organizationName
          );
        },
        onError: (error: ApolloError): void => {
          handleOrgFindingPolicyError(error);
        },
        refetchQueries: [
          {
            query: GET_ORGANIZATION_POLICIES,
            variables: {
              organizationId,
            },
          },
        ],
      }
    );

    const [deactivateOrganizationFindingPolicy, { loading: deactivating }] =
      useMutation(DEACTIVATE_ORGANIZATION_FINDING_POLICY, {
        onCompleted: (result: {
          deactivateOrganizationFindingPolicy: { success: boolean };
        }): void => {
          handleOrgFindingPolicyDeactivation(result, organizationName);
        },
        onError: (error: ApolloError): void => {
          handleOrgFindingPolicyDeactivationError(error);
        },
        refetchQueries: [
          {
            query: GET_ORGANIZATION_POLICIES,
            variables: {
              organizationId,
            },
          },
        ],
      });

    const [resubmitOrganizationFindingPolicy, { loading: submitting }] =
      useMutation(RESUBMIT_ORGANIZATION_FINDING_POLICY, {
        onCompleted: (result: {
          submitOrganizationFindingPolicy: { success: boolean };
        }): void => {
          handleSubmitOrganizationFindingPolicy(result, organizationName);
        },
        onError: (error: ApolloError): void => {
          handleSubmitOrganizationFindingPolicyError(error);
        },
        refetchQueries: [
          {
            query: GET_ORGANIZATION_POLICIES,
            variables: {
              organizationId,
            },
          },
        ],
      });

    const isResubmitable: boolean =
      status === "INACTIVE" || status === "REJECTED";
    const isSubmitted: boolean = status === "SUBMITTED";
    const isApproved: boolean = status === "APPROVED";
    const loading: boolean = deactivating || handling;

    async function handleApprovePolicy(): Promise<void> {
      setHandlePolicyStatus("APPROVED");
      await handleOrgFindingPolicy({
        variables: {
          findingPolicyId: id,
          organizationName,
          status: "APPROVED",
        },
      });
    }
    async function handleRejectPolicy(): Promise<void> {
      setHandlePolicyStatus("REJECTED");
      await handleOrgFindingPolicy({
        variables: {
          findingPolicyId: id,
          organizationName,
          status: "REJECTED",
        },
      });
    }
    async function handleDeactivateFindingPolicy(): Promise<void> {
      await deactivateOrganizationFindingPolicy({
        variables: { findingPolicyId: id, organizationName },
      });
    }
    async function handleResubmitFindingPolicy(): Promise<void> {
      await resubmitOrganizationFindingPolicy({
        variables: { findingPolicyId: id, organizationName },
      });
    }
    const baseUrl = "https://docs.fluidattacks.com/criteria/vulnerabilities/";
    const criteria = _.first(name.split(".")) as string;

    return (
      <React.StrictMode>
        <div
          className={
            "bt b--light-gray bw1 flex flex-wrap items-center justify-between"
          }
          data-testid={"vulnerability-policy-row"}
        >
          <div className={"w-40-l w-100-m w-100"}>
            <ExternalLink
              // eslint-disable-next-line react/forbid-component-props
              className={"f5 ma1 truncate"}
              href={`${baseUrl}${criteria}`}
            >
              {name}
            </ExternalLink>
          </div>
          <div className={"w-20-l w-30-m w-100"}>
            <StyledText
              disabled={true}
              id={"tags"}
              name={"tags"}
              type={"text"}
              value={tags.join(", ")}
            />
          </div>
          <div className={"w-10-l w-30-m w-30"}>
            <p className={"f5 ml1 mr1 mt2 mb2 ph1 truncate"}>
              {statusFormatter(status)}
            </p>
          </div>
          <div className={"w-20-l w-20-m w-40"}>
            <p className={"f5 ma1 fr"}>{formatIsoDate(lastStatusUpdate)}</p>
          </div>
          {canDeactivateFindingPolicy || canHandleFindingPolicy ? (
            <div className={"w-10-l w-20-m w-30"}>
              {isSubmitted && canHandleFindingPolicy ? (
                <div className={"fr"}>
                  <Tooltip
                    disp={"inline-block"}
                    id={"approveButtonToolTip"}
                    place={"top"}
                    tip={t(`${tPath}tooltip.approveButton`)}
                  >
                    <Button
                      disabled={loading}
                      onClick={handleApprovePolicy}
                      variant={"secondary"}
                    >
                      <FontAwesomeIcon icon={faCheck} />
                    </Button>
                  </Tooltip>
                  <Tooltip
                    disp={"inline-block"}
                    id={"rejectButtonToolTip"}
                    place={"top"}
                    tip={t(`${tPath}tooltip.rejectButton`)}
                  >
                    <Button
                      disabled={loading}
                      onClick={handleRejectPolicy}
                      variant={"secondary"}
                    >
                      <FontAwesomeIcon icon={faTimes} />
                    </Button>
                  </Tooltip>
                </div>
              ) : undefined}
              {isResubmitable && canResubmitFindingPolicy ? (
                <ConfirmDialog title={t(`${tPath}submitPolicies.modalTitle`)}>
                  {(confirm): React.ReactNode => {
                    function handleClick(): void {
                      confirm((): void => {
                        void handleResubmitFindingPolicy();
                      });
                    }

                    return (
                      <div className={"fr"}>
                        <Tooltip
                          disp={"inline-block"}
                          id={"resubmitButtonToolTip"}
                          place={"top"}
                          tip={t(`${tPath}tooltip.resubmitButton`)}
                        >
                          <Button
                            disabled={submitting}
                            onClick={handleClick}
                            variant={"secondary"}
                          >
                            <FontAwesomeIcon icon={faArrowRight} />
                          </Button>
                        </Tooltip>
                      </div>
                    );
                  }}
                </ConfirmDialog>
              ) : undefined}
              {isApproved && canDeactivateFindingPolicy ? (
                <ConfirmDialog
                  title={t(`${tPath}deactivatePolicies.modalTitle`)}
                >
                  {(confirm): React.ReactNode => {
                    function handleClick(): void {
                      confirm((): void => {
                        void handleDeactivateFindingPolicy();
                      });
                    }

                    return (
                      <div className={"fr"}>
                        <Tooltip
                          disp={"inline-block"}
                          id={"deactivateButtonToolTip"}
                          place={"top"}
                          tip={t(`${tPath}tooltip.deactivateButton`)}
                        >
                          <Button
                            disabled={loading}
                            onClick={handleClick}
                            variant={"secondary"}
                          >
                            <FontAwesomeIcon icon={faMinus} />
                          </Button>
                        </Tooltip>
                      </div>
                    );
                  }}
                </ConfirmDialog>
              ) : undefined}
            </div>
          ) : undefined}
        </div>
      </React.StrictMode>
    );
  };
