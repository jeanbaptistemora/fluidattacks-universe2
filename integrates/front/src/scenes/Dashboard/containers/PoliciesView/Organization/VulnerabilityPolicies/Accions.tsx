/*
 * SPDX-FileCopyrightText: 2022 Fluid Attacks <development@fluidattacks.com>
 *
 * SPDX-License-Identifier: MPL-2.0
 */

import type { ApolloError } from "@apollo/client";
import { useMutation } from "@apollo/client";
import type { PureAbility } from "@casl/ability";
import { useAbility } from "@casl/react";
import {
  faArrowRight,
  faBan,
  faCheck,
  faTimes,
} from "@fortawesome/free-solid-svg-icons";
import type { FC, ReactNode } from "react";
import React, { Fragment, useState } from "react";
import { useTranslation } from "react-i18next";
import { useParams } from "react-router-dom";

import {
  handleOrgFindingPolicyDeactivation,
  handleOrgFindingPolicyDeactivationError,
  handleOrgFindingPolicyError,
  handleOrgFindingPolicyNotification,
  handleSubmitOrganizationFindingPolicy,
  handleSubmitOrganizationFindingPolicyError,
} from "./helpers";
import {
  DEACTIVATE_ORGANIZATION_FINDING_POLICY,
  HANDLE_ORGANIZATION_FINDING_POLICY,
  RESUBMIT_ORGANIZATION_FINDING_POLICY,
} from "./queries";
import type { IVulnerabilityPoliciesData } from "./types";

import { GET_ORGANIZATION_POLICIES } from "../queries";
import { Button } from "components/Button";
import { ConfirmDialog } from "components/ConfirmDialog";
import { authzPermissionsContext } from "utils/authz/config";

interface IPoliciesActionsProps {
  cell: IVulnerabilityPoliciesData;
  organizationId: string;
}

const tPath = "organization.tabs.policies.findings.";

const PoliciesActions: FC<IPoliciesActionsProps> = ({
  cell: { id, status },
  organizationId,
}: Readonly<IPoliciesActionsProps>): JSX.Element | null => {
  const { t } = useTranslation();
  const permissions: PureAbility<string> = useAbility(authzPermissionsContext);
  const canDeactivateFindingPolicy: boolean = permissions.can(
    "api_mutations_deactivate_organization_finding_policy_mutate"
  );
  const canHandleFindingPolicy: boolean = permissions.can(
    "api_mutations_handle_organization_finding_policy_acceptance_mutate"
  );
  const canResubmitFindingPolicy: boolean = permissions.can(
    "api_mutations_submit_organization_finding_policy_mutate"
  );

  const { organizationName } = useParams<{ organizationName: string }>();
  const [handlePolicyStatus, setHandlePolicyStatus] = useState<
    "APPROVED" | "REJECTED"
  >("APPROVED");

  const [handleOrgFindingPolicy, { loading: handling }] = useMutation(
    HANDLE_ORGANIZATION_FINDING_POLICY,
    {
      onCompleted: (result: {
        handleOrganizationFindingPolicyAcceptance: { success: boolean };
      }): void => {
        handleOrgFindingPolicyNotification(
          result,
          handlePolicyStatus,
          organizationName
        );
      },
      onError: (error: ApolloError): void => {
        handleOrgFindingPolicyError(error);
      },
      refetchQueries: [
        {
          query: GET_ORGANIZATION_POLICIES,
          variables: {
            organizationId,
          },
        },
      ],
    }
  );

  const [deactivateOrganizationFindingPolicy, { loading: deactivating }] =
    useMutation(DEACTIVATE_ORGANIZATION_FINDING_POLICY, {
      onCompleted: (result: {
        deactivateOrganizationFindingPolicy: { success: boolean };
      }): void => {
        handleOrgFindingPolicyDeactivation(result, organizationName);
      },
      onError: (error: ApolloError): void => {
        handleOrgFindingPolicyDeactivationError(error);
      },
      refetchQueries: [
        {
          query: GET_ORGANIZATION_POLICIES,
          variables: {
            organizationId,
          },
        },
      ],
    });

  const [resubmitOrganizationFindingPolicy, { loading: submitting }] =
    useMutation(RESUBMIT_ORGANIZATION_FINDING_POLICY, {
      onCompleted: (result: {
        submitOrganizationFindingPolicy: { success: boolean };
      }): void => {
        handleSubmitOrganizationFindingPolicy(result, organizationName);
      },
      onError: (error: ApolloError): void => {
        handleSubmitOrganizationFindingPolicyError(error);
      },
      refetchQueries: [
        {
          query: GET_ORGANIZATION_POLICIES,
          variables: {
            organizationId,
          },
        },
      ],
    });

  async function handleApprovePolicy(): Promise<void> {
    setHandlePolicyStatus("APPROVED");
    await handleOrgFindingPolicy({
      variables: {
        findingPolicyId: id,
        organizationName,
        status: "APPROVED",
      },
    });
  }

  async function handleRejectPolicy(): Promise<void> {
    setHandlePolicyStatus("REJECTED");
    await handleOrgFindingPolicy({
      variables: {
        findingPolicyId: id,
        organizationName,
        status: "REJECTED",
      },
    });
  }
  async function handleDeactivateFindingPolicy(): Promise<void> {
    await deactivateOrganizationFindingPolicy({
      variables: { findingPolicyId: id, organizationName },
    });
  }
  async function handleResubmitFindingPolicy(): Promise<void> {
    await resubmitOrganizationFindingPolicy({
      variables: { findingPolicyId: id, organizationName },
    });
  }

  const isResubmitable: boolean =
    status === "INACTIVE" || status === "REJECTED";
  const isSubmitted: boolean = status === "SUBMITTED";
  const isApproved: boolean = status === "APPROVED";
  const loading: boolean = deactivating || handling;

  return canDeactivateFindingPolicy || canHandleFindingPolicy ? (
    <Fragment>
      <Button
        disabled={!(isSubmitted && canHandleFindingPolicy) || loading}
        icon={faCheck}
        id={"approveBtn"}
        onClick={function fn(): void {
          void handleApprovePolicy();
        }}
        size={"sm"}
        tooltip={t(`${tPath}tooltip.approveButton`)}
      />
      <Button
        disabled={!(isSubmitted && canHandleFindingPolicy) || loading}
        icon={faTimes}
        id={"rejectBtn"}
        onClick={function fn(): void {
          void handleRejectPolicy();
        }}
        size={"sm"}
        tooltip={t(`${tPath}tooltip.rejectButton`)}
      />
      <ConfirmDialog title={t(`${tPath}submitPolicies.modalTitle`)}>
        {(confirm): ReactNode => {
          function handleClick(): void {
            confirm((): void => {
              void handleResubmitFindingPolicy();
            });
          }

          return (
            <Button
              disabled={
                !(isResubmitable && canResubmitFindingPolicy) || submitting
              }
              icon={faArrowRight}
              id={"resubmitBtn"}
              onClick={handleClick}
              size={"sm"}
              tooltip={t(`${tPath}tooltip.resubmitButton`)}
            />
          );
        }}
      </ConfirmDialog>
      <ConfirmDialog title={t(`${tPath}deactivatePolicies.modalTitle`)}>
        {(confirm): ReactNode => {
          function handleClick(): void {
            confirm((): void => {
              void handleDeactivateFindingPolicy();
            });
          }

          return (
            <Button
              disabled={!(isApproved && canDeactivateFindingPolicy) || loading}
              icon={faBan}
              id={"deactivateBtn"}
              onClick={handleClick}
              size={"sm"}
              tooltip={t(`${tPath}tooltip.deactivateButton`)}
            />
          );
        }}
      </ConfirmDialog>
    </Fragment>
  ) : null;
};

export { PoliciesActions as policiesActions };
