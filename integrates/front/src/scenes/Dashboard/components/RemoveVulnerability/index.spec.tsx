import type { MockedResponse } from "@apollo/client/testing";
import { MockedProvider } from "@apollo/client/testing";
import type { ReactWrapper, ShallowWrapper } from "enzyme";
import { mount, shallow } from "enzyme";
import React from "react";
import { act } from "react-dom/test-utils";
import waitForExpect from "wait-for-expect";

import { REMOVE_VULN_MUTATION } from "./queries";

import { DeleteVulnerabilityModal } from "scenes/Dashboard/components/RemoveVulnerability";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import {
  GET_FINDING_AND_GROUP_INFO,
  GET_FINDING_VULNS,
} from "scenes/Dashboard/containers/VulnerabilitiesView/queries";

describe("Remove vulnerability modal", (): void => {
  it("should return a function", (): void => {
    expect.hasAssertions();
    expect(typeof DeleteVulnerabilityModal).toStrictEqual("function");
  });

  it("should render", (): void => {
    expect.hasAssertions();

    const wrapper: ShallowWrapper = shallow(
      <DeleteVulnerabilityModal
        findingId={""}
        groupName={""}
        id={""}
        onClose={jest.fn()}
        onRemoveVulnRes={jest.fn()}
        open={true}
      />
    );

    expect(wrapper).toHaveLength(1);
  });

  it("should handle proceed", async (): Promise<void> => {
    expect.hasAssertions();

    const handleProceed: jest.Mock = jest.fn();
    const mockMutation: MockedResponse = {
      request: {
        query: REMOVE_VULN_MUTATION,
        variables: {
          findingId: "438679960",
          id: "e76da443-090c-4a8f-803e-ed5857ba7ad1",
          justification: "DUPLICATED",
        },
      },
      result: {
        data: {
          removeVulnerability: {
            success: true,
          },
        },
      },
    };
    const mocks: MockedResponse[] = [
      {
        request: {
          query: GET_FINDING_AND_GROUP_INFO,
          variables: {
            findingId: "438679960",
            groupName: "testgroup",
          },
        },
        result: {
          data: {
            finding: {
              id: "438679960",
              remediated: false,
              state: "false",
              verified: false,
            },
            group: {
              name: "testgroup",
              subscription: "continuous",
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_VULNS,
          variables: {
            canRetrieveZeroRisk: false,
            findingId: "438679960",
          },
        },
        result: {
          data: {
            finding: {
              vulnerabilities: [],
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_HEADER,
          variables: {
            canGetHistoricState: false,
            findingId: "438679960",
          },
        },
        result: {
          data: {
            finding: {
              closedVulns: 0,
              historicState: [],
              id: "438679960",
              openVulns: 0,
              releaseDate: "2019-05-08",
              reportDate: "2019-04-08",
              severityScore: 0,
              state: "closed",
              title: "038. Business information leak",
            },
          },
        },
      },
    ];
    const wrapper: ReactWrapper = mount(
      <MockedProvider addTypename={false} mocks={[mockMutation, ...mocks]}>
        <DeleteVulnerabilityModal
          findingId={"438679960"}
          groupName={"testgroup"}
          id={"e76da443-090c-4a8f-803e-ed5857ba7ad1"}
          onClose={jest.fn()}
          onRemoveVulnRes={handleProceed}
          open={true}
        />
      </MockedProvider>
    );

    wrapper.update();
    wrapper
      .find({ name: "justification" })
      .find("select")
      .first()
      .simulate("change", {
        target: { name: "justification", value: "DUPLICATED" },
      });

    wrapper.update();
    wrapper.find("Formik").first().simulate("submit");

    await act(async (): Promise<void> => {
      await waitForExpect((): void => {
        wrapper.update();

        expect(handleProceed).toHaveBeenCalledTimes(1);
      });
    });
  });

  it("should close on cancel", (): void => {
    expect.hasAssertions();

    const handleClose: jest.Mock = jest.fn();
    const mocks: readonly MockedResponse[] = [];
    const wrapper: ReactWrapper = mount(
      <MockedProvider addTypename={false} mocks={mocks}>
        <DeleteVulnerabilityModal
          findingId={""}
          groupName={""}
          id={""}
          onClose={handleClose}
          onRemoveVulnRes={jest.fn()}
          open={true}
        />
      </MockedProvider>
    );
    const cancelButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Cancel"))
      .at(0);
    cancelButton.simulate("click");

    expect(handleClose.mock.calls).toHaveLength(1);
  });
});
