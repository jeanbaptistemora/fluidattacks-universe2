/*
 * SPDX-FileCopyrightText: 2022 Fluid Attacks <development@fluidattacks.com>
 *
 * SPDX-License-Identifier: MPL-2.0
 */

import type { MockedResponse } from "@apollo/client/testing";
import { MockedProvider } from "@apollo/client/testing";
import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import React from "react";

import { REMOVE_VULN_MUTATION } from "./queries";

import { GET_ME_VULNERABILITIES_ASSIGNED_IDS } from "../Navbar/Tasks/queries";
import { DeleteVulnerabilityModal } from "scenes/Dashboard/components/RemoveVulnerability";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import { GET_ME_VULNERABILITIES_ASSIGNED } from "scenes/Dashboard/containers/Tasks/Vulnerabilities/queries";
import {
  GET_FINDING_AND_GROUP_INFO,
  GET_FINDING_NZR_VULNS,
  GET_FINDING_ZR_VULNS,
} from "scenes/Dashboard/containers/VulnerabilitiesView/queries";

describe("remove vulnerability modal", (): void => {
  it("should return a function", (): void => {
    expect.hasAssertions();
    expect(typeof DeleteVulnerabilityModal).toBe("function");
  });

  it("should handle proceed", async (): Promise<void> => {
    expect.hasAssertions();

    const handleProceed: jest.Mock = jest.fn();
    const mockMutation: MockedResponse = {
      request: {
        query: REMOVE_VULN_MUTATION,
        variables: {
          findingId: "438679960",
          id: "e76da443-090c-4a8f-803e-ed5857ba7ad1",
          justification: "DUPLICATED",
        },
      },
      result: {
        data: {
          removeVulnerability: {
            success: true,
          },
        },
      },
    };
    const mocks: MockedResponse[] = [
      {
        request: {
          query: GET_FINDING_AND_GROUP_INFO,
          variables: {
            findingId: "438679960",
          },
        },
        result: {
          data: {
            finding: {
              id: "438679960",
              releaseDate: "2019-05-08",
              remediated: false,
              state: "false",
              verified: false,
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_ZR_VULNS,
          variables: {
            canRetrieveZeroRisk: false,
            findingId: "438679960",
            first: 100,
            state: "OPEN",
          },
        },
        result: {
          data: {
            finding: {
              zeroRiskConnection: undefined,
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_NZR_VULNS,
          variables: {
            findingId: "438679960",
            first: 100,
            state: "OPEN",
          },
        },
        result: {
          data: {
            finding: {
              vulnerabilitiesConnection: {
                edges: [],
                pageInfo: {
                  endCursor: "test-cursor=",
                  hasNextPage: false,
                },
              },
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_HEADER,
          variables: {
            findingId: "438679960",
          },
        },
        result: {
          data: {
            finding: {
              closedVulns: 0,
              currentState: "APPROVED",
              id: "438679960",
              minTimeToRemediate: 60,
              openVulns: 0,
              releaseDate: "2019-05-08",
              reportDate: "2019-04-08",
              severityScore: 0,
              state: "closed",
              title: "038. Business information leak",
            },
          },
        },
      },
      {
        request: {
          query: GET_ME_VULNERABILITIES_ASSIGNED,
        },
        result: {
          data: {
            me: {
              userEmail: "test@test.test",
              vulnerabilitiesAssigned: [],
            },
          },
        },
      },
      {
        request: {
          query: GET_ME_VULNERABILITIES_ASSIGNED_IDS,
        },
        result: {
          data: {
            me: {
              userEmail: "test@test.test",
              vulnerabilitiesAssigned: [],
            },
          },
        },
      },
    ];

    render(
      <MockedProvider addTypename={false} mocks={[mockMutation, ...mocks]}>
        <DeleteVulnerabilityModal
          findingId={"438679960"}
          id={"e76da443-090c-4a8f-803e-ed5857ba7ad1"}
          onClose={jest.fn()}
          onRemoveVulnRes={handleProceed}
          open={true}
        />
      </MockedProvider>
    );

    userEvent.selectOptions(screen.getByRole("combobox"), ["DUPLICATED"]);
    userEvent.click(screen.getByText("components.modal.confirm"));
    await waitFor((): void => {
      expect(handleProceed).toHaveBeenCalledTimes(1);
    });
  });

  it("should close on cancel", (): void => {
    expect.hasAssertions();

    const handleClose: jest.Mock = jest.fn();
    const mocks: readonly MockedResponse[] = [];
    render(
      <MockedProvider addTypename={false} mocks={mocks}>
        <DeleteVulnerabilityModal
          findingId={""}
          id={""}
          onClose={handleClose}
          onRemoveVulnRes={jest.fn()}
          open={true}
        />
      </MockedProvider>
    );
    userEvent.click(screen.getByText("components.modal.cancel"));

    expect(handleClose).toHaveBeenCalledTimes(1);
  });
});
