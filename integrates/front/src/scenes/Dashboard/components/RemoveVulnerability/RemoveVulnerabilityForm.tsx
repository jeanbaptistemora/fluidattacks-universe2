import { useMutation } from "@apollo/client";
import type { ApolloError } from "@apollo/client";
import type { PureAbility } from "@casl/ability";
import { useAbility } from "@casl/react";
import { Field, Form, Formik } from "formik";
import type { GraphQLError } from "graphql";
import React, { useCallback } from "react";
import { useTranslation } from "react-i18next";

import { REMOVE_VULN_MUTATION } from "scenes/Dashboard/components/RemoveVulnerability/queries";
import type {
  IRemoveVulnAttr,
  IRemoveVulnerabilityFormProps,
} from "scenes/Dashboard/components/RemoveVulnerability/types";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import { GET_FINDING_LOCATIONS } from "scenes/Dashboard/containers/GroupFindingsView/loaders/Locations/queries";
import { GET_FINDING_AND_GROUP_INFO } from "scenes/Dashboard/containers/VulnerabilitiesView/queries";
import { GET_ME_VULNERABILITIES_ASSIGNED } from "scenes/Dashboard/queries";
import { ControlLabel, FormGroup } from "styles/styledComponents";
import { authzPermissionsContext } from "utils/authz/config";
import { FormikDropdown } from "utils/forms/fields";
import { Logger } from "utils/logger";
import { msgError } from "utils/notifications";
import { composeValidators, required } from "utils/validations";

const RemoveVulnerabilityForm: React.FC<IRemoveVulnerabilityFormProps> = ({
  findingId,
  formRef,
  id,
  onRemoveVulnRes,
}: IRemoveVulnerabilityFormProps): JSX.Element => {
  const { t } = useTranslation();
  const permissions: PureAbility<string> = useAbility(authzPermissionsContext);
  const handleDeleteResult = useCallback(
    (data: IRemoveVulnAttr): void => {
      onRemoveVulnRes(data);
    },
    [onRemoveVulnRes]
  );

  const handleDeleteError = useCallback(
    ({ graphQLErrors }: ApolloError): void => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        if (
          error.message === "Invalid, you cannot remove a closed vulnerability"
        ) {
          msgError(t("deleteVulns.closedVuln"));
        } else {
          msgError(t("groupAlerts.errorTextsad"));
          Logger.warning("An error occurred deleting vulnerabilities", error);
        }
      });
    },
    [t]
  );

  const [removeVulnerability] = useMutation(REMOVE_VULN_MUTATION, {
    onCompleted: handleDeleteResult,
    onError: handleDeleteError,
    refetchQueries: [
      {
        query: GET_FINDING_HEADER,
        variables: {
          canGetHistoricState: permissions.can(
            "api_resolvers_finding_historic_state_resolve"
          ),
          findingId,
        },
      },
      {
        query: GET_FINDING_AND_GROUP_INFO,
        variables: {
          findingId,
        },
      },
      {
        query: GET_FINDING_LOCATIONS,
        variables: {
          findingId,
        },
      },
      { query: GET_ME_VULNERABILITIES_ASSIGNED },
    ],
  });

  async function handleDelete(values: {
    justification: string;
  }): Promise<void> {
    await removeVulnerability({
      variables: {
        findingId,
        id,
        justification: values.justification,
      },
    });
  }

  return (
    <Formik
      initialValues={{
        justification: "",
      }}
      innerRef={formRef}
      onSubmit={handleDelete}
    >
      <Form id={"removeVulnerability"}>
        <FormGroup>
          <ControlLabel>{t("searchFindings.delete.justif.label")}</ControlLabel>
          <Field
            component={FormikDropdown}
            name={"justification"}
            validate={composeValidators([required])}
          >
            <option value={""} />
            <option value={"DUPLICATED"}>
              {t("searchFindings.delete.justif.duplicated")}
            </option>
            <option value={"FALSE_POSITIVE"}>
              {t("searchFindings.delete.justif.falsePositive")}
            </option>
            <option value={"REPORTING_ERROR"}>
              {t("deleteVulns.reportingError")}
            </option>
          </Field>
        </FormGroup>
      </Form>
    </Formik>
  );
};

export { RemoveVulnerabilityForm };
