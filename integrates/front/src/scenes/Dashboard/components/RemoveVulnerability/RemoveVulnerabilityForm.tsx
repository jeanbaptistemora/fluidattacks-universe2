import { useMutation } from "@apollo/client";
import type { ApolloError } from "@apollo/client";
import type { PureAbility } from "@casl/ability";
import { useAbility } from "@casl/react";
import { Field, Form, Formik } from "formik";
import type { GraphQLError } from "graphql";
import React, { useCallback } from "react";

import { REMOVE_VULN_MUTATION } from "scenes/Dashboard/components/RemoveVulnerability/queries";
import type {
  IRemoveVulnAttr,
  IRemoveVulnerabilityFormProps,
} from "scenes/Dashboard/components/RemoveVulnerability/types";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import {
  GET_FINDING_AND_GROUP_INFO,
  GET_FINDING_VULNS,
} from "scenes/Dashboard/containers/VulnerabilitiesView/queries";
import { ControlLabel, FormGroup } from "styles/styledComponents";
import { authzPermissionsContext } from "utils/authz/config";
import { FormikDropdown } from "utils/forms/fields";
import { Logger } from "utils/logger";
import { msgError } from "utils/notifications";
import { translate } from "utils/translations/translate";
import { composeValidators, required } from "utils/validations";

export const RemoveVulnerabilityForm: (
  props: IRemoveVulnerabilityFormProps
) => JSX.Element = (props: IRemoveVulnerabilityFormProps): JSX.Element => {
  const { findingId, formRef, groupName, id } = props;

  const permissions: PureAbility<string> = useAbility(authzPermissionsContext);
  const handleDeleteResult: (data: IRemoveVulnAttr) => void = useCallback(
    (data: IRemoveVulnAttr): void => {
      props.onRemoveVulnRes(data);
    },
    [props]
  );

  const handleDeleteError: ({ graphQLErrors }: ApolloError) => void =
    useCallback(({ graphQLErrors }: ApolloError): void => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        switch (error.message) {
          case "Invalid, you cannot remove a closed vulnerability":
            msgError(translate.t("deleteVulns.closedVuln"));
            break;
          default:
            msgError(translate.t("groupAlerts.errorTextsad"));
            Logger.warning("An error occurred deleting vulnerabilities", error);
        }
      });
    }, []);

  const [removeVulnerability] = useMutation(REMOVE_VULN_MUTATION, {
    onCompleted: handleDeleteResult,
    onError: handleDeleteError,
    refetchQueries: [
      {
        query: GET_FINDING_HEADER,
        variables: {
          canGetHistoricState: permissions.can(
            "api_resolvers_finding_historic_state_resolve"
          ),
          findingId,
        },
      },
      {
        query: GET_FINDING_AND_GROUP_INFO,
        variables: {
          findingId,
          groupName,
        },
      },
      {
        query: GET_FINDING_VULNS,
        variables: {
          canRetrieveZeroRisk: permissions.can(
            "api_resolvers_finding_zero_risk_resolve"
          ),
          findingId,
        },
      },
    ],
  });

  async function handleDelete(values: {
    justification: string;
  }): Promise<void> {
    await removeVulnerability({
      variables: {
        findingId,
        id,
        justification: values.justification,
      },
    });
  }

  return (
    <Formik
      initialValues={{
        justification: "",
      }}
      innerRef={formRef}
      onSubmit={handleDelete}
    >
      <Form id={"removeVulnerability"}>
        <FormGroup>
          <ControlLabel>
            {translate.t("searchFindings.delete.justif.label")}
          </ControlLabel>
          <Field
            component={FormikDropdown}
            name={"justification"}
            validate={composeValidators([required])}
          >
            <option value={""} />
            <option value={"DUPLICATED"}>
              {translate.t("searchFindings.delete.justif.duplicated")}
            </option>
            <option value={"FALSE_POSITIVE"}>
              {translate.t("searchFindings.delete.justif.falsePositive")}
            </option>
            <option value={"REPORTING_ERROR"}>
              {translate.t("deleteVulns.reportingError")}
            </option>
          </Field>
        </FormGroup>
      </Form>
    </Formik>
  );
};
