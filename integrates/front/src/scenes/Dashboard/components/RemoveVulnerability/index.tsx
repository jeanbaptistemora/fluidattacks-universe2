import type { FormikProps } from "formik";
import React, { useRef } from "react";

import { Button } from "components/Button";
import { Modal, ModalFooter } from "components/Modal";
import { RemoveVulnerabilityForm } from "scenes/Dashboard/components/RemoveVulnerability/RemoveVulnerabilityForm";
import type { IRemoveVulnerabilityProps } from "scenes/Dashboard/components/RemoveVulnerability/types";
import { translate } from "utils/translations/translate";

const DeleteVulnerabilityModal: React.FC<IRemoveVulnerabilityProps> = (
  props: IRemoveVulnerabilityProps
): JSX.Element => {
  const { open, findingId, id, onClose, onRemoveVulnRes } = props;
  const formRef: React.RefObject<FormikProps<{ justification: string }>> =
    useRef<FormikProps<{ justification: string }>>(null);

  function handleCloseModal(): void {
    onClose();
  }

  function onConfirmDelete(): void {
    if (formRef.current !== null) {
      formRef.current.handleSubmit();
    }
  }

  return (
    <React.StrictMode>
      <Modal
        onClose={handleCloseModal}
        open={open}
        title={translate.t("deleteVulns.title")}
      >
        <RemoveVulnerabilityForm
          findingId={findingId}
          formRef={formRef}
          id={id}
          onClose={onClose}
          onRemoveVulnRes={onRemoveVulnRes}
          open={open}
        />
        <div>
          <div>
            <ModalFooter>
              <Button onClick={handleCloseModal} variant={"secondary"}>
                {translate.t("confirmmodal.cancel")}
              </Button>
              <Button onClick={onConfirmDelete} variant={"primary"}>
                {translate.t("confirmmodal.proceed")}
              </Button>
            </ModalFooter>
          </div>
        </div>
      </Modal>
    </React.StrictMode>
  );
};

export { DeleteVulnerabilityModal };
