import type { ApolloError } from "apollo-client";
import { DELETE_VULN_MUTATION } from "scenes/Dashboard/components/DeleteVulnerability/queries";
import { Dropdown } from "utils/forms/fields";
import { Field } from "redux-form";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import { GET_FINDING_VULN_INFO } from "scenes/Dashboard/containers/VulnerabilitiesView/queries";
import { GenericForm } from "scenes/Dashboard/components/GenericForm";
import type { GraphQLError } from "graphql";
import { Logger } from "utils/logger";
import type { PureAbility } from "@casl/ability";
import React from "react";
import { msgError } from "utils/notifications";
import { required } from "utils/validations";
import { translate } from "utils/translations/translate";
import { useAbility } from "@casl/react";
import { useMutation } from "@apollo/react-hooks";
import { ControlLabel, FormGroup } from "styles/styledComponents";
import type {
  IDeleteVulnAttr,
  IDeleteVulnerabilityProps,
} from "scenes/Dashboard/components/DeleteVulnerability/types";
import { authzGroupContext, authzPermissionsContext } from "utils/authz/config";

export const DeleteVulnerabilityForm: (
  props: IDeleteVulnerabilityProps
) => JSX.Element = (props: IDeleteVulnerabilityProps): JSX.Element => {
  const { findingId, groupName, id } = props;

  const permissions: PureAbility<string> = useAbility(authzPermissionsContext);
  const groupPermissions: PureAbility<string> = useAbility(authzGroupContext);
  const handleDeleteResult: (data: IDeleteVulnAttr) => void = React.useCallback(
    (data: IDeleteVulnAttr): void => {
      props.onDeleteVulnRes(data);
    },
    [props]
  );

  const handleDeleteError: ({
    graphQLErrors,
  }: ApolloError) => void = React.useCallback(
    ({ graphQLErrors }: ApolloError): void => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        Logger.warning("An error occurred deleting vulnerabilities", error);
        msgError(translate.t("groupAlerts.errorTextsad"));
      });
    },
    []
  );

  const [deleteVulnerability] = useMutation(DELETE_VULN_MUTATION, {
    onCompleted: handleDeleteResult,
    onError: handleDeleteError,
    refetchQueries: [
      {
        query: GET_FINDING_HEADER,
        variables: {
          canGetExploit: groupPermissions.can("has_forces"),
          canGetHistoricState: permissions.can(
            "backend_api_resolvers_finding_historic_state_resolve"
          ),
          findingId,
        },
      },
      {
        query: GET_FINDING_VULN_INFO,
        variables: {
          canRetrieveAnalyst: permissions.can(
            "backend_api_resolvers_vulnerability_analyst_resolve"
          ),
          canRetrieveZeroRisk: permissions.can(
            "backend_api_resolvers_finding_zero_risk_resolve"
          ),
          findingId,
          groupName,
        },
      },
    ],
  });

  const handleDelete: (values: {
    justification: string;
  }) => void = React.useCallback(
    (values: { justification: string }): void => {
      void deleteVulnerability({
        variables: {
          findingId,
          id,
          justification: values.justification,
        },
      });
    },
    [deleteVulnerability, findingId, id]
  );

  return (
    <GenericForm name={"deleteVulnerability"} onSubmit={handleDelete}>
      <FormGroup>
        <ControlLabel>
          {translate.t("search_findings.delete.justif.label")}
        </ControlLabel>
        <Field
          component={Dropdown}
          name={"justification"}
          validate={[required]}
        >
          <option value={""} />
          <option value={"DUPLICATED"}>
            {translate.t("search_findings.delete.justif.duplicated")}
          </option>
          <option value={"FALSE_POSITIVE"}>
            {translate.t("search_findings.delete.justif.falsePositive")}
          </option>
          <option value={"REPORTING_ERROR"}>
            {translate.t("deleteVulns.reportingError")}
          </option>
        </Field>
      </FormGroup>
    </GenericForm>
  );
};
