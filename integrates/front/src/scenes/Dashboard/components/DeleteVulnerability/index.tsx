/* tslint:disable jsx-no-multiline-js
 * JSX-NO-MULTILINE-JS: Disabling this rule is necessary for the sake of
 * readability of the code that dynamically renders the fields
 */
import { MutationFunction } from "@apollo/react-common";
import { Mutation } from "@apollo/react-components";
import { PureAbility } from "@casl/ability";
import { useAbility } from "@casl/react";
import { ApolloError } from "apollo-client";
import { GraphQLError } from "graphql";
import _ from "lodash";
import React from "react";
import { Field, submit } from "redux-form";

import { Button } from "components/Button";
import { Modal } from "components/Modal";
import { DELETE_VULN_MUTATION } from "scenes/Dashboard/components/DeleteVulnerability/queries";
import {
  IDeleteVulnAttr,
  IDeleteVulnerabilityProps,
} from "scenes/Dashboard/components/DeleteVulnerability/types";
import { GenericForm } from "scenes/Dashboard/components/GenericForm";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import { dispatch } from "store";
import {
  ButtonToolbar,
  ControlLabel,
  FormGroup,
} from "styles/styledComponents";
import { authzGroupContext, authzPermissionsContext } from "utils/authz/config";
import { Dropdown } from "utils/forms/fields";
import { Logger } from "utils/logger";
import { msgError } from "utils/notifications";
import { translate } from "utils/translations/translate";
import { required } from "utils/validations";

const renderDeleteVulnerabilityForm: ((props: IDeleteVulnerabilityProps) => JSX.Element) =
  (props: IDeleteVulnerabilityProps): JSX.Element => {
    const permissions: PureAbility<string> = useAbility(authzPermissionsContext);
    const groupPermissions: PureAbility<string> = useAbility(authzGroupContext);
    const handleDeleteResult: ((data: IDeleteVulnAttr) => void) = (data: IDeleteVulnAttr): void => {
      props.onDeleteVulnRes(data);
    };

    const handleDeleteError: (({ graphQLErrors }: ApolloError) => void) = (
      { graphQLErrors }: ApolloError,
    ) => {
      graphQLErrors.forEach((error: GraphQLError): void => {
        Logger.warning("An error occurred deleting vulnerabilities", error);
        msgError(translate.t("group_alerts.error_textsad"));
      });
    };

    return (
    <Mutation
      mutation={DELETE_VULN_MUTATION}
      onCompleted={handleDeleteResult}
      onError={handleDeleteError}
      refetchQueries={[
        {
          query: GET_FINDING_HEADER,
          variables: {
            canGetExploit: groupPermissions.can("has_forces"),
            canGetHistoricState: permissions.can("backend_api_resolvers_finding_historic_state_resolve"),
            findingId: props.findingId,
          },
        },
      ]}
    >
      {(deleteVulnerability: MutationFunction): JSX.Element => {

      const handleDelete: ((values: { justification: string }) => void) =
      (values: { justification: string }): void => {
        void deleteVulnerability({ variables:
          {findingId: props.findingId, id: props.id, justification: values.justification}});
      };

      return (
        <GenericForm name="deleteVulnerability" onSubmit={handleDelete}>
          <FormGroup>
            <ControlLabel>{translate.t("search_findings.delete.justif.label")}</ControlLabel>
            <Field name="justification" component={Dropdown} validate={[required]}>
              <option value="" />
              <option value="DUPLICATED">{translate.t("search_findings.delete.justif.duplicated")}</option>
              <option value="FALSE_POSITIVE">{translate.t("search_findings.delete.justif.false_positive")}</option>
              <option value="REPORTING_ERROR">{translate.t("delete_vulns.reporting_error")}</option>
            </Field>
          </FormGroup>
        </GenericForm>
      );
    }}
    </Mutation>
  );
  };

export const deleteVulnerabilityModal: React.FC<IDeleteVulnerabilityProps> =
(props: IDeleteVulnerabilityProps): JSX.Element => {
  const handleCloseModal: (() => void) = (): void => {
    props.onClose();
  };
  const onConfirmDelete: (() => void) = (): void => {
    dispatch(submit("deleteVulnerability"));
  };

  return (
  <React.StrictMode>
    <Modal
      open={props.open}
      headerTitle={translate.t("delete_vulns.title")}
    >
      {renderDeleteVulnerabilityForm(props)}
      <ButtonToolbar >
        <Button onClick={handleCloseModal}>
          {translate.t("confirmmodal.cancel")}
        </Button>
        <Button onClick={onConfirmDelete}>
          {translate.t("confirmmodal.proceed")}
        </Button>
      </ButtonToolbar>
    </Modal>
  </React.StrictMode>
  );
};

export { deleteVulnerabilityModal as DeleteVulnerabilityModal };
