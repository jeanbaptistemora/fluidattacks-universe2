/* eslint-disable @typescript-eslint/no-unsafe-return */
import type { MockedResponse } from "@apollo/client/testing";
import { MockedProvider } from "@apollo/client/testing";
import type { ReactWrapper, ShallowWrapper } from "enzyme";
import { mount, shallow } from "enzyme";
import React from "react";
import { act } from "react-dom/test-utils";
import { Provider } from "react-redux";
import wait from "waait";

import { DELETE_VULN_MUTATION } from "./queries";

import { DeleteVulnerabilityModal } from "scenes/Dashboard/components/DeleteVulnerability";
import { GET_FINDING_HEADER } from "scenes/Dashboard/containers/FindingContent/queries";
import { GET_FINDING_VULN_INFO } from "scenes/Dashboard/containers/VulnerabilitiesView/queries";
import store from "store";

describe("Delete vulnerability modal", (): void => {
  it("should return a function", (): void => {
    expect.hasAssertions();
    expect(typeof DeleteVulnerabilityModal).toStrictEqual("function");
  });

  it("should render", (): void => {
    expect.hasAssertions();

    const wrapper: ShallowWrapper = shallow(
      <Provider store={store}>
        <DeleteVulnerabilityModal
          findingId={""}
          groupName={""}
          id={""}
          onClose={jest.fn()}
          onDeleteVulnRes={jest.fn()}
          open={true}
        />
      </Provider>
    );

    expect(wrapper).toHaveLength(1);
  });

  it("should handle proceed", async (): Promise<void> => {
    expect.hasAssertions();

    const handleProceed: jest.Mock = jest.fn();
    const mockMutation: MockedResponse = {
      request: {
        query: DELETE_VULN_MUTATION,
        variables: {
          findingId: "438679960",
          id: "e76da443-090c-4a8f-803e-ed5857ba7ad1",
          justification: "DUPLICATED",
        },
      },
      result: {
        data: {
          deleteVulnerability: {
            success: true,
          },
        },
      },
    };
    const mocks: MockedResponse[] = [
      {
        request: {
          query: GET_FINDING_VULN_INFO,
          variables: {
            canRetrieveAnalyst: false,
            canRetrieveZeroRisk: false,
            findingId: "438679960",
            groupName: "testgroup",
          },
        },
        result: {
          data: {
            finding: {
              id: "438679960",
              newRemediated: false,
              state: "false",
              verified: false,
              vulnerabilities: [],
            },
            group: {
              name: "testgroup",
              subscription: "continuous",
            },
          },
        },
      },
      {
        request: {
          query: GET_FINDING_HEADER,
          variables: {
            canGetHistoricState: false,
            findingId: "438679960",
          },
        },
        result: {
          data: {
            finding: {
              closedVulns: 0,
              historicState: [],
              id: "438679960",
              openVulns: 0,
              releaseDate: "2019-05-08",
              reportDate: "2019-04-08",
              severityScore: 0,
              state: "closed",
              title: "F038. Fuga de informaci√≥n de negocio",
            },
          },
        },
      },
    ];
    const wrapper: ReactWrapper = mount(
      <Provider store={store}>
        <MockedProvider addTypename={false} mocks={[mockMutation, ...mocks]}>
          <DeleteVulnerabilityModal
            findingId={"438679960"}
            groupName={"testgroup"}
            id={"e76da443-090c-4a8f-803e-ed5857ba7ad1"}
            onClose={jest.fn()}
            onDeleteVulnRes={handleProceed}
            open={true}
          />
        </MockedProvider>
      </Provider>
    );

    wrapper.update();
    const justification = (): ReactWrapper =>
      wrapper.find({ name: "justification" }).find("select").at(0);
    justification().simulate("change", {
      target: { name: "justification", value: "DUPLICATED" },
    });

    wrapper.update();
    const proceedButton = (): ReactWrapper => wrapper.find("Formik");
    proceedButton().simulate("submit");

    await act(async (): Promise<void> => {
      const delay: number = 200;
      await wait(delay);
      wrapper.update();
    });

    expect(handleProceed).toHaveBeenCalledTimes(1);
  });

  it("should close on cancel", (): void => {
    expect.hasAssertions();

    const handleClose: jest.Mock = jest.fn();
    const mocks: readonly MockedResponse[] = [];
    const wrapper: ReactWrapper = mount(
      <Provider store={store}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <DeleteVulnerabilityModal
            findingId={""}
            groupName={""}
            id={""}
            onClose={handleClose}
            onDeleteVulnRes={jest.fn()}
            open={true}
          />
        </MockedProvider>
      </Provider>
    );
    const cancelButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Cancel"))
      .at(0);
    cancelButton.simulate("click");

    expect(handleClose.mock.calls).toHaveLength(1);
  });
});
