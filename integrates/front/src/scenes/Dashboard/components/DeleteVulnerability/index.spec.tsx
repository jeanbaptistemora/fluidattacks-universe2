import { DeleteVulnerabilityModal } from "scenes/Dashboard/components/DeleteVulnerability";
import { MockedProvider } from "@apollo/react-testing";
import type { MockedResponse } from "@apollo/react-testing";
import { Provider } from "react-redux";
import React from "react";
import store from "store";
import type { ReactWrapper, ShallowWrapper } from "enzyme";
import { mount, shallow } from "enzyme";

describe("Delete vulnerability modal", (): void => {
  it("should return a function", (): void => {
    expect.hasAssertions();
    expect(typeof DeleteVulnerabilityModal).toStrictEqual("function");
  });

  it("should render", (): void => {
    expect.hasAssertions();

    const wrapper: ShallowWrapper = shallow(
      <Provider store={store}>
        <DeleteVulnerabilityModal
          findingId={""}
          groupName={""}
          id={""}
          onClose={jest.fn()}
          onDeleteVulnRes={jest.fn()}
          open={true}
        />
      </Provider>
    );

    expect(wrapper).toHaveLength(1);
  });

  it("should close on cancel", (): void => {
    expect.hasAssertions();

    const handleClose: jest.Mock = jest.fn();
    const mocks: readonly MockedResponse[] = [];
    const wrapper: ReactWrapper = mount(
      <Provider store={store}>
        <MockedProvider addTypename={false} mocks={mocks}>
          <DeleteVulnerabilityModal
            findingId={""}
            groupName={""}
            id={""}
            onClose={handleClose}
            onDeleteVulnRes={jest.fn()}
            open={true}
          />
        </MockedProvider>
      </Provider>
    );
    const cancelButton: ReactWrapper = wrapper
      .find("button")
      .findWhere((element: ReactWrapper): boolean => element.contains("Cancel"))
      .at(0);
    cancelButton.simulate("click");

    expect(handleClose.mock.calls).toHaveLength(1);
  });
});
