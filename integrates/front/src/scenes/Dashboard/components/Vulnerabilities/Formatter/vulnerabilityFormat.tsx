/* eslint-disable react/require-default-props */
import _ from "lodash";
import React from "react";

import { Container } from "components/Container";
import { Col, Row } from "components/Layout";
import {
  formatState,
  formatStatus,
} from "scenes/Dashboard/containers/GroupFindingsView/utils";

interface IVulnFormatProps {
  specific: string;
  where: string;
  reattack?: string;
  source?: string;
  status?: string;
  treatment?: string;
}

const VulnerabilityFormat: React.FC<IVulnFormatProps> = ({
  where,
  specific,
  status,
  source,
  reattack,
  treatment,
}: IVulnFormatProps): JSX.Element => {
  return (
    <Container minHeight={"54px"} minWidth={"550px"}>
      <Row>
        <Col>
          {where}
          {"|"}
          {specific}
        </Col>
      </Row>
      <Row align={"center"} justify={"between"}>
        <Col lg={80} md={80} sm={80}>
          {!_.isUndefined(status) && status ? formatState(status) : undefined}
          {!_.isUndefined(source) && source ? formatStatus(source) : undefined}
          {!_.isUndefined(treatment) && treatment
            ? formatStatus(treatment)
            : undefined}
          {!_.isUndefined(reattack) && reattack
            ? formatStatus(reattack)
            : undefined}
        </Col>
      </Row>
    </Container>
  );
};

const vulnerabilityFormatter = ({
  specific,
  where,
  reattack,
  source,
  status,
  treatment,
}: IVulnFormatProps): JSX.Element => {
  return (
    <VulnerabilityFormat
      reattack={reattack}
      source={source}
      specific={specific}
      status={status}
      treatment={treatment}
      where={where}
    />
  );
};

export { VulnerabilityFormat, vulnerabilityFormatter };
