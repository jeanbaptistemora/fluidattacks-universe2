import _ from "lodash";
import React, { useCallback, useMemo, useState } from "react";
import { useTranslation } from "react-i18next";
import { MemoryRouter, Route, Switch } from "react-router-dom";

import { Modal } from "components/Modal";
import { Tab, Tabs } from "components/Tabs";
import { AdditionalInfo } from "scenes/Dashboard/components/Vulnerabilities/AdditionalInfo";
import { CodeInfo } from "scenes/Dashboard/components/Vulnerabilities/CodeInfo";
import { Status } from "scenes/Dashboard/components/Vulnerabilities/Formatter";
import { TreatmentTracking } from "scenes/Dashboard/components/Vulnerabilities/TrackingTreatment";
import type {
  IUpdateVulnerabilityForm,
  IVulnRowAttr,
  IVulnerabilityModalValues,
} from "scenes/Dashboard/components/Vulnerabilities/types";
import { UpdateDescription } from "scenes/Dashboard/components/Vulnerabilities/UpdateDescription";
import {
  UpdateDescriptionContext,
  defaultValue,
} from "scenes/Dashboard/components/Vulnerabilities/VulnerabilityModal/context";
import { TabContent } from "styles/styledComponents";

interface IAdditionalInformationModal {
  canDisplayHacker: boolean;
  canRemoveVulnsTags: boolean;
  canRequestZeroRiskVuln: boolean;
  canSeeSource: boolean;
  canUpdateVulnsTreatment: boolean;
  clearSelectedVulns: () => void;
  closeAdditionalInfoModal: () => void;
  currentRow: IVulnRowAttr;
  findingId: string;
  groupName: string;
  isAdditionalInfoOpen: boolean;
  isFindingReleased: boolean;
  refetchData: () => void;
}

const AdditionalInformation: React.FC<IAdditionalInformationModal> = ({
  canDisplayHacker,
  canRemoveVulnsTags,
  canRequestZeroRiskVuln,
  canSeeSource,
  canUpdateVulnsTreatment,
  clearSelectedVulns,
  closeAdditionalInfoModal,
  currentRow,
  findingId,
  groupName,
  isAdditionalInfoOpen,
  isFindingReleased,
  refetchData,
}: IAdditionalInformationModal): JSX.Element => {
  const { t } = useTranslation();
  const [treatmentForm, setTreatmentForm] =
    useState<IUpdateVulnerabilityForm>(defaultValue);
  const value = useMemo(
    (): IVulnerabilityModalValues => [treatmentForm, setTreatmentForm],
    [treatmentForm, setTreatmentForm]
  );

  const onClose: () => void = useCallback((): void => {
    setTreatmentForm(defaultValue);
    closeAdditionalInfoModal();
  }, [closeAdditionalInfoModal]);

  const labels = useMemo(
    (): Record<string, string> => ({
      REJECTED: t("searchFindings.tabVuln.rejected"),
      SAFE: t("searchFindings.tabVuln.closed"),
      SUBMITTED: t("searchFindings.tabVuln.submitted"),
      VULNERABLE: t("searchFindings.tabVuln.open"),
    }),
    [t]
  );

  return (
    <Modal
      minWidth={700}
      onClose={onClose}
      open={isAdditionalInfoOpen}
      title={<Status status={labels[currentRow.state]} />}
    >
      <UpdateDescriptionContext.Provider value={value}>
        {_.isUndefined(currentRow) ? undefined : (
          <MemoryRouter initialEntries={["/details"]} initialIndex={0}>
            <Tabs>
              <Tab
                id={"vulnerabilityDetailsTab"}
                link={"/details"}
                tooltip={t("searchFindings.tabVuln.contentTab.details.tooltip")}
              >
                {t("searchFindings.tabVuln.contentTab.details.title")}
              </Tab>
              {_.isNull(currentRow.snippet) ||
              _.isUndefined(currentRow.snippet) ? undefined : (
                <Tab
                  id={"vulnerabilityCodeTab"}
                  link={"/code"}
                  tooltip={t("searchFindings.tabVuln.contentTab.code.tooltip")}
                >
                  {t("searchFindings.tabVuln.contentTab.code.title")}
                </Tab>
              )}
              {currentRow.state === "VULNERABLE" &&
              isFindingReleased &&
              (canUpdateVulnsTreatment ||
                canRequestZeroRiskVuln ||
                canRemoveVulnsTags) ? (
                <Tab
                  id={"vulnerabilityTreatmentsTab"}
                  link={"/treatments"}
                  tooltip={t(
                    "searchFindings.tabVuln.contentTab.treatments.tooltip"
                  )}
                >
                  {t("searchFindings.tabVuln.contentTab.treatments.title")}
                </Tab>
              ) : undefined}
              {currentRow.state === "VULNERABLE" && isFindingReleased ? (
                <Tab
                  id={"vulnerability-tracking-treatmentsTab"}
                  link={"/trackingtreatments"}
                  tooltip={t(
                    "searchFindings.tabVuln.contentTab.tracking.tooltip"
                  )}
                >
                  {t("searchFindings.tabVuln.contentTab.tracking.title")}
                </Tab>
              ) : undefined}
            </Tabs>
            <TabContent>
              <Switch>
                <Route path={"/details"}>
                  <AdditionalInfo
                    canRetrieveHacker={canDisplayHacker}
                    canSeeSource={canSeeSource}
                    refetchData={refetchData}
                    vulnerability={currentRow}
                  />
                </Route>
                <Route path={"/code"}>
                  <CodeInfo vulnerability={currentRow} />
                </Route>
                <Route path={"/treatments"}>
                  <UpdateDescription
                    findingId={findingId}
                    groupName={groupName}
                    handleClearSelected={clearSelectedVulns}
                    handleCloseModal={onClose}
                    refetchData={refetchData}
                    vulnerabilities={[currentRow]}
                  />
                </Route>
                <Route path={"/trackingtreatments"}>
                  <TreatmentTracking vulnId={currentRow.id} />
                </Route>
              </Switch>
            </TabContent>
          </MemoryRouter>
        )}
      </UpdateDescriptionContext.Provider>
    </Modal>
  );
};

export type { IAdditionalInformationModal };
export { AdditionalInformation };
