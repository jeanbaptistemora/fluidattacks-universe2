.with_nix: &with_nix
  tags: [autoscaling]
  image: "${CI_REGISTRY_IMAGE}/nix:${CI_JOB_NAME}"
  needs: []
  script:
    - ./build.sh "${CI_JOB_NAME% *}"
  interruptible: true

.integrates_commit_pattern: &integrates_commit_pattern '$CI_COMMIT_TITLE =~ /^(all|integrates)/'

.in_everywhere_except_periodic_jobs_and_mrs_integrates: &in_everywhere_except_periodic_jobs_and_mrs_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern

.in_master_except_periodic_jobs_integrates: &in_master_except_periodic_jobs_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: *integrates_commit_pattern

.in_dev_branch_integrates: &in_dev_branch_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern

.in_dev_and_master_branch_integrates: &in_dev_and_master_branch_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern

.in_master_branch_integrates: &in_master_branch_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern

.in_master_branch_and_schedules_integrates: &in_master_branch_and_schedules_integrates
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: *integrates_commit_pattern

.in_mrs_and_master_branch_integrates: &in_mrs_and_master_branch_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_BRANCH != "master"'
      when: never
    - if: *integrates_commit_pattern

.in_schedule_nightly_build_integrates: &in_schedule_nightly_build_integrates
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - if:  '$integrates_nightly_build == null'
      when: never
    - when: always

.analytics_template: &analytics_template
  <<: *with_nix
  artifacts:
    expire_in: 1 week
    paths:
      - integrates/analytics
    when: on_success
  stage: analytics
  tags: [autoscaling]

.integrates_scheduler_prod_template: &integrates_scheduler_prod_template
  <<: *with_nix
  interruptible: false
  stage: scheduler
  image: "${CI_REGISTRY_IMAGE}/nix:integrates_scheduler_prod"
  tags: [autoscaling-large]
  script:
    - ./build.sh integrates_scheduler_prod "${CI_JOB_NAME/scheduler_/}"

integrates_analytics_make_documents_dev:
  <<: *analytics_template
  <<: *in_dev_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:integrates_analytics_make_documents_dev"
  parallel: 3

integrates_analytics_make_documents_prod:
  <<: *analytics_template
  <<: *in_master_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:integrates_analytics_make_documents_prod"
  parallel: 6

integrates_analytics_make_documents_prod_schedule:
  <<: *analytics_template
  image: "${CI_REGISTRY_IMAGE}/nix:integrates_analytics_make_documents_prod_schedule"
  interruptible: false
  only:
    refs: [schedules]
    variables: [$analytics]
  parallel: 6

integrates_analytics_make_snapshots_prod_schedule:
  <<: *analytics_template
  interruptible: false
  only:
    refs: [schedules]
    variables: [$analytics]

integrates_subscriptions_trigger_user_to_entity_report_dev:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  stage: subscriptions

integrates_subscriptions_trigger_user_to_entity_report_prod_schedule:
  <<: *with_nix
  interruptible: false
  stage: subscriptions
  only:
    refs: [schedules]
    variables: [$subscriptions]

scheduler_delete_pending_projects:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$delete_pending_projects]

scheduler_reset_expired_accepted_findings:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$reset_expired_accepted_findings]

scheduler_update_indicators:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$update_indicators]

scheduler_update_portfolios:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$update_portfolios]

scheduler_get_new_releases:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_new_releases]

scheduler_get_remediated_findings:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_remediated_findings]

scheduler_get_new_vulnerabilities:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$get_new_vulnerabilities]

scheduler_send_unsolved_to_all:
  <<: *integrates_scheduler_prod_template
  only:
    refs: [schedules]
    variables: [$send_unsolved_to_all]

integrates_build_front:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: build
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - integrates/app/static/
    when: on_success

integrates_build_mobile_android:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: build
  needs: [integrates_deploy_mobile_ota]
  tags: [autoscaling-large]
  artifacts:
    expire_in: 1 day
    paths:
      - integrates/mobile/output/
    when: on_success

integrates_build_lambdas:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: build
  artifacts:
    expire_in: 1 day
    paths:
      - integrates/lambda/packages/
    when: on_success

integrates_coverage_report:
  <<: *with_nix
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: *integrates_commit_pattern
      when: always
  needs:
    - integrates_test_back
    - integrates_test_front
    - integrates_test_mobile
  stage: external
  retry: 1

integrates_clean_registries:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: post-deploy

integrates_deploy_k8s_back_ephemeral:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  stage: deploy-app
  needs: [integrates_build_container_app]
  retry: 1
  environment:
    name: "ephemeral/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.integrates.env.fluidattacks.com/integrates"
    on_stop: integrates_deploy_k8s_stop_ephemeral

# Take into account that changing this job name impacts the rotation of
#   AWS secrets at serves.
# The rotation script looks the last integrates_deploy_k8s_back execution
#   and decides if keys should be rotated or not.
# This is done to avoid keys expiration on the current integrates deployment
#   in case the continuous delivery system at Integrates is failing
# Please follow the link and adjust if needed, thanks!
#   https://gitlab.com/fluidattacks/serves/-/blob/0cb7556d236a3668bdcae64027941565e92131ad/build/include/helpers.sh#L180
integrates_deploy_k8s_back:
  <<: *with_nix
  <<: *in_master_except_periodic_jobs_integrates
  stage: deploy-app
  needs: [integrates_build_container_app]
  retry: 1
  environment:
    name: "production"
    url: "https://fluidattacks.com/integrates"

integrates_deploy_k8s_stop_ephemeral:
  <<: *with_nix
  stage: deploy-app
  retry: 1
  environment:
    name: "ephemeral/$CI_COMMIT_REF_SLUG"
    action: stop
  rules:
    - if: '$CI_PIPELINE_SOURCE == "master"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: *integrates_commit_pattern
      when: manual

integrates_deploy_mobile_ota:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: pre-build

integrates_deploy_mobile_playstore:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-app
  needs: [integrates_build_mobile_android]
  dependencies:
    - integrates_build_mobile_android

integrates_deploy_permissions_matrix:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: deploy-app
  artifacts:
    expire_in: 1 day
    paths:
      - integrates/deploy/permissions-matrix/group_level.html
      - integrates/deploy/permissions-matrix/organization_level.html
      - integrates/deploy/permissions-matrix/user_level.html
    when: on_success

integrates_build_container_app:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: build
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - integrates/version.txt
      - integrates/django-apps/packages/
    when: on_success

integrates_deploy_front:
  <<: *with_nix
  <<: *in_everywhere_except_periodic_jobs_and_mrs_integrates
  stage: deploy-app
  needs: [integrates_build_front]

integrates_functional_tests_back:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  retry: 1

integrates_functional_tests_dev:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  image: "${CI_REGISTRY_IMAGE}/nix:integrates_functional_tests_dev"
  needs:
    - integrates_deploy_k8s_back_ephemeral
    - integrates_deploy_front
  stage: post-deploy
  retry: 1
  parallel: 2
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - integrates/test/functional/screenshots/
    when: always

integrates_functional_tests_prod:
  <<: *with_nix
  <<: *in_master_branch_integrates
  needs:
    - integrates_deploy_k8s_back
    - integrates_deploy_front
  stage: post-deploy
  retry: 1
  parallel: 2
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - integrates/test/functional/screenshots/
    when: always

integrates_functional_tests_mobile:
  <<: *with_nix
  <<: *in_dev_branch_integrates
  needs:
    - integrates_deploy_k8s_back_ephemeral
    - integrates_deploy_mobile_ota
  stage: post-deploy

integrates_infra_backup_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_backup_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_database_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_database_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_cache_db_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_cache_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_django_db_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_django_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_devicefarm_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_devicefarm_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_resources_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  needs:
    - integrates_build_lambdas
  stage: deploy-infra

integrates_infra_resources_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  needs:
    - integrates_build_lambdas
  stage: test-infra

integrates_infra_secret_management_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_secret_management_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_cluster_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_cluster_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_infra_ephemeral_deploy:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: deploy-infra

integrates_infra_ephemeral_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-infra

integrates_lint_back:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

integrates_lint_front:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

integrates_lint_graphics:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

integrates_lint_mobile:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

integrates_lint_secrets:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: lint-code

integrates_renew_certificates:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: post-deploy
  environment:
    name: "ephemeral/renew-ephemeral-cert"
    auto_stop_in: 1 hour

integrates_rotate_jwt_token:
  <<: *with_nix
  <<: *in_schedule_nightly_build_integrates
  stage: rotation

integrates_test_back:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  retry: 1
  artifacts:
    name: "coverage_xml_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - integrates/coverage.xml
    expire_in: 1 week

integrates_test_front:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - integrates/front/coverage.lcov
    expire_in: 1 week

integrates_test_mobile:
  <<: *with_nix
  <<: *in_dev_and_master_branch_integrates
  stage: test-code
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - integrates/mobile/coverage.lcov
    expire_in: 1 week

common_send_new_release_email:
  <<: *with_nix
  <<: *in_master_branch_integrates
  stage: post-deploy
  needs:
    - integrates_deploy_k8s_back
