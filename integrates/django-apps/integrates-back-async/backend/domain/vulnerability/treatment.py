# Standard library
from typing import (
    Awaitable,
    Dict,
    List,
    cast,
)

# Third party
from aioextensions import collect

# Local
from backend import (
    util,
)
from backend.dal import vulnerability as vuln_dal
from backend.typing import (
    Finding,
    Historic,
)
from backend.exceptions import VulnNotFound
from backend.utils import (
    datetime as datetime_utils,
    validations,
)
from .vulnerability import (
    get_by_ids,
)
from .utils import (
    validate_acceptation,
    validate_vulns_in_finding,
)


async def add_vuln_treatment(
    *,
    finding_id: str,
    updated_values: Dict[str, str],
    vuln: Dict[str, Finding],
    user_email: str,
    date: str,
) -> bool:
    updated_values = util.update_treatment_values(updated_values)
    new_treatment = updated_values['treatment']
    new_state = {
        'date': date,
        'treatment': new_treatment,
    }

    if user_email:
        new_state['user'] = user_email
    if new_treatment != 'NEW':
        validations.validate_fields([updated_values['justification']])
        validations.validate_field_length(updated_values['justification'], 200)
        new_state['justification'] = updated_values['justification']

    if new_treatment == 'ACCEPTED':
        new_state['acceptance_date'] = updated_values['acceptance_date']
    elif new_treatment == 'ACCEPTED_UNDEFINED':
        new_state['acceptance_status'] = updated_values['acceptance_status']

    historic_treatment = cast(
        List[Dict[str, str]],
        vuln.get('historic_treatment', [])
    )
    if historic_treatment:
        historic_treatment.append(new_state)
    else:
        historic_treatment = [new_state]

    return await vuln_dal.update(
        finding_id,
        str(vuln.get('UUID', '')),
        {'historic_treatment': historic_treatment}
    )


async def handle_vulns_acceptation(
    *,
    accepted_vulns: List[str],
    finding_id: str,
    justification: str,
    rejected_vulns: List[str],
    user_email: str,
) -> bool:
    validations.validate_field_length(justification, 200)
    validations.validate_fields([justification])
    vuln_ids: List[str] = accepted_vulns + rejected_vulns
    today = datetime_utils.get_as_str(datetime_utils.get_now())
    coroutines: List[Awaitable[bool]] = []

    vulnerabilities = await get_by_ids(vuln_ids)
    validate_vulns_in_finding(finding_id, vulnerabilities)
    vulnerabilities = [validate_acceptation(vuln) for vuln in vulnerabilities]

    if not vulnerabilities:
        raise VulnNotFound()

    new_treatment = {
        'treatment': 'ACCEPTED_UNDEFINED',
        'justification': justification,
        'user': user_email,
        'date': today
    }
    if rejected_vulns:
        treatments = [
            {**new_treatment, 'acceptance_status': 'REJECTED'},
            {'treatment': 'NEW', 'date': today, 'user': user_email},
        ]
        coroutines.extend([
            handle_vuln_acceptation(
                finding_id=finding_id,
                new_treatments=treatments,
                vuln=vuln,
            )
            for vuln, vuln_id in zip(vulnerabilities, vuln_ids)
            if vuln_id in rejected_vulns
        ])
    if accepted_vulns:
        treatments = [{**new_treatment, 'acceptance_status': 'APPROVED'}]
        coroutines.extend([
            handle_vuln_acceptation(
                finding_id=finding_id,
                new_treatments=treatments,
                vuln=vuln,
            )
            for vuln, vuln_id in zip(vulnerabilities, vuln_ids)
            if vuln_id in accepted_vulns
        ])

    return all(await collect(coroutines))


async def handle_vuln_acceptation(
    *,
    finding_id: str,
    new_treatments: Historic,
    vuln: Dict[str, Finding],
) -> bool:
    historic_treatment = cast(
        Historic,
        vuln.get('historic_treatment', [])
    )
    if historic_treatment:
        historic_treatment.extend(new_treatments)
    else:
        historic_treatment = new_treatments

    return await vuln_dal.update(
        finding_id,
        str(vuln.get('UUID', '')),
        {'historic_treatment': historic_treatment}
    )
