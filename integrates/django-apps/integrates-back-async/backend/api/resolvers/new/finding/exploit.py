# Standard
from typing import cast, Dict, Optional

# Third party
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend.decorators import get_entity_cache_async, require_forces
from backend.typing import Finding
from backend.utils import findings as finding_utils


@require_forces
@get_entity_cache_async
async def resolve(
    parent: Finding,
    _info: GraphQLResolveInfo,
    **_kwargs: None
) -> str:
    finding_id: str = cast(Dict[str, str], parent)['id']
    group_name: str = cast(Dict[str, str], parent)['project_name']
    exploit_url: Optional[str] = cast(
        Dict[str, Dict[str, Optional[str]]], parent
    )['exploit']['url']

    if exploit_url:
        return await finding_utils.get_exploit_from_file(
            group_name,
            finding_id,
            exploit_url
        )

    return ''
