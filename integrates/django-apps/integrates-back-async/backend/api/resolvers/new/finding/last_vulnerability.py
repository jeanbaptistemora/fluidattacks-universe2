# Standard
from datetime import datetime
from typing import cast, Dict

# Third party
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend import util
from backend.decorators import get_entity_cache_async
from backend.typing import Finding
from backend.utils import datetime as datetime_utils


@get_entity_cache_async
async def resolve(
    parent: Finding,
    _info: GraphQLResolveInfo,
    **_kwargs: None
) -> int:
    last_vulnerability: datetime = cast(
        Dict[str, datetime],
        parent
    )['last_vulnerability']

    return util.calculate_datediff_since(
        datetime_utils.get_from_str(
            str(last_vulnerability).split(' ')[0],
            date_format='%Y-%m-%d',
        )
    ).days
