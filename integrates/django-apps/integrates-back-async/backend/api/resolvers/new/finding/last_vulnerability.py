# Standard
from datetime import datetime
from typing import cast, Dict

# Third party
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend import util
from backend.decorators import get_entity_cache_async
from backend.typing import Finding
from backend.utils import datetime as datetime_utils


@get_entity_cache_async
async def resolve(
    parent: Finding,
    info: GraphQLResolveInfo,
    **_kwargs: None
) -> int:
    # Temporary while migrating finding resolvers
    finding_id: str = cast(Dict[str, str], parent)['id']
    finding = await info.context.loaders['finding'].load(finding_id)

    last_vulnerability: datetime = finding['last_vulnerability']

    return util.calculate_datediff_since(
        datetime_utils.get_from_str(
            str(last_vulnerability).split(' ')[0],
            date_format='%Y-%m-%d',
        )
    ).days
