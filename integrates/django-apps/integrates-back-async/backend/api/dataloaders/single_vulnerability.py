# pylint: disable=method-hidden

from typing import List, NamedTuple, cast

# Third party libraries
from aioextensions import (
    collect,
)
from aiodataloader import DataLoader

from backend.domain import vulnerability as vuln_domain
from backend.typing import (
    Historic as HistoricType,
    Vulnerability
)


class LoadedVuln(NamedTuple):
    UUID: str
    id: str
    finding_id: str
    vuln_type: str
    where: str
    source: str
    specific: str
    historic_state: HistoricType
    current_state: str
    current_approval_status: str
    last_analyst: str
    analyst: str
    last_approved_status: str
    remediated: bool
    severity: str
    tag: str
    tags: List[str]
    treatment_manager: str
    verification: str
    historic_verification: HistoricType


async def _batch_load_fn(vuln_uuids: List[str]) -> List[Vulnerability]:
    loaded_vulns: List[Vulnerability] = []

    vulnerabilities = await collect(tuple(map(vuln_domain.get, vuln_uuids)))

    for vuln in vulnerabilities:
        loaded_vulns.append(dict(
            UUID=cast(str, vuln.get('UUID', '')),
            id=cast(str, vuln.get('UUID', '')),
            finding_id=cast(str, vuln.get('finding_id', '')),
            vuln_type=cast(str, vuln.get('vuln_type', '')),
            where=cast(str, vuln.get('where', '')),
            source=cast(str, vuln.get('source', 'integrates')),
            specific=cast(str, vuln.get('specific', '')),
            historic_state=cast(
                HistoricType,
                vuln.get('historic_state', [{}])
            ),
            current_state=cast(
                str,
                cast(
                    HistoricType,
                    vuln.get('historic_state', [{}])
                )[-1].get('state', '')
            ),
            current_approval_status=cast(
                str,
                cast(
                    HistoricType,
                    vuln.get('historic_state', [{}])
                )[-1].get('approval_status', '')
            ),
            last_analyst=vuln_domain.get_last_approved_analyst(vuln),
            analyst=cast(
                str,
                cast(
                    HistoricType,
                    vuln.get('historic_state', [{}])
                )[-1].get('analyst', '')
            ),
            last_approved_status=vuln_domain.get_last_approved_status(
                vuln
            ),
            remediated=cast(
                HistoricType,
                vuln.get('historic_verification', [{}])
            )[-1].get('status') == 'REQUESTED',
            severity=cast(str, vuln.get('severity', '')),
            tag=', '.join(cast(List[str], vuln.get('tag', ''))),
            tags=cast(List[str], vuln.get('tag', [])),
            treatment_manager=cast(str, vuln.get('treatment_manager', '')),
            verification=cast(
                HistoricType,
                vuln.get(
                    'historic_verification',
                    [{}]
                )
            )[-1].get('status', '').capitalize(),
            historic_verification=cast(
                HistoricType,
                vuln.get('historic_verification', [])
            )
        ))

    return loaded_vulns


# pylint: disable=too-few-public-methods
class SingleVulnerabilityLoader(DataLoader):  # type: ignore
    async def batch_load_fn(
            self, vuln_uuids: List[str]) -> List[Vulnerability]:
        return await _batch_load_fn(vuln_uuids)
