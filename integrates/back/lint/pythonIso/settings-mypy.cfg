[mypy]
# The current python implementation have some missing generics.
# For example asyncio.Queue is not generic but mypy thinkgs it is.
#
# Disabling because doing this is a runtime syntax error:
#   var: asyncio.Queue[str]
disallow_any_generics = false
# Some third party libraries have untyped classes.
#
# Disabling to avoid doing:
#   class SkimsClass(ThirdPartyClassWithoutTyping)  # type: ignore
disallow_subclassing_any = false
# Some third party libraries are untyped.
#
# Disabling them to avoid doing:
#   third_party_function()  # type: ignore
disallow_untyped_calls = false
# Some third party libraries are untyped.
#
# Disabling to avoid doing:
#   @third_party_lib_decorator  # type: ignore
disallow_untyped_decorators = false
# Sometimes mypy do not find libraries and that's not an error condition
# as long as the runtime interpreter does
ignore_missing_imports = true
strict = true

warn_return_any = false


#Set for the api modules
[mypy-api.mutations.*]
ignore_errors = true

[mypy-api.resolvers.forces_execution.*]
ignore_errors = true
#end of set

[mypy-batch.actions.*]
ignore_errors = true

[mypy-db_model.findings.*]
ignore_errors = true

[mypy-events.domain.*]
ignore_errors = true

[mypy-groups.*]
ignore_errors = true

[mypy-newutils.events.*]
ignore_errors = true

[mypy-organizations.*]
ignore_errors = true

[mypy-redshift.*]
ignore_errors = true

[mypy-resources.*]
ignore_errors = true

[mypy-schedulers.*]
ignore_errors = true

[mypy-toe.*]
ignore_errors = true

[mypy-unreliable_indicators.*]
ignore_errors = true

[mypy-users.*]
ignore_errors = true
