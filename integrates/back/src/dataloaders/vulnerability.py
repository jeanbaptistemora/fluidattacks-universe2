from aiodataloader import (
    DataLoader,
)
from aioextensions import (
    collect,
)
from dataloaders.utils import (
    format_vulnerability,
    format_vulnerability_state,
    format_vulnerability_treatment,
    format_vulnerability_verification,
    format_vulnerability_zero_risk,
    get_optional,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
    VulnerabilityTreatment,
    VulnerabilityVerification,
    VulnerabilityZeroRisk,
)
from typing import (
    Any,
    Dict,
    List,
    Tuple,
)
from vulnerabilities import (
    domain as vulns_domain,
)


class VulnerabilityLoader(DataLoader):
    # pylint: disable=no-self-use,method-hidden
    async def batch_load_fn(
        self, vuln_uuids: List[str]
    ) -> List[Dict[str, Any]]:
        return await collect(tuple(map(vulns_domain.get, vuln_uuids)))


class VulnerabilityTypedLoader(DataLoader):
    def __init__(self, dataloader: DataLoader) -> None:
        super().__init__()
        self.dataloader = dataloader

    def clear(self, key: str) -> DataLoader:
        self.dataloader.clear(key)
        return super().clear(key)

    # pylint: disable=method-hidden
    async def batch_load_fn(self, ids: List[str]) -> Tuple[Vulnerability, ...]:
        return tuple(
            format_vulnerability(vulnerability)
            for vulnerability in await self.dataloader.load_many(ids)
        )


class VulnerabilityHistoricStateLoader(DataLoader):
    def __init__(self, dataloader: DataLoader) -> None:
        super().__init__()
        self.dataloader = dataloader

    # pylint: disable=method-hidden
    async def batch_load_fn(
        self, ids: Tuple[str, ...]
    ) -> Tuple[Tuple[VulnerabilityState, ...], ...]:
        return tuple(
            tuple(
                format_vulnerability_state(state)
                for state in vulnerability["historic_state"]
            )
            for vulnerability in await self.dataloader.load_many(ids)
        )


class VulnerabilityHistoricTreatmentLoader(DataLoader):
    def __init__(self, dataloader: DataLoader) -> None:
        super().__init__()
        self.dataloader = dataloader

    # pylint: disable=method-hidden
    async def batch_load_fn(
        self, ids: Tuple[str, ...]
    ) -> Tuple[Tuple[VulnerabilityTreatment, ...], ...]:
        return tuple(
            tuple(
                format_vulnerability_treatment(treatment)
                for treatment in get_optional(
                    "historic_treatment", vulnerability, tuple()
                )
            )
            for vulnerability in await self.dataloader.load_many(ids)
        )


class VulnerabilityHistoricVerificationLoader(DataLoader):
    def __init__(self, dataloader: DataLoader) -> None:
        super().__init__()
        self.dataloader = dataloader

    # pylint: disable=method-hidden
    async def batch_load_fn(
        self, ids: Tuple[str, ...]
    ) -> Tuple[Tuple[VulnerabilityVerification, ...], ...]:
        return tuple(
            tuple(
                format_vulnerability_verification(verification)
                for verification in get_optional(
                    "historic_verification", vulnerability, tuple()
                )
            )
            for vulnerability in await self.dataloader.load_many(ids)
        )


class VulnerabilityHistoricZeroRiskLoader(DataLoader):
    def __init__(self, dataloader: DataLoader) -> None:
        super().__init__()
        self.dataloader = dataloader

    # pylint: disable=method-hidden
    async def batch_load_fn(
        self, ids: Tuple[str, ...]
    ) -> Tuple[Tuple[VulnerabilityZeroRisk, ...], ...]:
        return tuple(
            tuple(
                format_vulnerability_zero_risk(zero_risk)
                for zero_risk in get_optional(
                    "historic_zero_risk", vulnerability, tuple()
                )
            )
            for vulnerability in await self.dataloader.load_many(ids)
        )
