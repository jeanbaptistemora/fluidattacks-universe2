from aiodataloader import (
    DataLoader,
)
from ariadne.utils import (
    convert_kwargs_to_snake_case,
)
from custom_types import (
    SimplePayload,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    logs as logs_utils,
    requests as requests_utils,
    token as token_utils,
)
from newutils.utils import (
    resolve_kwargs,
)
from redis_cluster.operations import (
    redis_del_by_deps_soon,
)
from typing import (
    Any,
    Dict,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
)
async def mutate(
    _parent: None, info: GraphQLResolveInfo, **kwargs: Any
) -> SimplePayload:
    uuid: str = kwargs["id"]
    finding_id: str = kwargs["finding_id"]
    justification: str = kwargs["justification"]

    user_data: Dict[str, str] = await token_utils.get_jwt_content(info.context)
    user_email: str = user_data.get("user_email", "")

    finding_loader: DataLoader = info.context.loaders.finding
    finding_data = await finding_loader.load(finding_id)
    group_name: str = resolve_kwargs(finding_data)
    source = requests_utils.get_source(info.context)
    success: bool = await vulns_domain.delete_vulnerability(
        info.context.loaders,
        finding_id,
        uuid,
        justification,
        user_email,
        source,
    )

    if success:
        info.context.loaders.finding_vulns_all.clear(finding_id)
        info.context.loaders.finding_vulns_nzr.clear(finding_id)
        info.context.loaders.finding_vulns.clear(finding_id)
        redis_del_by_deps_soon("delete_vulnerability", finding_id=finding_id)
        logs_utils.cloudwatch_log(
            info.context,
            (
                f"Security: Deleted vulnerability: {uuid} from {group_name} "
                "group successfully"
            ),
        )
    else:
        logs_utils.cloudwatch_log(
            info.context,
            (
                f"Security: Attempted to delete vulnerability: {uuid} from "
                f"{group_name} group"
            ),
        )
    return SimplePayload(success=success)
