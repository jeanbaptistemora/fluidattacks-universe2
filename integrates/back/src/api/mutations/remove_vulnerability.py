from api import (
    APP_EXCEPTIONS,
)
from ariadne.utils import (
    convert_kwargs_to_snake_case,
)
from custom_types import (
    SimplePayload,
)
from db_model.enums import (
    StateRemovalJustification,
)
from db_model.findings.types import (
    Finding,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
    require_report_vulnerabilities,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    logs as logs_utils,
    requests as requests_utils,
    token as token_utils,
)
from redis_cluster.operations import (
    redis_del_by_deps_soon,
)
from typing import (
    Any,
)
from unreliable_indicators.enums import (
    EntityDependency,
)
from unreliable_indicators.operations import (
    update_unreliable_indicators_by_deps,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_report_vulnerabilities,
)
async def mutate(
    _parent: None, info: GraphQLResolveInfo, **kwargs: Any
) -> SimplePayload:
    try:
        vuln_id: str = kwargs["id"]
        finding_id: str = kwargs["finding_id"]
        justification = StateRemovalJustification[kwargs["justification"]]
        user_data = await token_utils.get_jwt_content(info.context)
        user_email = user_data["user_email"]
        finding_loader = info.context.loaders.finding
        finding: Finding = await finding_loader.load(finding_id)
        source = requests_utils.get_source_new(info.context)
        success = await vulns_domain.remove_vulnerability(
            info.context.loaders,
            finding_id,
            vuln_id,
            justification,
            user_email,
            source,
        )
        if success:
            redis_del_by_deps_soon(
                "remove_vulnerability", finding_id=finding_id
            )
            await update_unreliable_indicators_by_deps(
                EntityDependency.remove_vulnerability,
                finding_ids=[finding_id],
            )
            logs_utils.cloudwatch_log(
                info.context,
                f"Security: Removed vulnerability: {vuln_id} from "
                f"{finding.group_name} group successfully",
            )
        else:
            logs_utils.cloudwatch_log(
                info.context,
                f"Security: Attempted to remove vulnerability: {vuln_id} from "
                f"{finding.group_name} group",
            )
    except APP_EXCEPTIONS:
        logs_utils.cloudwatch_log(
            info.context,
            f"Security: Attempted to remove vulnerability: {vuln_id} from "
            f"{finding.group_name} group",
        )
        raise

    return SimplePayload(success=success)
