from .payloads.types import (
    SimplePayload,
)
from api import (
    APP_EXCEPTIONS,
)
from ariadne.utils import (
    convert_kwargs_to_snake_case,
)
from dataloaders import (
    Dataloaders,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
)
from decimal import (
    Decimal,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
)
from findings import (
    domain as findings_domain,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from mailer import (
    findings as findings_mail,
)
from newutils import (
    logs as logs_utils,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
)
async def mutate(
    _parent: None,
    info: GraphQLResolveInfo,
    finding_id: str,
    **_kwargs: None,
) -> SimplePayload:
    try:
        loaders: Dataloaders = info.context.loaders
        finding = await findings_domain.get_finding(loaders, finding_id)
        vulnerabilities = await loaders.finding_vulnerabilities_all.load(
            finding_id
        )
        severity_score: Decimal = findings_domain.get_severity_score(
            finding.severity
        )
        severity_level: str = findings_domain.get_severity_level(
            severity_score
        )
        group_name = finding.group_name
        vulns_props: dict[str, dict[str, dict[str, str]]] = {}
        for vuln in vulnerabilities:
            if vuln.state.status == VulnerabilityStateStatus.VULNERABLE:
                repo = await findings_domain.repo_subtitle(
                    loaders, vuln, group_name
                )
                vuln_dict = vulns_props.get(repo, {})
                vuln_dict.update(
                    {
                        f"{vuln.state.where}{vuln.state.specific}": {
                            "location": vuln.state.where,
                            "specific": vuln.state.specific,
                            "source": vuln.state.source.value,
                        },
                    }
                )
                vulns_props[repo] = dict(sorted(vuln_dict.items()))

        await findings_mail.send_mail_vulnerability_report(
            loaders=loaders,
            group_name=group_name,
            finding_title=finding.title,
            finding_id=finding_id,
            vulnerabilities_properties=vulns_props,
            responsible=finding.hacker_email,
            severity_score=severity_score,
            severity_level=severity_level,
        )

    except APP_EXCEPTIONS:
        logs_utils.cloudwatch_log(
            info.context,
            "Security: Attempted to manually send vulnerability report"
            f"notification in finding {finding_id} ",
        )
        raise

    return SimplePayload(success=True)
