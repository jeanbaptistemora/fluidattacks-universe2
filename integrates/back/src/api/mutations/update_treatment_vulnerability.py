from ariadne import (
    convert_kwargs_to_snake_case,
)
from custom_exceptions import (
    InvalidSeverity,
)
from custom_types import (
    SimplePayload as SimplePayloadType,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from redis_cluster.operations import (
    redis_del_by_deps,
)
from typing import (
    Any,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: Any, info: GraphQLResolveInfo, **parameters: Any
) -> SimplePayloadType:
    min_value = 0
    max_value = 1000000000
    finding_id = parameters.get("finding_id", "")
    vuln_uuid = parameters["vulnerability_id"]
    severity = parameters.get("severity")
    if (
        severity
        and severity != -1
        and (min_value > severity or severity > max_value)
    ):
        raise InvalidSeverity([min_value, max_value])

    result_update_vuln = await vulns_domain.update_treatments(
        vuln_uuid,
        finding_id,
        parameters,
        info,
    )

    if result_update_vuln:
        info.context.loaders.finding.clear(finding_id)
        info.context.loaders.vulnerability.clear(vuln_uuid)
        await redis_del_by_deps(
            "update_treatment_vulnerability",
            finding_id=finding_id,
        )

    return SimplePayloadType(success=result_update_vuln)
