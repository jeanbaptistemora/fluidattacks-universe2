from api.mutations import (
    DownloadFilePayload,
)
from ariadne import (
    convert_kwargs_to_snake_case,
)
from custom_exceptions import (
    ErrorDownloadingFile,
    ErrorUploadingFileS3,
)
from dataloaders import (
    Dataloaders,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from findings import (
    domain as findings_domain,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
import logging
import logging.config
from newutils import (
    analytics,
    logs as logs_utils,
)
from sessions import (
    domain as sessions_domain,
)
from typing import (
    Any,
)
from vulnerability_files import (
    domain as vuln_files_domain,
)

# Constants
LOGGER = logging.getLogger(__name__)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: None, info: GraphQLResolveInfo, **kwargs: Any
) -> DownloadFilePayload:
    finding_id = kwargs.get("finding_id", "")
    user_info = await sessions_domain.get_jwt_content(info.context)
    user_email = user_info["user_email"]
    loaders: Dataloaders = info.context.loaders
    finding = await findings_domain.get_finding(loaders, finding_id)
    group_name: str = finding.group_name
    payload_data = {
        "finding_id": finding_id,
        "group_name": group_name,
        "user_email": user_email,
    }

    try:
        file_path = await vuln_files_domain.get_vulnerabilities_file(
            loaders, finding_id, group_name
        )
        if file_path:
            msg = (
                "Security: Downloaded vulnerabilities"
                f"file in finding {finding_id} successfully"
            )
            logs_utils.cloudwatch_log(info.context, msg)
            await analytics.mixpanel_track(
                user_email,
                "DownloadVulnFile",
                Group=group_name.upper(),
                FileName=file_path,
            )
        else:
            raise ErrorDownloadingFile()
    except (ErrorDownloadingFile, ErrorUploadingFileS3):
        msg_cw = (
            f"Security: Attempted to download vulnerabilities file "
            f"associated to finding {finding_id} in group {group_name}"
        )
        logs_utils.cloudwatch_log(info.context, msg_cw)
        msg_log = (
            "An error occurred uploading a vuln file to S3 "
            "associated to finding in group"
        )
        LOGGER.error(msg_log, extra={"extra": payload_data})
        raise

    return DownloadFilePayload(success=True, url=str(file_path))
