from ariadne import (
    convert_kwargs_to_snake_case,
)
from custom_exceptions import (
    ErrorUploadingFileS3,
)
from custom_types import (
    DownloadFilePayload as DownloadFilePayloadType,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
import logging
import logging.config
from newutils import (
    analytics,
    logs as logs_utils,
    token as token_utils,
)
from newutils.utils import (
    get_key_or_fallback,
)
from settings import (
    LOGGING,
)
from typing import (
    Any,
)
from vulnerabilities import (
    domain as vulns_domain,
)

logging.config.dictConfig(LOGGING)

# Constants
LOGGER = logging.getLogger(__name__)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: Any, info: GraphQLResolveInfo, **kwargs: Any
) -> DownloadFilePayloadType:
    success = False
    finding_id = kwargs.get("finding_id", "")
    user_info = await token_utils.get_jwt_content(info.context)
    user_email = user_info["user_email"]
    finding_loader = info.context.loaders.finding
    finding_data = await finding_loader.load(finding_id)
    group_name = get_key_or_fallback(finding_data)
    payload_data = {
        "finding_id": finding_id,
        "group_name": group_name,
        "user_email": user_email,
    }

    try:
        file_path = await vulns_domain.get_vulnerabilities_file(
            info.context.loaders, finding_id, group_name
        )
        if file_path:
            msg = (
                "Security: Downloaded vulnerabilities"
                f"file in finding {finding_id} successfully"
            )
            logs_utils.cloudwatch_log(info.context, msg)
            await analytics.mixpanel_track(
                user_email,
                "DownloadVulnFile",
                Group=group_name.upper(),
                FileName=file_path,
            )
            success = True
        else:
            msg = (
                f"A CloudFront error occurred while getting the vuln file "
                f"associated to finding {finding_id} in group {group_name}"
            )
            LOGGER.error(msg, extra={"extra": payload_data})
    except ErrorUploadingFileS3:
        msg_cw = (
            f"Security: Attempted to download vulnerabilities file "
            f"associated to finding {finding_id} in group {group_name}"
        )
        logs_utils.cloudwatch_log(info.context, msg_cw)
        msg_log = (
            "An error occurred uploading a vuln file to S3 "
            "associated to finding in group"
        )
        LOGGER.error(msg_log, extra={"extra": payload_data})

    return DownloadFilePayloadType(success=success, url=str(file_path))
