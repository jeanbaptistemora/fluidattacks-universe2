from api import (
    APP_EXCEPTIONS,
)
from ariadne.utils import (
    convert_kwargs_to_snake_case,
)
from custom_types import (
    SimplePayload,
)
from db_model.findings.types import (
    Finding,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    logs as logs_utils,
)
from newutils.utils import (
    get_key_or_fallback,
)
from redis_cluster.operations import (
    redis_del_by_deps,
)
from typing import (
    Dict,
    Tuple,
)
from unreliable_indicators.enums import (
    EntityDependency,
)
from unreliable_indicators.operations import (
    update_unreliable_indicators_by_deps,
)
from vulnerabilities.domain.rebase import (
    rebase as rebase_vulnerability,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
)
async def mutate(
    _parent: None,
    info: GraphQLResolveInfo,
    **parameters: Dict,
) -> SimplePayload:
    try:
        vulnerability_commit: str = get_key_or_fallback(
            parameters, "vulnerability_commit", "vuln_commit"
        )
        vulnerability_id: str = get_key_or_fallback(
            parameters, "vulnerability_id", "vuln_id"
        )
        vulnerability_where: str = get_key_or_fallback(
            parameters, "vulnerability_where", "vuln_where"
        )
        vulnerability_specific: str = get_key_or_fallback(
            parameters, "vulnerability_specific", "vuln_specific"
        )
        loaders = info.context.loaders
        vulnerability: Vulnerability = await loaders.vulnerability_typed.load(
            vulnerability_id
        )
        finding_id: str = vulnerability.finding_id
        finding: Finding = await loaders.finding.load(finding_id)
        group_name: str = finding.group_name

        vulns_data: Tuple[
            Vulnerability, ...
        ] = await loaders.finding_vulns_nzr_typed.load(finding_id)
        success: bool = await rebase_vulnerability(
            finding_id=finding_id,
            finding_vulns_data=vulns_data,
            vulnerability_commit=vulnerability_commit,
            vulnerability_type=vulnerability.type,
            vulnerability_id=vulnerability_id,
            vulnerability_where=vulnerability_where,
            vulnerability_specific=vulnerability_specific,
        )

        if success:
            await redis_del_by_deps(
                "update_vulnerability_commit",
                finding_id=finding_id,
                group_name=group_name,
            )
            await update_unreliable_indicators_by_deps(
                EntityDependency.update_vulnerability_commit,
                finding_id=finding_id,
            )
            logs_utils.cloudwatch_log(
                info.context,
                (
                    "Security: Commit successfully updated in vulnerability "
                    f"{vulnerability_id}"
                ),
            )

    except APP_EXCEPTIONS:
        logs_utils.cloudwatch_log(
            info.context,
            (
                "Security: Attempted to update commit in vulnerability "
                f"{vulnerability_id}"
            ),
        )
        raise

    return SimplePayload(success=success)
