from ariadne.utils import (
    convert_kwargs_to_snake_case,
)
from custom_types import (
    SimplePayload,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils.utils import (
    get_key_or_fallback,
)
from redis_cluster.operations import (
    redis_del_by_deps,
)
from typing import (
    Dict,
)
from vulnerabilities.domain.rebase import (
    rebase as rebase_vulnerability,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
)
async def mutate(
    _parent: None,
    info: GraphQLResolveInfo,
    **parameters: Dict,
) -> SimplePayload:
    vulnerability_commit: str = get_key_or_fallback(
        parameters, "vulnerability_commit", "vuln_commit"
    )
    vulnerability_id: str = get_key_or_fallback(
        parameters, "vulnerability_id", "vuln_id"
    )
    vulnerability_where: str = get_key_or_fallback(
        parameters, "vulnerability_where", "vuln_where"
    )
    vulnerability_specific: str = get_key_or_fallback(
        parameters, "vulnerability_specific", "vuln_specific"
    )
    vuln_data = await info.context.loaders.vulnerability.load(vulnerability_id)
    finding_id: str = vuln_data["finding_id"]
    finding_loader = info.context.loaders.finding
    finding_data = await finding_loader.load(finding_id)
    group_name = get_key_or_fallback(finding_data)

    vulns_data = await info.context.loaders.finding_vulns_nzr.load(finding_id)
    success: bool = await rebase_vulnerability(
        finding_id=finding_id,
        finding_vulns_data=vulns_data,
        vulnerability_commit=vulnerability_commit,
        vulnerability_type=vuln_data["vuln_type"],
        vulnerability_id=vulnerability_id,
        vulnerability_where=vulnerability_where,
        vulnerability_specific=vulnerability_specific,
    )

    if success:
        await redis_del_by_deps(
            "update_vulnerability_commit",
            finding_id=finding_id,
            group_name=group_name,
        )

    return SimplePayload(success=success)
