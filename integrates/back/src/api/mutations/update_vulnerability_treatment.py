from .payloads.types import (
    SimplePayload,
)
from ariadne import (
    convert_kwargs_to_snake_case,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    logs as logs_utils,
)
from newutils.utils import (
    duplicate_dict_keys,
)
from typing import (
    Any,
)
from vulnerabilities import (
    domain as vulns_domain,
)
from vulnerabilities.domain.utils import (
    format_tags,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: None, info: GraphQLResolveInfo, **parameters: Any
) -> SimplePayload:
    finding_id: str = parameters.get("finding_id", "")
    vulnerability_id: str = parameters["vulnerability_id"]

    severity = parameters.get("severity")

    if "external_bug_tracking_system" in parameters:
        parameters = duplicate_dict_keys(
            parameters, "external_bug_tracking_system", "external_bts"
        )
        del parameters["external_bug_tracking_system"]
    new_tags = parameters.get("tag", "").split(",")
    formatted_tags = format_tags(tags=new_tags)
    # Perform validations
    await vulns_domain.update_metadata(
        loaders=info.context.loaders,
        vulnerability_id=vulnerability_id,
        finding_id=finding_id,
        bug_tracking_system_url=parameters.get("external_bts"),
        custom_severity=severity,
        tags_to_append=formatted_tags,
    )
    logs_utils.cloudwatch_log(
        info.context,
        f"Security: Updated vulnerability: "
        f"{vulnerability_id} from finding: {finding_id} successfully",
    )

    return SimplePayload(success=True)
