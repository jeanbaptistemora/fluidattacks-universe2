from ariadne import (
    convert_kwargs_to_snake_case,
)
from custom_exceptions import (
    InvalidSeverity,
)
from custom_types import (
    SimplePayload as SimplePayloadType,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
import html
from newutils import (
    logs as logs_utils,
    validations,
)
from newutils.utils import (
    duplicate_dict_keys,
)
from redis_cluster.operations import (
    redis_del_by_deps,
)
from typing import (
    Any,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: Any, info: GraphQLResolveInfo, **parameters: Any
) -> SimplePayloadType:
    finding_id: str = parameters.get("finding_id", "")
    vulnerability_id: str = parameters["vulnerability_id"]

    # Perform validations
    severity = parameters.get("severity")
    min_value: int = 0
    max_value: int = 1000000000
    if (
        severity
        and severity != -1
        and (min_value > severity or severity > max_value)
    ):
        raise InvalidSeverity([min_value, max_value])

    if "external_bug_tracking_system" in parameters:
        parameters = duplicate_dict_keys(
            parameters, "external_bug_tracking_system", "external_bts"
        )
        del parameters["external_bug_tracking_system"]
    if "external_bts" in parameters:
        validations.validate_url(str(parameters.get("external_bts", "")))
        validations.validate_field_length(
            str(parameters.get("external_bts", "")), 80
        )

    new_tags = parameters.get("tag", "").split(",")
    validations.validate_fields(new_tags)
    formatted_tags = [
        html.unescape(tag.strip()) for tag in new_tags if tag.strip()
    ]
    for tag in formatted_tags:
        validations.validate_field_length(tag, 30)

    await vulns_domain.update_metadata(
        loaders=info.context.loaders,
        vulnerability_id=vulnerability_id,
        finding_id=finding_id,
        bug_tracking_system_url=parameters.get("external_bts"),
        custom_severity=severity,
        tags_to_append=formatted_tags,
    )
    logs_utils.cloudwatch_log(
        info.context,
        f"Security: Updated vulnerability: "
        f"{vulnerability_id} from finding: {finding_id} successfully",
    )
    info.context.loaders.vulnerability.clear(vulnerability_id)
    await redis_del_by_deps(
        "update_vulnerability_treatment",
        finding_id=finding_id,
    )

    return SimplePayloadType(success=True)
