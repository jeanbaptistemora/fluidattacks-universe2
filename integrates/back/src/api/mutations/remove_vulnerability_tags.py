from api.mutations import (
    SimplePayload as SimplePayloadType,
)
from ariadne import (
    convert_kwargs_to_snake_case,
)
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
    require_login,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    logs as logs_utils,
)
from redis_cluster.operations import (
    redis_del_by_deps_soon,
)
from typing import (
    Any,
    List,
)
from vulnerabilities import (
    domain as vulns_domain,
)


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_asm,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    finding_id: str,
    vulnerabilities: List[str],
    tag: str = "",
) -> SimplePayloadType:
    await vulns_domain.remove_vulnerability_tags(
        loaders=info.context.loaders,
        vuln_ids=set(vulnerabilities),
        finding_id=finding_id,
        tag_to_remove=tag,
    )
    redis_del_by_deps_soon(
        "remove_vulnerability_tags",
        finding_id=finding_id,
    )
    logs_utils.cloudwatch_log(info.context, f"Removed tags from {finding_id}")

    return SimplePayloadType(success=True)
