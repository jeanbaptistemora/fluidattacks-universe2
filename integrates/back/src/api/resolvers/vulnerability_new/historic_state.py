from aiodataloader import (
    DataLoader,
)
from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Dict,
    List,
    Tuple,
)


async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> List[Dict[str, str]]:
    historic_loader: DataLoader = info.context.loaders.vuln_historic_state_new
    historic: Tuple[VulnerabilityState, ...] = await historic_loader.load(
        parent.uuid
    )
    return [
        {
            "analyst": state.modified_by,
            "approvalStatus": state.approval_status.value
            if state.approval_status
            else "",
            "date": datetime_utils.get_as_str(
                datetime.fromisoformat(state.modified_date)
            ),
            "justification": state.justification.value
            if state.justification
            else "",
            "source": state.source.value.lower(),
            "state": state.status.value.lower(),
        }
        for state in historic
    ]
