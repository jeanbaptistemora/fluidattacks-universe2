from aiodataloader import (
    DataLoader,
)
from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Dict,
    List,
    Tuple,
)


def _format_state(state: VulnerabilityState) -> Dict[str, str]:
    formatted = {
        "analyst": state.modified_by,
        "date": datetime_utils.get_as_str(
            datetime.fromisoformat(state.modified_date)
        ),
        "source": state.source.value.lower(),
        "state": state.status.value.lower(),
    }
    if state.justification:
        formatted["justification"] = state.justification

    return formatted


async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> List[Dict[str, str]]:
    historic_loader: DataLoader = info.context.loaders.vuln_historic_state_new
    historic: Tuple[VulnerabilityState, ...] = await historic_loader.load(
        parent.id
    )
    return [_format_state(state) for state in historic]
