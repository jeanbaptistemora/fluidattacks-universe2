from aiodataloader import (
    DataLoader,
)
from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityVerification,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Tuple,
)
from vulnerabilities import (
    domain as vulns_domain,
)


async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> str:
    historic_loader: DataLoader = info.context.vuln_historic_verification_new
    historic: Tuple[VulnerabilityVerification] = await historic_loader.load(
        parent.uuid
    )
    date_iso8601utc = vulns_domain.get_last_reattack_date_new(historic, parent)
    return datetime_utils.get_as_str(datetime.fromisoformat(date_iso8601utc))
