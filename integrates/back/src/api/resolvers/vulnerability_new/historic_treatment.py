from aiodataloader import (
    DataLoader,
)
from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityTreatment,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Dict,
    List,
    Tuple,
)


async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> List[Dict[str, str]]:
    historic_loader: DataLoader = (
        info.context.loaders.vuln_historic_treatment_new
    )
    historic: Tuple[VulnerabilityTreatment, ...] = await historic_loader.load(
        parent.uuid
    )
    return [
        {
            "acceptanceDate": datetime_utils.get_as_str(
                datetime.fromisoformat(treatment.accepted_until)
            )
            if treatment.accepted_until
            else None,
            "acceptanceStatus": treatment.acceptance_status.value
            if treatment.acceptance_status
            else None,
            "date": datetime_utils.get_as_str(
                datetime.fromisoformat(treatment.modified_date)
            )
            if treatment.modified_date
            else None,
            "justification": treatment.justification,
            "treatment": treatment.status.value,
            "treatmentManager": treatment.manager,
            "user": treatment.modified_by,
        }
        for treatment in historic
    ]
