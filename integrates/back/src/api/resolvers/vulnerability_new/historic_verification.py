from aiodataloader import (
    DataLoader,
)
from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityVerification,
)
from decorators import (
    enforce_group_level_auth_async,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Dict,
    List,
    Tuple,
)


@enforce_group_level_auth_async
async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> List[Dict[str, str]]:
    historic_loader: DataLoader = (
        info.context.loaders.vuln_historic_verification_new
    )
    historic: Tuple[
        VulnerabilityVerification, ...
    ] = await historic_loader.load(parent.uuid)
    return [
        {
            "date": datetime_utils.get_as_str(
                datetime.fromisoformat(verification.modified_date)
            ),
            "status": verification.status.value,
        }
        for verification in historic
    ]
