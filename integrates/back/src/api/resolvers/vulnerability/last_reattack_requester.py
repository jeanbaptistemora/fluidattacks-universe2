from context import (
    FI_API_STATUS,
)
from custom_types import (
    Historic,
    Vulnerability,
)
from db_model.findings.types import (
    FindingVerification,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    vulnerabilities as vulns_utils,
)
from typing import (
    cast,
    Tuple,
)


async def resolve(
    parent: Vulnerability, info: GraphQLResolveInfo, **_kwargs: None
) -> str:
    if FI_API_STATUS == "migration":
        finding_historic_verification_loader = (
            info.context.loaders.finding_historic_verification_new
        )
        historic_verification: Tuple[
            FindingVerification, ...
        ] = await finding_historic_verification_loader.load(
            parent["finding_id"]
        )
        requesters = vulns_utils.get_reattack_requesters_new(
            historic_verification, {parent["id"]}
        )
    else:
        finding_loader = info.context.loaders.finding
        finding = await finding_loader.load(parent["finding_id"])
        requesters = vulns_utils.get_reattack_requesters(
            cast(Historic, finding["historic_verification"]),
            [parent["id"]],
        )

    return requesters[0] if requesters else ""
