from custom_types import (
    Vulnerability,
)
from db_model.findings.types import (
    FindingVerification,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
import newrelic.agent
from newutils import (
    vulnerabilities as vulns_utils,
)
from typing import (
    Any,
    Dict,
    Tuple,
    Union,
)


def _get_parent_attr(
    parent: Union[Vulnerability, Dict[str, Any]], attr: str
) -> Any:
    if isinstance(parent, dict):
        return parent.get(attr)
    return getattr(parent, attr)


@newrelic.agent.function_trace()
async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> str:
    loaders = info.context.loaders
    historic_verification: Tuple[
        FindingVerification, ...
    ] = await loaders.finding_historic_verification.load(
        _get_parent_attr(parent, "finding_id")
    )
    requesters = vulns_utils.get_reattack_requesters(
        historic_verification, {_get_parent_attr(parent, "id")}
    )
    return requesters[0] if requesters else ""
