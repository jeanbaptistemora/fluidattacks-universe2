from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityVerification,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Any,
    Dict,
    Tuple,
    Union,
)
from vulnerabilities import (
    domain as vulns_domain,
)


async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> str:
    if isinstance(parent, dict):
        return parent["last_requested_reattack_date"]

    loaders = info.context.loaders
    historic: Tuple[
        VulnerabilityVerification, ...
    ] = loaders.vulnerability_historic_verification.load(parent.id)
    date_iso8601utc = vulns_domain.get_last_requested_reattack_date_new(
        historic, parent
    )
    return datetime_utils.get_as_str(datetime.fromisoformat(date_iso8601utc))
