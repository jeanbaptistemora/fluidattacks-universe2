from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils.datetime import (
    convert_from_iso_str,
)
from typing import (
    Any,
    Dict,
    Tuple,
    Union,
)


async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> str:
    if isinstance(parent, dict):
        return parent["report_date"]

    loaders = info.context.loaders
    historic: Tuple[
        VulnerabilityState, ...
    ] = await loaders.vulnerability_historic_state.load(parent.id)
    return convert_from_iso_str(historic[0].modified_date)
