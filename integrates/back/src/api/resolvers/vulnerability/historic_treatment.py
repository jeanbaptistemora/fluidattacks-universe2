from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityTreatment,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils.datetime import (
    convert_from_iso_str,
)
from typing import (
    Any,
    Dict,
    Tuple,
    Union,
)


def _format_treatment(treatment: VulnerabilityTreatment) -> Dict[str, str]:
    formatted = {
        "date": convert_from_iso_str(treatment.modified_date),
        "treatment": treatment.status.value,
    }
    if treatment.modified_by:
        formatted["user"] = treatment.modified_by
    if treatment.manager:
        formatted["treatmentManager"] = treatment.manager
    if treatment.accepted_until:
        formatted["acceptanceDate"] = convert_from_iso_str(
            treatment.accepted_until
        )
    if treatment.acceptance_status:
        formatted["acceptanceStatus"] = treatment.acceptance_status.value
    if treatment.justification:
        formatted["justification"] = treatment.justification

    return formatted


async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> Tuple[Dict[str, str], ...]:
    if isinstance(parent, dict):
        return parent["historic_treatment"]

    loaders = info.context.loaders
    historic: Tuple[
        VulnerabilityTreatment, ...
    ] = await loaders.vulnerability_historic_treatment.load(parent.id)
    return tuple(_format_treatment(treatment) for treatment in historic)
