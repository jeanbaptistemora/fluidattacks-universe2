from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils.datetime import (
    convert_from_iso_str,
)
from typing import (
    Any,
    Dict,
    Tuple,
    Union,
)


def _format_state(state: VulnerabilityState) -> Dict[str, str]:
    formatted = {
        "analyst": state.modified_by,
        "date": convert_from_iso_str(state.modified_date),
        "source": state.source.value.lower(),
        "state": state.status.value.lower(),
    }
    if state.justification:
        formatted["justification"] = state.justification.value

    return formatted


async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> Tuple[Dict[str, str], ...]:
    if isinstance(parent, dict):
        return parent["historic_state"]

    loaders = info.context.loaders
    historic: Tuple[
        VulnerabilityState, ...
    ] = await loaders.vulnerability_historic_state.load(parent.id)
    return tuple(_format_state(state) for state in historic)
