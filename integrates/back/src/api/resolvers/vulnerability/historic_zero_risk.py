from datetime import (
    datetime,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityZeroRisk,
)
from decorators import (
    enforce_group_level_auth_async,
)
from graphql.type.definition import (
    GraphQLResolveInfo,
)
from newutils import (
    datetime as datetime_utils,
)
from typing import (
    Any,
    Dict,
    List,
    Tuple,
    Union,
)


@enforce_group_level_auth_async
async def resolve(
    parent: Union[Vulnerability, Dict[str, Any]],
    info: GraphQLResolveInfo,
    **_kwargs: None,
) -> List[Dict[str, str]]:
    if isinstance(parent, dict):
        return parent["historic_zero_risk"]

    loaders = info.context.loaders
    historic: Tuple[
        VulnerabilityZeroRisk, ...
    ] = loaders.vulnerability_historic_zero_risk.load(parent.id)
    return [
        {
            "date": datetime_utils.get_as_str(
                datetime.fromisoformat(zero_risk.modified_date)
            ),
            "status": zero_risk.status.value,
        }
        for zero_risk in historic
    ]
