"Vulnerability type definition"
type Vulnerability {
  "Date when the vulnerability was closed"
  closingDate: String
  "Commit hash to get to the vulnerability"
  commitHash: String
  "Current state of the vulnerability"
  currentState: String!
  "How many requested reattacks this vulnerability has"
  cycles: Int!
  "Remediation effectiveness"
  efficacy: Float!
  "Identifier of the last Event keeping this Vulnerability's reattack on hold"
  eventId: String
  "External Bug Tracking System URL"
  externalBugTrackingSystem: String
  "The Finding this Vulnerability is associated with"
  finding: Finding!
  "Identifier of the Finding this Vulnerability is associated with"
  findingId: String!
  "Identifier of the Group this Vulnerability is associated with"
  groupName: String!
  "Last user who changed the vulnerability's state"
  hacker: String
  "Historic configuration of the Vulnerability"
  historicState: [VulnerabilityHistoricState!]
  "Historic configuration of the treatments this Vulnerability has had"
  historicTreatment: [Treatment!]
  """
  Historic configuration of the verifications/remediations this
  Vulnerability has had
  """
  historicVerification: [Verification!]
    @deprecated(reason: "This field will be removed after 2023/02/12.")
  "Historic configuration of the zero risk requests this Vulnerability has had"
  historicZeroRisk: [Verification!]
    @deprecated(reason: "This field will be removed after 2023/02/12.")
  "Identifier of the Vulnerability"
  id: String!
  "Fluid attacks reattack date"
  lastReattackDate: String
  "Requester from last requested reattack"
  lastReattackRequester: String
  "Date from last requested reattack"
  lastRequestedReattackDate: String
  "Date from last state status"
  lastStateDate: String
  "Date from last treatment status"
  lastTreatmentDate: String
  "Date from last verification status"
  lastVerificationDate: String
  "Is this vulnerability currently requested for a reattack/remediation?"
  remediated: Boolean!
  "Report date of this vulnerability"
  reportDate: String!
  "Nickname of the root where the Vulnerability was found"
  rootNickname: String
  "CVSS score"
  severity: String
  """
  If the vulnerability is of type lines, it returns a portion of
  code where the vulnerability was found
  """
  snippet: Snippet
  "Detection source of the Vulnerability"
  source: String!
  """
  Specific location of the Vulnerability, can be a line of code,
  a field or a port
  """
  specific: String!
  "Stream to get to the vulnerability"
  stream: String
  "All the tags associated with this Vulnerability in concatenated string form"
  tag: String
  "List of all the tags associated with this Vulnerability"
  tags: [String!]
  "Treatment status"
  treatment: VulnerabilityTreatment
  "Treatment acceptance date"
  treatmentAcceptanceDate: String
  "Treatment acceptance status"
  treatmentAcceptanceStatus: String
  "Email address of the user who is assigned"
  treatmentAssigned: String
  "Treatment changes"
  treatmentChanges: Int!
  "Treatment justification"
  treatmentJustification: String
  "Email address of the user who assign treatment"
  treatmentUser: String
  "Verification status"
  verification: String
  "Vulnerability type"
  vulnerabilityType: String!
  "General location of the Vulnerability, can be a file, an URL or an IP"
  where: String!
  "Current zero risk status"
  zeroRisk: String
}

"Vulnerability Edge type definition"
type VulnerabilityEdge implements Edge {
  "The cursor for the edge"
  cursor: String!
  "The node with the payload"
  node: Vulnerability!
}

"Vulnerabilities Connection type definition"
type VulnerabilitiesConnection {
  "A list of Vulnerabilities edges"
  edges: [VulnerabilityEdge]!
  "Information to aid in pagination"
  pageInfo: PageInfo!
  "Total vulnerabilities found"
  total: Int
}
