"Main Query object"
type Query {
  "Billing entity"
  billing: Billing

  "Enrollment entity"
  enrollment(
    "User email"
    email: String!
  ): Enrollment!

  "Environment URL entity"
  environmentUrl(
    "Name of the group to query"
    groupName: String!
    "Id of url"
    urlId: String!
  ): GitEnvironmentUrl

  "Event entity"
  event(
    "ID of the event to query"
    identifier: String!
  ): Event

  "List of events from a specific group"
  events(
    "Name of the group to query"
    groupName: String
  ): [Event]

  "Finding entity"
  finding(
    "ID of the finding to query"
    identifier: String!
  ): Finding

  "Get Forces execution"
  forcesExecution(
    "Name of the group where Forces was executed"
    groupName: String
    "ID of the forcesExecution"
    executionId: String!
  ): ForcesExecution

  "Get Forces executions from a time period"
  forcesExecutions(
    "Name of the group where Forces was executed"
    groupName: String
    "Start date of the query interval in yyyy-mm-ddThh:mm:ssZ format"
    fromDate: DateTime
      @deprecated(
        reason: """
          This field has no effect
          This field will be removed after 2023/01/25.
        """
      )
    "End date of the query interval in yyyy-mm-ddThh:mm:ssZ format"
    toDate: DateTime
      @deprecated(
        reason: """
          This field has no effect
          This field will be removed after 2023/01/25.
        """
      )
  ): ForcesExecutions

  "Group entity"
  group(
    "Name of the group to query"
    groupName: String!
  ): Group

  "List groups with forces"
  groupsWithForces: [String]

  "List groups a user is subscribed to"
  listUserGroups(
    "Email address of the user to query"
    userEmail: String!
  ): [Group]

  "Me entity"
  me(
    "User endpoint in use, either API or FRONT"
    callerOrigin: String
  ): Me

  "Organization entity"
  organization(
    "ID of the organization to query"
    organizationId: String!
  ): Organization

  "Gets an organization ID from its name"
  organizationId(
    "Name of the organization to query"
    organizationName: String!
  ): Organization

  "Report entity"
  report(
    "Closing date to include, in the format `yyyy-MM-ddThh:mm:ssZ`"
    closingDate: DateTime
    "Name of the group to which the report belongs"
    groupName: String
    "Type of the report/export"
    reportType: ReportType!
    "Language of the requested report"
    lang: ReportLang
    "States to include"
    states: [VulnerabilityState!]
    "Treatments to include"
    treatments: [VulnerabilityTreatment!]
    "Verification states to include"
    verifications: [VulnerabilityVerification!]
    "OTP code to verify the stakeholder"
    verificationCode: String!
  ): Report

  "Get resource metadata from group"
  resources(
    "Name of the Group containing the files to be queried"
    groupName: String
  ): Resource

  "Get a root, can be Git, IP or URL"
  root(
    "Name of the group"
    groupName: String!
    "Identifier of the root"
    rootId: ID!
  ): Root!

  "Get user info from group"
  stakeholder(
    "Entity to which the user belongs to"
    entity: StakeholderEntity!
    "ID of the organization, if applicable"
    organizationId: String
    "Name of the group, if applicable"
    groupName: String
    "Email address of the user to query"
    userEmail: String!
  ): Stakeholder

  "Tag entity"
  tag(
    "Content of the tag to be queried e.g. test-projects"
    tag: String!
  ): Tag

  "Gets vulnerabilities pending to reattack"
  vulnerabilitiesToReattack(
    "Name of the group to which the vulnerabilities belong to"
    group: String
  ): [Vulnerability]

  "Vulnerability entity"
  vulnerability(
    "Identifier of the vulnerability to query"
    uuid: String!
  ): Vulnerability
}
