type Mutation {
  acceptLegal(remember: Boolean): SimplePayload!

  acknowledgeConcurrentSession: SimplePayload!

  activateRoot(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
  ): SimplePayload!

  addDraft(
    attackComplexity: String
    attackVector: String
    affectedSystems: String
    attackVectorDesc: String
    availabilityImpact: String
    confidentialityImpact: String
    description: String
    exploitability: String
    groupName: String!
    integrityImpact: String
    privilegesRequired: String
    recommendation: String
    remediationLevel: String
    reportConfidence: String
    requirements: String
    risk: String
    severityScope: String
    threat: String
    title: String!
    type: FindingType
    userInteraction: String
  ): SimplePayload!

  addEvent(
    actionAfterBlocking: ActionsAfterBlocking!
    actionBeforeBlocking: ActionsBeforeBlocking!
    accessibility: [EventAccessibility]!
    affectedComponents: [AffectedComponents]
    blockingHours: String
    context: EventContext!
    detail: String!
    eventDate: DateTime!
    eventType: EventType!
    file: Upload
    groupName: String!
    image: Upload
  ): SimplePayload!

  addEventConsult(
    content: String!
    eventId: String!
    parent: GenericScalar!
  ): AddConsultPayload!

  addFiles(
    file: Upload!
    filesData: JSONString!
    projectName: String
    groupName: String
  ): SimplePayload!

  addFindingConsult(
    content: String!
    findingId: String!
    parent: GenericScalar!
    type: FindingConsultType!
  ): AddConsultPayload!

  addForcesExecution(
    projectName: String
    executionId: String
    execution_id: String
    date: DateTime!
    exitCode: String!
    gitBranch: String
    gitCommit: String
    gitOrigin: String
    gitRepo: String
    groupName: String
    kind: String
    log: Upload
    strictness: String!
    vulnerabilities: ExecutionVulnerabilitiesInput!
  ): SimplePayload!

  addGitRoot(
    "Repository branch to be tested"
    branch: String!
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "Name of the group the root is associated with"
    groupName: String!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
    "Nickname of the repository"
    nickname: String
    "Repository URL"
    url: String!
  ): SimplePayload!

  addGroup(
    description: String!
    groupName: String!
    hasMachine: Boolean
    hasSquad: Boolean
    language: Language
    organization: String
    service: ServiceType
    subscription: SubscriptionType
  ): SimplePayload!

  addGroupConsult(
    content: String!
    groupName: String!
    parent: GenericScalar!
  ): AddConsultPayload!

  addGroupTags(
    groupName: String!
    tags: JSONString
  ): SimpleGroupPayload!

  addIpRoot(
    "IP address of the environment to test"
    address: String!
    "Name of the group the root is associated with"
    groupName: String!
    "Nickname of the root"
    nickname: String!
    "Indicates the port to test. Zero means all ports"
    port: Int!
  ): SimplePayload!

  addOrgFindingPolicy(
    "Name of the finding"
    findingName: String!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Tags associated with the organization the finding policy"
    tags: [String]
  ): SimplePayload! @deprecated(reason: """This mutation will be removed after
  2021/12/20. Use `addOrganizationFindingPolicy` instead.""")

  addOrganization(name: String!): AddOrganizationPayload!

  addOrganizationFindingPolicy(
    "Name of the finding"
    findingName: String!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Tags associated with the organization the finding policy"
    tags: [String]
  ): SimplePayload!

  addProjectConsult(
    content: String!
    parent: GenericScalar!
    projectName: String!
  ): AddConsultPayload! @deprecated(reason: """This mutation
    will be removed after 2021/12/20. Use `addGroupConsult` instead.""")

  addPushToken(token: String!): SimplePayload

  addStakeholder(
    email: String!
    role: StakeholderRole!
    phoneNumber: String
  ): AddStakeholderPayload!

  addTags(
    projectName: String
    groupName: String
    tags: JSONString
  ): SimpleGroupPayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addGroupTags` instead.""")

  addUrlRoot(
    "URL of the environment to test"
    url: String!
    "Name of the group the root is associated with"
    groupName: String!
  ): SimplePayload!

  approveDraft(draftId: String!): ApproveDraftPayload!

  confirmVulnerabilitiesZeroRisk(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  confirmZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `confirmVulnerabilitiesZeroRisk` instead.""")

  createDraft(
    affectedSystems: String
    attackVectorDesc: String
    description: String
    groupName: String
    projectName: String
    recommendation: String
    requirements: String
    risk: String
    threat: String
    title: String!
    type: FindingType
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addDraft` instead.""")

  createEvent(
    actionAfterBlocking: ActionsAfterBlocking!
    actionBeforeBlocking: ActionsBeforeBlocking!
    accessibility: [EventAccessibility]!
    affectedComponents: [AffectedComponents]
    blockingHours: String
    context: EventContext!
    detail: String!
    eventDate: DateTime!
    eventType: EventType!
    file: Upload
    groupName: String
    image: Upload
    projectName: String
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addEvent` instead.""")

  createGroup(
    description: String!
    groupName: String!
    hasMachine: Boolean
    hasSquad: Boolean
    language: Language
    organization: String
    service: ServiceType
    subscription: SubscriptionType
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addGroup` instead.""")

  createOrganization(name: String!): AddOrganizationPayload!
    @deprecated(reason: """This mutation will be removed after 2021/12/31.
    Use `addOrganization` instead.""")

  createProject(
    description: String!
    language: Language
    organization: String
    projectName: String!
    subscription: SubscriptionType
    hasSkims: Boolean
    hasDrills: Boolean
    hasForces: Boolean
  ): SimplePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `addGroup` instead.""")

  deactivateOrgFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
  ): SimplePayload!  @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `deactivateOrganizationFindingPolicy` instead.""")

  deactivateOrganizationFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
  ): SimplePayload!

  deactivateRoot(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Id of the new root if it changed"
    newRootId: ID
    "Custom reason provided"
    other: String
    "Reason for this change"
    reason: RootDeactivationReason!
  ): SimplePayload!

  deleteFinding(
    findingId: String!
    justification: RemoveFindingJustification!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeFinding` instead.""")

  deleteTags(
    findingId: String!
    vulnerabilities: [String]!
    tag: String
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeTags` instead.""")

  deleteVulnerability(
    id: String!
    findingId: String!
    justification: RemoveVulnerabilityJustification!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeVulnerability` instead.""")

  downloadEventFile(eventId: String!, fileName: String!): DownloadFilePayload!

  downloadFile(
    filesData: JSONString!
    projectName: String,
    groupName: String
  ): DownloadFilePayload!

  downloadVulnFile(findingId: String!): DownloadFilePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `downloadVulnerabilityFile` instead.""")

  downloadVulnerabilityFile(findingId: String!): DownloadFilePayload!

  editGroup(
    comments: String!
    groupName: String!
    hasAsm: Boolean
    hasDrills: Boolean
    hasIntegrates: Boolean
    hasMachine: Boolean
    hasSkims: Boolean
    hasSquad: Boolean
    reason: UpdateGroupReason!
    service: ServiceType
    subscription: SubscriptionType!
  ): SimplePayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateGroup` instead.""")

  editStakeholder(
    projectName: String
    groupName: String
    email: String!
    responsibility: String!
    role: StakeholderRole!
    phoneNumber: String!
  ): UpdateStakeholderPayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateGroupStakeholder` instead.""")

  editStakeholderOrganization(
    organizationId: String!
    phoneNumber: String
    role: OrganizationRole!
    userEmail: String!
  ): UpdateStakeholderPayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateOrganizationStakeholder` instead.""")

  executeSkims(groupName: String!): ExecuteSkimsPayload!

  grantStakeholderAccess(
    projectName: String
    groupName: String
    email: String!
    responsibility: String
    role: StakeholderRole!
    phoneNumber: String
  ): GrantStakeholderAccessPayload!

  grantStakeholderOrganizationAccess(
    organizationId: String!
    phoneNumber: String
    role: OrganizationRole!
    userEmail: String!
  ): GrantStakeholderAccessPayload!

  handleOrgFindingPolicyAcceptation(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Whether the finding policy is approved or rejected"
    status: OrganizationFindindPolicy!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed after
   2021/12/31. Use `handleOrganizationFindingPolicyAcceptation` instead.""")

  handleOrganizationFindingPolicyAcceptation(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Whether the finding policy is approved or rejected"
    status: OrganizationFindindPolicy!
  ): SimplePayload!

   handleVulnerabilitiesAcceptation(
    acceptedVulnerabilities: [String]!
    findingId: String!
    justification: String!
    rejectedVulnerabilities: [String]!
  ): SimplePayload!

  handleVulnsAcceptation(
    acceptedVulns: [String]!
    findingId: String!
    justification: String!
    rejectedVulns: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `handleVulnerabilitiesAcceptation` instead.""")

  invalidateAccessToken: SimplePayload!

  invalidateCache(pattern: String!): SimplePayload!

  rejectDraft(findingId: String!): SimplePayload!

  rejectVulnerabilitiesZeroRisk(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  rejectZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `rejectVulnerabilitiesZeroRisk` instead.""")

  removeEventEvidence(
    eventId: String!
    evidenceType: EventEvidenceType!
  ): SimplePayload!

  removeEvidence(
    findingId: String!
    evidenceId: EvidenceType!
  ): SimpleFindingPayload!

  removeFiles(
    filesData: JSONString!
    projectName: String
    groupName: String
  ): SimplePayload!

  removeFinding(
    findingId: String!
    justification: RemoveFindingJustification!
  ): SimplePayload!

  removeGroup(groupName: String!, reason: String): SimplePayload!

  removeGroupTag(
    groupName: String!
    tag: String!
  ): SimpleGroupPayload!

  removeStakeholderAccess(
    projectName: String
    groupName: String
    userEmail: String!
  ): RemoveStakeholderAccessPayload!

  removeStakeholderOrganizationAccess(
    organizationId: String!
    userEmail: String!
  ): SimplePayload!

  removeTag(
    projectName: String
    groupName: String
    tag: String!
  ): SimpleGroupPayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeGroupTag` instead.""")

  removeTags(
    findingId: String!
    vulnerabilities: [String]!
    tag: String
  ): SimplePayload!

  removeVulnerability(
    id: String!
    findingId: String!
    justification: RemoveVulnerabilityJustification!
  ): SimplePayload!

  requestVerificationVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `requestVulnerabilitiesVerification` instead.""")

  requestVulnerabilitiesVerification(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  requestVulnerabilitiesZeroRisk(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  requestZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `requestVulnerabilitiesZeroRisk` instead.""")

  signIn(authToken: String!, provider: AuthProvider!): SignInPayload!

  solveEvent(
    eventId: String!
    affectation: String!
    date: DateTime!
  ): SimplePayload!

  submitDraft(findingId: String!): SimplePayload!

  submitMachineJob(
    findingId: String!
    rootNickname: String!
  ): SimplePayload!

  submitOrganizationFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
  ): SimplePayload!

  subscribeToEntityReport(
    frequency: Frequency!
    reportEntity: SubscriptionReportEntity!
    reportSubject: String!
  ): SimplePayload!

  unsubscribeFromGroup(groupName: String!): SimplePayload!

  updateAccessToken(expirationTime: Int!): UpdateAccessTokenPayload!

  updateDescription(
    actor: String!
    affectedSystems: String!
    attackVectorDesc: String!
    description: String!
    findingId: String!
    recommendation: String!
    records: String
    recordsNumber: Int!
    requirements: String!
    risk: String
    scenario: String!
    sorts: Sorts
    threat: String!
    title: String!
    findingType: String
  ): SimpleFindingPayload!

  updateEventEvidence(
    eventId: String!
    evidenceType: EventEvidenceType!
    file: Upload!
  ): SimplePayload!

  updateEvidence(
    file: Upload!
    findingId: String!
    evidenceId: EvidenceType!
  ): SimplePayload!

  updateEvidenceDescription(
    description: String!
    evidenceId: EvidenceDescriptionType!
    findingId: String!
  ): SimplePayload!

  updateForcesAccessToken(
    projectName: String,
    groupName: String
  ): UpdateAccessTokenPayload!

  updateGitEnvironments(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "URLs to access the environment"
    environmentUrls: [String!]!
  ): SimplePayload!

  updateGitRoot(
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
    "Nickname of the repository"
    nickname: String
  ): SimplePayload!

  updateGroup(
    comments: String!
    groupName: String!
    hasAsm: Boolean!
    hasMachine: Boolean!
    hasSquad: Boolean!
    reason: UpdateGroupReason!
    service: ServiceType
    subscription: SubscriptionType!
  ): SimplePayload!

  updateGroupStakeholder(
    groupName: String!
    email: String!
    responsibility: String!
    role: StakeholderRole!
    phoneNumber: String!
  ): UpdateStakeholderPayload!

  updateOrganizationPolicies(
    maxAcceptanceDays: Int
    maxAcceptanceSeverity: Float
    maxNumberAcceptations: Int
    minAcceptanceSeverity: Float
    organizationId: String!
    organizationName: String!
  ): SimplePayload!

  updateOrganizationStakeholder(
    organizationId: String!
    phoneNumber: String
    role: OrganizationRole!
    userEmail: String!
  ): UpdateStakeholderPayload!

  updateRootCloningStatus(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Whether the root is cloning or not"
    status: CloningStatus!
    "Message when cloning is finished"
    message: String!
  ): SimplePayload!

  updateRootState(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Whether the root is active or not"
    state: ResourceState!
  ): SimplePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `activateRoot` or `deactivateRoot` instead.""")

  updateSeverity(
    findingId: String!
    data: GenericScalar!
  ): SimpleFindingPayload!

  updateToeLinesSorts(
    filename: String,
    groupName: String,
    sortsRiskLevel: Int
  ): SimplePayload!

  updateTreatmentVuln(
    externalBts: String
    findingId: String!
    severity: Int
    tag: String
    vulnerabilityId: ID!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `updateVulnerabilityTreatment` instead.""")

  updateVulnCommit(
    vulnCommit: String!
    vulnId: String!
    vulnWhere: String!
    vulnSpecific: String!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `updateVulnerabilityCommit` instead.""")

  updateVulnerabilitiesTreatment(
    acceptanceDate: String
    findingId: String!
    justification: String!
    treatment: UpdateClientDescriptionTreatment!
    treatmentManager: String
    vulnerabilityId: ID!
  ): SimplePayload!

  updateVulnerabilityCommit(
    vulnerabilityCommit: String!
    vulnerabilityId: String!
    vulnerabilityWhere: String!
    vulnerabilitySpecific: String!
  ): SimplePayload!

  updateVulnerabilityTreatment(
    externalBts: String
    findingId: String!
    severity: Int
    tag: String
    vulnerabilityId: ID!
  ): SimplePayload!

  updateVulnsTreatment(
    acceptanceDate: String
    findingId: String!
    justification: String!
    treatment: UpdateClientDescriptionTreatment!
    treatmentManager: String
    vulnerabilityId: ID!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `updateVulnerabilitiesTreatment` instead.""")

  uploadFile(file: Upload!, findingId: String!): SimplePayload!

  verifyRequestVuln(
    findingId: String!
    justification: String!
    openVulns: [String]!
    closedVulns: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `verifyVulnerabilitiesRequest` instead.""")

  verifyVulnerabilitiesRequest(
    findingId: String!
    justification: String!
    openVulnerabilities: [String]!
    closedVulnerabilities: [String]!
  ): SimplePayload!
}
