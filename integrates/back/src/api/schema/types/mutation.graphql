"Main mutation object"
type Mutation {
  "Whether to keep showing the legal notice modal or not"
  acceptLegal(
    "If set to true, ASM will stop showing the legal notice upon a new login"
    remember: Boolean
  ): SimplePayload!

  acknowledgeConcurrentSession: SimplePayload!

  "Activate a root and make its content available for security analyses"
  activateRoot(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
  ): SimplePayload!

  addDraft(
    attackComplexity: String
    attackVector: String
    affectedSystems: String
    attackVectorDesc: String
    availabilityImpact: String
    confidentialityImpact: String
    description: String
    exploitability: String
    "Name of the Group where the new draft will be in"
    groupName: String!
    integrityImpact: String
    privilegesRequired: String
    recommendation: String
    remediationLevel: String
    reportConfidence: String
    requirements: String
    risk: String
    severityScope: String
    threat: String
    title: String!
    type: FindingType
    userInteraction: String
  ): SimplePayload!

  "Reports a blocking event"
  addEvent(
    "What the analyst did after the event happened"
    actionAfterBlocking: ActionsAfterBlocking!
    "What the analyst was doing just before the event happened"
    actionBeforeBlocking: ActionsBeforeBlocking!
    "Where the event was present"
    accessibility: [EventAccessibility]!
    "Components involved or affected by the event, if applicable"
    affectedComponents: [AffectedComponents]
    "Amount of time the analyst was blocked by the event, if applicable"
    blockingHours: String
    "Where the analyst physically was when the event happened"
    context: EventContext!
    "Comment laying out or explaining the event"
    detail: String!
    "DateTime of the event in the format `yyyy-MM-ddThh:mm:ssZ`"
    eventDate: DateTime!
    "The kind of event that happened"
    eventType: EventType!
    "Evidence file of the event"
    file: Upload
    "Name of the group linked to the event"
    groupName: String!
    "Evidence image of the event"
    image: Upload
  ): SimplePayload!

  "Adds a consult/comment to an Event"
  addEventConsult(
    "Content of the comment itself"
    content: String!
    "Identifier of the Event to comment about"
    eventId: String!
    "Identifier of the comment it is replying to. 0 otherwise"
    parent: GenericScalar!
  ): AddConsultPayload!

  "Adds files to a Group's scope view"
  addFiles(
    "The file object itself"
    file: Upload!
    "A JSON with description and fileName keys"
    filesData: JSONString!
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the Group to upload the File to"
    groupName: String
  ): SimplePayload!

  "Adds a consult/comment in a Finding"
  addFindingConsult(
    "Content of the comment/consult"
    content: String!
    "Identifier of the Finding to be commented"
    findingId: String!
    "Identifier of the comment it is replying to. 0 otherwise"
    parent: GenericScalar!
    "Type of the comment to be added"
    type: FindingConsultType!
  ): AddConsultPayload!

  "Adds a new Forces execution results and log to a Group"
  addForcesExecution(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Identifier of the Forces execution"
    executionId: String
    "Deprecated. Use `executionId` instead"
    execution_id: String
    "DateTime in the format yyyy-MM-ddThh:mm:ssZ"
    date: DateTime!
    "Exit code of the execution"
    exitCode: String!
    "Tested repo branch"
    gitBranch: String
    "Full SHA-1 hash of the tested commit"
    gitCommit: String
    "Repo URL"
    gitOrigin: String
    "Root nickname"
    gitRepo: String
    "Name of the Group where the Forces log will be in"
    groupName: String
    kind: String
    "Forces execution log"
    log: Upload
    strictness: String!
    "Object containing arrays of accepted, open and closed vulnerabilities"
    vulnerabilities: ExecutionVulnerabilitiesInput!
  ): SimplePayload!

  """Adds a new root to be analyzed and tested"""
  addGitRoot(
    "Repository branch to be tested"
    branch: String!
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "Name of the group the root is associated with"
    groupName: String!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
    "Nickname of the repository"
    nickname: String
    "Repository URL"
    url: String!
  ): SimplePayload!

  "Adds a new group to the specified organization"
  addGroup(
    "Brief description to identify the group"
    description: String!
    "Name of the new group"
    groupName: String!
    "Enables the Machine plan within the new group"
    hasMachine: Boolean
    "Enables the Squad plan within the new group"
    hasSquad: Boolean
    "Language in which findings should be reported"
    language: Language
    "Organization to which the group will belong"
    organization: String
    "Enables either Black or White box type of hacking service"
    service: ServiceType
    "Enables either continuous or one-shot hacking within the group"
    subscription: SubscriptionType
  ): SimplePayload!

  "Adds a consult/comment to the Consulting tab of the group"
  addGroupConsult(
    "The content of the comment"
    content: String!
    "Name of the group where the comment will be made"
    groupName: String!
    "Identifier of the parent comment it is replying to"
    parent: GenericScalar!
  ): AddConsultPayload!

  "Adds the specified tags to the group"
  addGroupTags(
    "Name of the group where the tags will be added"
    groupName: String!
    "Tags to add in list format with the tags enclosed in quotes"
    tags: JSONString
  ): SimpleGroupPayload!

  "Adds an IP to the Group roots"
  addIpRoot(
    "IP address of the environment to test"
    address: String!
    "Name of the group the root is associated with"
    groupName: String!
    "Nickname of the root"
    nickname: String!
    "Indicates the port to test. Zero means all ports"
    port: Int!
  ): SimplePayload!

  """Adds a Finding policy to the Organization. Approval is still needed for
  enactment"""
  addOrgFindingPolicy(
    "Name of the Finding to be associated with the policy"
    findingName: String!
    "Name of the Organization relevant to the finding policy"
    organizationName: String!
    "Tags that will be related to this finding policy"
    tags: [String]
  ): SimplePayload! @deprecated(reason: """This mutation will be removed after
  2021/12/20. Use `addOrganizationFindingPolicy` instead.""")

  "Adds a new Organization"
  addOrganization(
    "Name of the new Organization. Must come from an Internal Names whitelist"
    name: String!
  ): AddOrganizationPayload!

  """Adds a Finding policy to the Organization. Approval is still needed for
  enactment"""
  addOrganizationFindingPolicy(
    "Name of the Finding to be associated with the policy"
    findingName: String!
    "Name of the Organization relevant to the finding policy"
    organizationName: String!
    "Tags that will be related to this finding policy"
    tags: [String]
  ): SimplePayload!

  "Adds a consult/comment to a Group"
  addProjectConsult(
    "Content of the comment itself"
    content: String!
    "Identifier of the comment it is replying to. 0 otherwise"
    parent: GenericScalar!
    "Deprecated. Use `groupName` instead"
    projectName: String!
  ): AddConsultPayload! @deprecated(reason: """This mutation
    will be removed after 2021/12/20. Use `addGroupConsult` instead.""")

  addPushToken(token: String!): SimplePayload

  """Adds a new Stakeholder to ASM. Extra permissions might be needed to access
  Organizations and Groups"""
  addStakeholder(
    "Email address of the new stakeholder"
    email: String!
    "Role of the stakeholder"
    role: StakeholderRole!
    "Phone number of the stakeholder preceded by its call sign"
    phoneNumber: String
  ): AddStakeholderPayload!

  "Adds the specified tags to the group"
  addTags(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the group where the tags will be added"
    groupName: String!
    "Tags to add in list format with the tags enclosed in quotes"
    tags: JSONString
  ): SimpleGroupPayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addGroupTags` instead.""")

  "Adds the URL of the environment to be tested"
  addUrlRoot(
    "URL of the environment to test"
    url: String!
    "Name of the group the root is associated with"
    groupName: String!
    "Nickname of the root"
    nickname: String!
  ): SimplePayload!

  "Approves the specified draft finding"
  approveDraft(
    "Identifier of the draft to approve"
    draftId: String!
  ): ApproveDraftPayload!

  confirmVulnerabilitiesZeroRisk(
    "Identifier of the Finding to be commented"
    findingId: String!
    "Justification of the confirmed zero risks"
    justification: String!
    "Vulnerabilities to confirm"
    vulnerabilities: [String]!
  ): SimplePayload!

  confirmZeroRiskVuln(
    "Identifier of the Finding associated with the vulnerabilities"
    findingId: String!
    "Justification of the confirmed zero risks"
    justification: String!
    "Vulnerabilities to confirm"
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `confirmVulnerabilitiesZeroRisk` instead.""")

  "Adds a new draft Finding to the specified Group"
  createDraft(
    affectedSystems: String
    attackVectorDesc: String
    description: String
    groupName: String
    "Deprecated. Use `groupName` instead"
    projectName: String
    recommendation: String
    requirements: String
    risk: String
    threat: String
    title: String!
    type: FindingType
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addDraft` instead.""")

  "Adds a new blocking Event to the specified Group"
  createEvent(
    actionAfterBlocking: ActionsAfterBlocking!
    actionBeforeBlocking: ActionsBeforeBlocking!
    accessibility: [EventAccessibility]!
    affectedComponents: [AffectedComponents]
    blockingHours: String
    context: EventContext!
    detail: String!
    eventDate: DateTime!
    eventType: EventType!
    file: Upload
    "Name of the Group where the new Event will be in"
    groupName: String
    image: Upload
    "Deprecated. Use `groupName` instead"
    projectName: String
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addEvent` instead.""")

  "Adds a new group to the specified organization"
  createGroup(
    "Brief description to identify the group"
    description: String!
    "Name of the new group"
    groupName: String!
    "Enables the Machine plan within the new group"
    hasMachine: Boolean
    "Enables the Squad plan within the new group"
    hasSquad: Boolean
    "Language in which findings should be reported"
    language: Language
    "Organization to which the group will belong"
    organization: String
    "Enables either Black or White box type of hacking service"
    service: ServiceType
    "Enables either continuous or one-shot hacking within the group"
    subscription: SubscriptionType
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
      after 2021/12/31. Use `addGroup` instead.""")

  "Adds a new Organization"
  createOrganization(
    "Name of the new Organization. Must come from an Internal Names whitelist"
    name: String!
  ): AddOrganizationPayload!
    @deprecated(reason: """This mutation will be removed after 2021/12/31.
    Use `addOrganization` instead.""")

  "Adds a new Group to the specified Organization"
  createProject(
    "Brief description to identify the group"
    description: String!
    "Language in which findings should be reported"
    language: Language
    "Organization to which the group will belong"
    organization: String
    "Name of the new Group"
    projectName: String!
    "Enables either continuous or one-shot hacking within the group"
    subscription: SubscriptionType
    "Enables the Machine plan within the new group"
    hasSkims: Boolean
    "Enables the Squad plan within the new group"
    hasDrills: Boolean
    "Deprecated field"
    hasForces: Boolean
  ): SimplePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `addGroup` instead.""")

  deactivateOrgFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
  ): SimplePayload!  @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `deactivateOrganizationFindingPolicy` instead.""")

  deactivateOrganizationFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
  ): SimplePayload!

  deactivateRoot(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Id of the new root if it changed"
    newRootId: ID
    "Custom reason provided"
    other: String
    "Reason for this change"
    reason: RootDeactivationReason!
  ): SimplePayload!

  deleteFinding(
    "Identifier of the Finding to be removed"
    findingId: String!
    "Justification of the removal"
    justification: RemoveFindingJustification!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeFinding` instead.""")

  "Removes tags from vulnerabilities"
  deleteTags(
    "Identifier of the finding containing the vulnerabilities"
    findingId: String!
    """List of identifiers of the vulnerabilities where the tag should be
    removed from"""
    vulnerabilities: [String]!
    "Tag to remove"
    tag: String
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeTags` instead.""")

  "Removes/deletes a vulnerability within a finding"
  deleteVulnerability(
    "Identifier of the vulnerability to remove"
    id: String!
    "Finding where the vulnerability is located"
    findingId: String!
    "Justification for the removal"
    justification: RemoveVulnerabilityJustification!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeVulnerability` instead.""")

  "Downloads an evidence file associated with an Event"
  downloadEventFile(
    "Identifier of the Event containing the evidence"
    eventId: String!
    "Filename of the evidence to download"
    fileName: String!
  ): DownloadFilePayload!

  "Downloads a file hosted on a Group"
  downloadFile(
    "Name of the file to download in String form"
    filesData: JSONString!
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the Group containing the file in its Scope view"
    groupName: String
  ): DownloadFilePayload!

  "Downloads a yaml file with all the vulnerabilities of this finding"
  downloadVulnFile(
    "Identifier of the finding associated with the vulnerabilities"
    findingId: String!
  ): DownloadFilePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `downloadVulnerabilityFile` instead.""")

  "Downloads a yaml file with all the vulnerabilities of this finding"
  downloadVulnerabilityFile(
    "Identifier of the finding associated with the vulnerabilities"
    findingId: String!
  ): DownloadFilePayload!

  "Edit a group's services and parameters"
  editGroup(
    "Observations about the group edit"
    comments: String!
    "Name of the group to be edited"
    groupName: String!
    """Whether to keep using ASM services. Caution: Setting this to False
    **will** remove the group from it!"""
    hasAsm: Boolean
    "Deprecated, use `hasSquad` instead"
    hasDrills: Boolean
    "Deprecated, use `hasAsm` instead"
    hasIntegrates: Boolean
    "Whether to keep the Machine plan enabled within the group"
    hasMachine: Boolean
    "Deprecated. Use `hasMachine` instead"
    hasSkims: Boolean
    "Whether to keep the Squad plan enabled within the group"
    hasSquad: Boolean
    "Reason for the downgrade in services if applicable"
    reason: UpdateGroupReason!
    "Enables either Black or White box type of hacking service"
    service: ServiceType
    "Enables either continuous or one-shot hacking within the group"
    subscription: SubscriptionType!
  ): SimplePayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateGroup` instead.""")

  "Updates stakeholder info at the Group level"
  editStakeholder(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the Group to which the stakeholder belongs"
    groupName: String
    "Email address of the stakeholder to update"
    email: String!
    "Responsibility of the stakeholder e.g. Product Owner, Group Manager etc.."
    responsibility: String!
    "Role of the stakeholder"
    role: StakeholderRole!
    "Phone number of the stakeholder preceded by its call sign"
    phoneNumber: String!
  ): UpdateStakeholderPayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateGroupStakeholder` instead.""")

  "Updates stakeholder info at the Organization level"
  editStakeholderOrganization(
    "Identifier of the Organization to which the stakeholder belongs"
    organizationId: String!
    "Phone number of the stakeholder preceded by its call sign"
    phoneNumber: String
    "Role of the stakeholder"
    role: OrganizationRole!
    "Email address of the stakeholder to update"
    userEmail: String!
  ): UpdateStakeholderPayload! @deprecated(reason: """This mutation will be
    removed after 2021/12/31. Use `updateOrganizationStakeholder` instead.""")

  "Grants a stakeholder access to a Group"
  grantStakeholderAccess(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the Group"
    groupName: String
    "Email address of the stakeholder that will be granted access"
    email: String!
    "Responsibility of the stakeholder e.g. Product Owner, Group Manager etc.."
    responsibility: String
    role: StakeholderRole!
    "Phone number of the stakeholder preceded by its call sign"
    phoneNumber: String
  ): GrantStakeholderAccessPayload!

  "Grants a stakeholder access to an Organization"
  grantStakeholderOrganizationAccess(
    "Identifier of the Organization"
    organizationId: String!
    "Phone number of the stakeholder preceded by its call sign"
    phoneNumber: String
    "Role of the stakeholder"
    role: OrganizationRole!
    "Email address of the stakeholder that will be granted access"
    userEmail: String!
  ): GrantStakeholderAccessPayload!

  handleOrgFindingPolicyAcceptation(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Whether the finding policy is approved or rejected"
    status: OrganizationFindingPolicy!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed after
   2021/12/31. Use `handleOrganizationFindingPolicyAcceptation` instead.""")

  handleOrganizationFindingPolicyAcceptation(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy is associated with"
    organizationName: String!
    "Whether the finding policy is approved or rejected"
    status: OrganizationFindingPolicy!
  ): SimplePayload!

   handleVulnerabilitiesAcceptation(
    "List of identifiers of the vulnerabilties to be accepted"
    acceptedVulnerabilities: [String]!
    "Identifier of the Finding that contains the vulnerabilities"
    findingId: String!
    "Justification of the acceptances and rejections"
    justification: String!
    "List of identifiers of the vulnerabilties to be rejected"
    rejectedVulnerabilities: [String]!
  ): SimplePayload!

  handleVulnsAcceptation(
    "List of identifiers of the vulnerabilties to be accepted"
    acceptedVulns: [String]!
    "Identifier of the Finding that contains the vulnerabilities"
    findingId: String!
    "Justification of the acceptances and rejections"
    justification: String!
    "List of identifiers of the vulnerabilties to be rejected"
    rejectedVulns: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `handleVulnerabilitiesAcceptation` instead.""")

  "Revokes the current user's API access token"
  invalidateAccessToken: SimplePayload!

  "Ditches a section of the cache and forces a refresh"
  invalidateCache(
    "Cache pattern to ditch"
    pattern: String!
  ): SimplePayload!

  "Rejects a drafted Finding"
  rejectDraft(
    "Identifier of the draft Finding to be rejected"
    findingId: String!
  ): SimplePayload!

  rejectVulnerabilitiesZeroRisk(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  rejectZeroRiskVuln(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `rejectVulnerabilitiesZeroRisk` instead.""")

  "Removes evidence from an Event"
  removeEventEvidence(
    "Identifier of the event to which the Evidence belongs"
    eventId: String!
    "Type of the Evidence to remove"
    evidenceType: EventEvidenceType!
  ): SimplePayload!

  "Removes evidence from a Finding"
  removeEvidence(
    "Identifier of the finding to which the Evidence belongs"
    findingId: String!
    "Type identifier of the Evidence to remove"
    evidenceId: EvidenceType!
  ): SimpleFindingPayload!

  "Removes Files from a Group"
  removeFiles(
    "Data of the file to remove in the format {`fileName`:`file.ext`}"
    filesData: JSONString!
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the group where the File to remove is"
    groupName: String
  ): SimplePayload!

  "Removes/deletes a Finding from a Group"
  removeFinding(
    "Identifier of the Finding to remove"
    findingId: String!
    "Justification of the removal"
    justification: RemoveFindingJustification!
  ): SimplePayload!

  """Removes/deletes a group from ASM. Once successful this action cannot be
  undone"""
  removeGroup(
    "Name of the group to be deleted"
    groupName: String!
    "Reason for the removal of the group"
    reason: String
  ): SimplePayload!

  "Removes/deletes the specified tag from the group"
  removeGroupTag(
    "Name of the group where the tag should be removed from"
    groupName: String!
    "Tag to remove"
    tag: String!
  ): SimpleGroupPayload!

  "Removes a stakeholder's access from a Group"
  removeStakeholderAccess(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the group where the stakeholder should be removed from"
    groupName: String
    "Email address of the stakeholder to remove"
    userEmail: String!
  ): RemoveStakeholderAccessPayload!

  "Removes a stakeholder's access from an Organization"
  removeStakeholderOrganizationAccess(
    """Identifier of the organization where the stakeholder should be removed
    from"""
    organizationId: String!
    "Email address of the stakeholder to remove"
    userEmail: String!
  ): SimplePayload!

  "Removes/deletes the specified tag from the group"
  removeTag(
    "Deprecated. User `groupName` instead"
    projectName: String
    "Name of the group where the tag should be removed from"
    groupName: String
    "Tag to remove"
    tag: String!
  ): SimpleGroupPayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `removeGroupTag` instead.""")

  "Removes tags from vulnerabilities"
  removeTags(
    "Identifier of the finding containing the vulnerabilities"
    findingId: String!
    """List of identifiers of the vulnerabilities where the tag should be
    removed from"""
    vulnerabilities: [String]!
    "Tag to remove"
    tag: String
  ): SimplePayload!

  "Removes/deletes a vulnerability within a finding"
  removeVulnerability(
    "Identifier of the vulnerability to remove"
    id: String!
    "Finding where the vulnerability is located"
    findingId: String!
    "Justification for the removal"
    justification: RemoveVulnerabilityJustification!
  ): SimplePayload!

  requestVerificationVuln(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `requestVulnerabilitiesVerification` instead.""")

  requestVulnerabilitiesVerification(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  requestVulnerabilitiesZeroRisk(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  requestZeroRiskVuln(
    "Identifier of Finding containing the vulnerabilities"
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `requestVulnerabilitiesZeroRisk` instead.""")

  "Signs an user in"
  signIn(
    authToken: String!,
    "OAuth provider"
    provider: AuthProvider!
  ): SignInPayload!

  solveEvent(
    eventId: String!
    affectation: String!
    date: DateTime!
  ): SimplePayload!

  submitDraft(
    "Identifier of the draft Finding to be submitted"
    findingId: String!
  ): SimplePayload!

  "Queues a job to execute Machine (Skims) on the provided root"
  submitMachineJob(
    """Identifier of the Finding where the results should be reported. Also
    sets the Vulnerability type to check for"""
    findingId: String!
    "Nickname of the root to run Machine on"
    rootNickname: String!
  ): SimplePayload!

  """Submits a Finding policy for the Organization, pending approval of a
  Stakeholder"""
  submitOrganizationFindingPolicy(
    "ID of the policy"
    findingPolicyId: ID!
    "Name of the organization the finding policy will be associated with"
    organizationName: String!
  ): SimplePayload!

  "Subscribes the user to periodic mails about an Entity"
  subscribeToEntityReport(
    "Desired frequency of the report"
    frequency: Frequency!
    "Type of Entity to report about"
    reportEntity: SubscriptionReportEntity!
    "Identifier of the Entity to report about"
    reportSubject: String!
  ): SimplePayload!

  "Revoke your access permissions to a group"
  unsubscribeFromGroup(
    "Name of the group to be removed from"
    groupName: String!
  ): SimplePayload!

  "Generates an access token for the API"
  updateAccessToken(
    "An unix timestamp within the near future (< 6 months from now)"
    expirationTime: Int!
  ): UpdateAccessTokenPayload!

  "Updates a Finding's description"
  updateDescription(
    actor: String!
    affectedSystems: String!
    attackVectorDesc: String!
    description: String!
    "Identifier of Finding whose description will be updated"
    findingId: String!
    recommendation: String!
    records: String
    recordsNumber: Int!
    requirements: String!
    risk: String
    scenario: String!
    sorts: Sorts
    threat: String!
    title: String!
    findingType: String
  ): SimpleFindingPayload!

  "Updates an Event's evidence"
  updateEventEvidence(
    "Identifier of the Event whose evidence will be modified"
    eventId: String!
    "Evidence type to update"
    evidenceType: EventEvidenceType!
    "Evidence file to upload"
    file: Upload!
  ): SimplePayload!

  "Updates a Finding's evidence"
  updateEvidence(
    "Evidence file to upload"
    file: Upload!
    "Identifier of the Finding whose evidence will be modified"
    findingId: String!
    "Type identifier of the evidence to replace or upload"
    evidenceId: EvidenceType!
  ): SimplePayload!

  "Updates the description of an Evidence in a Finding"
  updateEvidenceDescription(
    "New description of the Evidence"
    description: String!
    "Identifier of the Evidence to be updated"
    evidenceId: EvidenceDescriptionType!
    "Identifier of the Finding associated with the Evidence"
    findingId: String!
  ): SimplePayload!

  "Updates the Forces token in use for a Group"
  updateForcesAccessToken(
    "Deprecated. Use `groupName` instead"
    projectName: String
    "Name of the Group whose token is to be updated"
    groupName: String
  ): UpdateAccessTokenPayload!

  updateGitEnvironments(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "URLs to access the environment"
    environmentUrls: [String!]!
  ): SimplePayload!

  updateGitRoot(
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
    "Nickname of the repository"
    nickname: String
  ): SimplePayload!

  "Updates a group's services and parameters"
  updateGroup(
    "Observations about the group update"
    comments: String!
    "Name of the group to be updated"
    groupName: String!
    """Whether to keep using ASM services. Caution: Setting this to False
    **will** remove the group from it!"""
    hasAsm: Boolean!
    "Whether to keep the Machine plan enabled within the group"
    hasMachine: Boolean!
    "Whether to keep the Squad plan enabled within the group"
    hasSquad: Boolean!
    "Reason for the downgrade in services if applicable"
    reason: UpdateGroupReason!
    "Enables either Black or White box type of hacking service"
    service: ServiceType
    "Enables either continuous or one-shot hacking within the group"
    subscription: SubscriptionType!
  ): SimplePayload!

  "Updates/edits an user belonging to a group"
  updateGroupStakeholder(
    "Name of the group to which the user to be updated belongs"
    groupName: String!
    "Email of the user to update"
    email: String!
    "Responsibility of the stakeholder e.g. Product Owner, Group Manager etc.."
    responsibility: String!
    "Role of the user within the group"
    role: StakeholderRole!
    "Phone number of the user preceded by its call sign"
    phoneNumber: String!
  ): UpdateStakeholderPayload!

  "Updates the Organization's common policies"
  updateOrganizationPolicies(
    "Maximum number of calendar days a finding can be temporally accepted"
    maxAcceptanceDays: Int
    "Maximum CVSS 3.1 score in which a finding can be temporally accepted"
    maxAcceptanceSeverity: Float
    "Maximum number of times a finding can be temporally accepted"
    maxNumberAcceptations: Int
    "Minimum CVSS 3.1 score in which a finding can be temporally accepted"
    minAcceptanceSeverity: Float
    "Identifier of the Organization whose policies are to be updated"
    organizationId: String!
    "Name of the Organization whose policies are to be updated"
    organizationName: String!
  ): SimplePayload!

  "Updates an stakeholder's data from an Organization"
  updateOrganizationStakeholder(
    "Identifier of the Organization to which the stakeholder belongs"
    organizationId: String!
    "Stakeholder's phone number preceded by its call sign"
    phoneNumber: String
    "Stakeholder role"
    role: OrganizationRole!
    "Email address of the stakeholder to be updated"
    userEmail: String!
  ): UpdateStakeholderPayload!

  "Updates the Root cloning status"
  updateRootCloningStatus(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Whether the root is cloning or not"
    status: CloningStatus!
    "Message when cloning is finished"
    message: String!
  ): SimplePayload!

  "Deprecated. Updates the root state"
  updateRootState(
    "Name of the group the root is associated with"
    groupName: String!
    "ID of the root"
    id: ID!
    "Whether the root is active or not"
    state: ResourceState!
  ): SimplePayload!
    @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `activateRoot` or `deactivateRoot` instead.""")

  "Updates the severity of a Finding"
  updateSeverity(
    "Identifier of the finding in which the new severity will be calculated"
    findingId: String!
    attackComplexity: String!
    attackVector: String!
    availabilityImpact: String!
    availabilityRequirement: String!
    confidentialityImpact: String!
    confidentialityRequirement: String!
    cvssVersion: String!
    exploitability: String!
    integrityImpact: String!
    integrityRequirement: String!
    modifiedAttackComplexity: String!
    modifiedAttackVector: String!
    modifiedAvailabilityImpact: String!
    modifiedConfidentialityImpact: String!
    modifiedIntegrityImpact: String!
    modifiedPrivilegesRequired: String!
    modifiedSeverityScope: String!
    modifiedUserInteraction: String!
    privilegesRequired: String!
    remediationLevel: String!
    reportConfidence: String!
    severity: String
    severityScope: String!
    userInteraction: String!
  ): SimpleFindingPayload!

  updateToeLinesSorts(
    filename: String,
    "Name of the Group containing the Toe Lines to be updated"
    groupName: String,
    sortsRiskLevel: Int
  ): SimplePayload!

  updateTreatmentVuln(
    externalBts: String
    "Identifier of the Finding that contains the vulnerability to update"
    findingId: String!
    severity: Int
    tag: String
    vulnerabilityId: ID!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `updateVulnerabilityTreatment` instead.""")

  updateVulnCommit(
    vulnCommit: String!
    vulnId: String!
    vulnWhere: String!
    vulnSpecific: String!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/31. Use `updateVulnerabilityCommit` instead.""")

  updateVulnerabilitiesTreatment(
    acceptanceDate: String
    "Identifier of the Finding that contains the vulnerability to update"
    findingId: String!
    justification: String!
    treatment: UpdateClientDescriptionTreatment!
    treatmentManager: String
    vulnerabilityId: ID!
  ): SimplePayload!

  updateVulnerabilityCommit(
    vulnerabilityCommit: String!
    vulnerabilityId: String!
    vulnerabilityWhere: String!
    vulnerabilitySpecific: String!
  ): SimplePayload!

  updateVulnerabilityTreatment(
    externalBts: String
    "Identifier of the Finding that contains the vulnerability to update"
    findingId: String!
    severity: Int
    tag: String
    vulnerabilityId: ID!
  ): SimplePayload!

  updateVulnsTreatment(
    acceptanceDate: String
    "Identifier of the Finding that contains the vulnerability to update"
    findingId: String!
    justification: String!
    treatment: UpdateClientDescriptionTreatment!
    treatmentManager: String
    vulnerabilityId: ID!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `updateVulnerabilitiesTreatment` instead.""")

  "Uploads a file describing a Vulnerability to a Finding"
  uploadFile(
    "YAML file describing a Vulnerability"
    file: Upload!
    "Identifier of the Finding to be associated with the new Vulnerability"
    findingId: String!
  ): SimplePayload!

  verifyRequestVuln(
    "Identifier of the Finding that contains the vulnerabilities to verify"
    findingId: String!
    "Justification for the verifications"
    justification: String!
    "List of vulnerabilities that still remain open"
    openVulns: [String]!
    "List of vulnerabilities that were confirmed closed"
    closedVulns: [String]!
  ): SimplePayload! @deprecated(reason: """This mutation will be removed
    after 2021/12/20. Use `verifyVulnerabilitiesRequest` instead.""")

  verifyVulnerabilitiesRequest(
    "Identifier of the Finding that contains the vulnerabilities to verify"
    findingId: String!
    "Justification for the verifications"
    justification: String!
    "List of vulnerabilities that still remain open"
    openVulnerabilities: [String]!
    "List of vulnerabilities that were confirmed closed"
    closedVulnerabilities: [String]!
  ): SimplePayload!
}
