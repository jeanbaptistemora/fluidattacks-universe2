"Root interface definition"
interface IRoot {
  "ID of the root"
  id: ID!
  "Nickname for the root"
  nickname: String!
  "Whether the root is active or not"
  state: ResourceState!
}

"Root environment url definition"
interface EnvironmentUrl {
  "Date of creation"
  createdAt: DateTime
  "GitRoot environment url"
  id: String!
  "Environment url"
  url: String!
}

"Definition for language distribution in a repository"
type CodeLanguages {
  "Name of the language"
  language: String!
  "Number of lines of code"
  loc: Int!
}

"Git Root cloning status definition"
type GitRootCloningStatus {
  "Full SHA-1 hash of the cloned repo"
  commit: String
  "Message after repository cloning"
  message: String!
  "Cloning status of GitRoot"
  status: CloningStatus!
}

"Git Root environment url definition"
type GitEnvironmentUrl implements EnvironmentUrl {
  "Date of creation"
  createdAt: DateTime
  "GitRoot environment url"
  id: String!
  "Environment secrets"
  secrets: [Secret]
  "Environment url"
  url: String!
  "Environment url type"
  urlType: String!
}

"Git Root type definition"
type GitRoot implements IRoot {
  "Repository branch to be tested"
  branch: String!
  "Cloning status of GitRoot"
  cloningStatus: GitRootCloningStatus!
  "Date of creation"
  createdAt: DateTime
  "User who added GitRoot"
  createdBy: String
  "Credentials used to clone the repository"
  credentials: Credentials
  "AWS s3 presigned url to download the git root"
  downloadUrl: String
  "Kind of environment to test. E.g. production, QA, etc."
  environment: String!
  "URLs to access the environment"
  environmentUrls: [String!]!
  "URLs to access the environment"
  gitEnvironmentUrls: [GitEnvironmentUrl]!
  "Repository paths to be ignored"
  gitignore: [String!]!
  "ID of the root"
  id: ID!
  "Analyze already existing code"
  includesHealthCheck: Boolean!
  "Last time the root cloning state was modified"
  lastCloningStatusUpdate: DateTime!
  "Last time the root was modified"
  lastEditedAt: DateTime
  "Last user who modified the root"
  lastEditedBy: String
  "Last time the root status was modified"
  lastStateStatusUpdate: DateTime!
  "Nickname for the repository"
  nickname: String!
  "Secrets for the environment"
  secrets: [Secret!]!
  "Whether the root is active or not"
  state: ResourceState!
  "AWS s3 presigned url to upload the git root"
  uploadUrl: String
  "Repository URL"
  url: String!
  "Repository requires vpn to clone"
  useVpn: Boolean!
  "Vulnerabilities associated to the root"
  vulnerabilities: [Vulnerability!]
}

"IP Root type definition"
type IPRoot implements IRoot {
  "IP address of the environment to test"
  address: String!
  "ID of the root"
  id: ID!
  "Nickname for the root"
  nickname: String!
  "Indicates the port to test. Zero means all ports"
  port: Int! @deprecated(reason: "This field will be removed after 2023/06/13.")
  "Whether the root is active or not"
  state: ResourceState!
  "Vulnerabilities associated to the root"
  vulnerabilities: [Vulnerability!]
}

"Root secret"
type Secret {
  "Description of secret"
  description: String
  "Secret key"
  key: String!
  "Secret value"
  value: String!
}

"URL Root type definition"
type URLRoot implements IRoot {
  "Domain name or IP of the environment to test"
  host: String!
  "ID of the root"
  id: ID!
  "Nickname for the root"
  nickname: String!
  "URL path"
  path: String!
  "URL port"
  port: Int!
  "URL protocol"
  protocol: URLProtocol!
  "URL query"
  query: String
  "Secrets for the environment"
  secrets: [Secret!]!
  "Whether the root is active or not"
  state: ResourceState!
  "Vulnerabilities associated to the root"
  vulnerabilities: [Vulnerability!]
}
