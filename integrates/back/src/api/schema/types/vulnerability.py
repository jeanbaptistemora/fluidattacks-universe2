from api.resolvers.vulnerability import (
    analyst,
    historic_verification,
    historic_zero_risk,
    last_reattack_requester,
)
from api.resolvers.vulnerability_new import (
    analyst as analyst_new,
    current_approval_status,
    current_state,
    cycles,
    efficacy,
    historic_state,
    historic_treatment,
    historic_verification as historic_verification_new,
    historic_zero_risk as historic_zero_risk_new,
    last_reattack_date,
    last_requested_reattack_date,
    remediated,
    report_date,
    severity,
)
from ariadne import (
    ObjectType,
)
from context import (
    FI_API_STATUS,
)

VULNERABILITY = ObjectType("Vulnerability")

VULNERABILITY.set_field(
    "lastReattackRequester", last_reattack_requester.resolve
)

if FI_API_STATUS == "migration":
    VULNERABILITY.set_field("analyst", analyst_new.resolve)
    VULNERABILITY.set_field(
        "currentApprovalStatus", current_approval_status.resolve
    )
    VULNERABILITY.set_field("currentState", current_state.resolve)
    VULNERABILITY.set_field("cycles", cycles.resolve)
    VULNERABILITY.set_field("efficacy", efficacy.resolve)
    VULNERABILITY.set_field("historicState", historic_state.resolve)
    VULNERABILITY.set_field("historicTreatment", historic_treatment.resolve)
    VULNERABILITY.set_field(
        "historicVerification", historic_verification_new.resolve
    )
    VULNERABILITY.set_field("historicZeroRisk", historic_zero_risk_new.resolve)
    VULNERABILITY.set_field("lastReattackDate", last_reattack_date.resolve)
    VULNERABILITY.set_field(
        "lastRequestedReattackDate", last_requested_reattack_date.resolve
    )
    VULNERABILITY.set_field("remediated", remediated.resolve)
    VULNERABILITY.set_field("reportDate", report_date.resolve)
    VULNERABILITY.set_field("severity", severity.resolve)
else:
    VULNERABILITY.set_field("analyst", analyst.resolve)
    VULNERABILITY.set_field(
        "historicVerification", historic_verification.resolve
    )
    VULNERABILITY.set_field("historicZeroRisk", historic_zero_risk.resolve)
