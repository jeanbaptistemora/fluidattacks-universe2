"Actions after getting blocked by an event"
enum ActionsAfterBlocking {
  "The hacker started working on another group from another client"
  EXECUTE_OTHER_GROUP_OTHER_CLIENT
  "The hacker started working on another group from the same client"
  EXECUTE_OTHER_GROUP_SAME_CLIENT
  "The hacker started working on another group from another client"
  EXECUTE_OTHER_PROJECT_OTHER_CLIENT
    @deprecated(reason: """This enum field  will be removed
    after 2022/01/13. Use `EXECUTE_OTHER_GROUP_OTHER_CLIENT` instead.""")
  "The hacker started working on another group from the same client"
  EXECUTE_OTHER_PROJECT_SAME_CLIENT
    @deprecated(reason: """This enum field  will be removed
    after 2022/01/13. Use `EXECUTE_OTHER_GROUP_SAME_CLIENT` instead.""")
  "The hacker stopped their work"
  NONE
  "The hacker started doing something else"
  OTHER
  "The hacker started training"
  TRAINING
}

"Actions before getting blocked by an event"
enum ActionsBeforeBlocking {
  "Document group"
  DOCUMENT_GROUP
  "Document group"
  DOCUMENT_PROJECT @deprecated(reason: """This enum field  will
    be removed after 2022/01/13. Use `DOCUMENT_GROUP` instead.""")
  "None"
  NONE
  "Other"
  OTHER
  "Testing another part of the Target of Evaluation"
  TEST_OTHER_PART_TOE
}

"Components affected during an Event"
enum AffectedComponents {
  "Client test station"
  CLIENT_STATION
  "Compilation error"
  COMPILE_ERROR
  "Group documentation"
  DOCUMENTATION
  "Fluid test station"
  FLUID_STATION
  "Internet connectivity"
  INTERNET_CONNECTION
  "Local connectivity"
  LOCAL_CONNECTION
  "Other component(s)"
  OTHER
  "Source code"
  SOURCE_CODE
  "Test data"
  TEST_DATA
  "Altered Target of Evaluation"
  TOE_ALTERATION
  "Target of Evaluation credentials"
  TOE_CREDENTIALS
  "Target of Evaluation exclusion"
  TOE_EXCLUSSION
  "Target of Evaluation location (IP, URL)"
  TOE_LOCATION
  "Target of Evaluation privileges"
  TOE_PRIVILEGES
  "Altered Target of Evaluation"
  TOE_UNACCESSIBLE
  "Unavailable Target of Evaluation"
  TOE_UNAVAILABLE
  "Unstable Target of Evaluation"
  TOE_UNSTABLE
  "VPN connectivity"
  VPN_CONNECTION
}

"OAuth providers"
enum AuthProvider {
  "Bitbucket"
  BITBUCKET
  "Google"
  GOOGLE
  "Microsoft"
  MICROSOFT
}

"Billing subscription type enum definition"
enum BillingSubscriptionType {
  "Free"
  FREE
  "Continuous Machine"
  MACHINE
  "Continuous Squad"
  SQUAD
}

"Origin of requests made"
enum CallerOrigin {
  "The request came from the API"
  API
  "The request came from the ASM Frontend"
  FRONT
}

"Git root cloning status"
enum CloningStatus {
  "Cloning in progress"
  CLONING
  "Cloning failed"
  FAILED
  "Cloning was successful"
  OK
  "Cloning status unknown"
  UNKNOWN
}

"Reasons to remove a Finding"
enum RemoveFindingJustification {
  "Finding is a duplicate of another"
  DUPLICATED
  "Finding is a false positive"
  FALSE_POSITIVE
  "Finding is not required"
  NOT_REQUIRED
}

"Reasons to remove a Vulnerability"
enum RemoveVulnerabilityJustification {
  "Vulnerability is a duplicate of another"
  DUPLICATED
  "Vulnerability is a false positive"
  FALSE_POSITIVE
  "Vulnerability was mistakenly reported"
  REPORTING_ERROR
}

"Reasons to downgrade a Group's services/plans"
enum UpdateGroupReason {
  "Budget constraints"
  BUDGET
  "Client decided to end the security testing"
  GROUP_FINALIZATION
  "Client decided to put on hold the security testing"
  GROUP_SUSPENSION
  "No particular reason"
  NONE
  "Another reason not covered"
  OTHER
}

"Where the event was present"
enum EventAccessibility {
  "Client Environment"
  ENVIRONMENT
  "Client Repository"
  REPOSITORY
}

"Place where the hacker was in when the event happened"
enum EventContext {
  "At the client's"
  CLIENT
  "Fluid"
  FLUID
  "Another place"
  OTHER
  "Planning"
  PLANNING
  "Telecommuting"
  TELECOMMUTING
}

"Types of Event evidence"
enum EventEvidenceType {
  "File"
  FILE
  "Image"
  IMAGE
}

"Event type enum definition"
enum EventType {
  "Authorization for special attack"
  AUTHORIZATION_SPECIAL_ATTACK
  "Client approves a change of the Target of Evaluation"
  CLIENT_APPROVES_CHANGE_TOE
  "Client detects the attack"
  CLIENT_DETECTS_ATTACK
  "High availability approval"
  HIGH_AVAILABILITY_APPROVAL
  "Incorrect or missing supplies"
  INCORRECT_MISSING_SUPPLIES
  "Other"
  OTHER
  "Target of Evaluation different than agreed upon"
  TOE_DIFFERS_APPROVED
}

"Evidence description enum definition"
enum EvidenceDescriptionType {
  "Animated exploitation"
  ANIMATION
  "Evidence 1"
  EVIDENCE1
  "Evidence 2"
  EVIDENCE2
  "Evidence 3"
  EVIDENCE3
  "Evidence 4"
  EVIDENCE4
  "Evidence 5"
  EVIDENCE5
  "Exploitation"
  EXPLOITATION
}

"Evidence type enum definition"
enum EvidenceType {
  "Animated exploitation"
  ANIMATION
  "Evidence 1"
  EVIDENCE1
  "Evidence 2"
  EVIDENCE2
  "Evidence 3"
  EVIDENCE3
  "Evidence 4"
  EVIDENCE4
  "Evidence 5"
  EVIDENCE5
  "Exploitation"
  EXPLOITATION
  "Records"
  RECORDS
}

"Stakeholder invitation state enum definition"
enum InvitationState {
  "Acceptance confirmed"
  CONFIRMED
  "Acceptance pending"
  PENDING
  "Unregistered invitation"
  UNREGISTERED
}

"Type of Finding consult enum definition"
enum FindingConsultType {
  "To share information about the finding"
  CONSULT
  "To review the finding and suggest adjustments"
  OBSERVATION
}

"Entity report frequency enum definition"
enum Frequency {
  "Daily"
  DAILY
  "Hourly"
  HOURLY
  "Monthly"
  MONTHLY
  "Never receive reports"
  NEVER
  "Weekly"
  WEEKLY
}

"Language for Findings"
enum Language {
  "English"
  EN
  "Spanish"
  ES
}

"Name entity for Internal Names queries/generation"
enum NameEntity {
  "Group"
  GROUP
  "Organization"
  ORGANIZATION
}

"Approval status of an organization finding policy"
enum OrganizationFindingPolicy {
  "Policy was approved and enacted"
  APPROVED
  "Policy was rejected and discarded"
  REJECTED
}

"Status of an organization finding policy"
enum OrganizationFindingPolicyStatus {
  "Approved"
  APPROVED
  "Inactive"
  INACTIVE
  "Rejected"
  REJECTED
  "Submitted"
  SUBMITTED
}

"Organization stakeholder role enum definition"
enum OrganizationRole {
  "User"
  CUSTOMER @deprecated(reason: """This enum field  will be removed
    after 2022/08/08. Use `USER` instead.""")
  "User Manager"
  CUSTOMERADMIN @deprecated(reason: """This enum field  will be removed
    after 2022/08/07. Use `USER_MANAGER` instead.""")
  "Customer Manager"
  CUSTOMER_MANAGER
  "User"
  USER
  "User Manager"
  USER_MANAGER
}

"Reasons allowed for removing a group enum dfinition"
enum RemoveGroupReason {
  "Different security testing strategy"
  DIFF_SECTST
  "Information will be moved to a different group"
  MIGRATION
  "No more security testing"
  NO_SECTST
  "System will be deprecated"
  NO_SYSTEM
  "Other reason not mentioned above"
  OTHER
}

"Language for Group Reports enum definition"
enum ReportLang {
  "English"
  EN
}

"Group Reports type enum definition"
enum ReportType {
  "ZIP file (Findings data)"
  DATA
  "PDF (Executive)"
  PDF
  "Excel Spreadsheet (Technical)"
  XLS
}

"Root state enum definition"
enum ResourceState {
  "Active root"
  ACTIVE
  "Inactive root"
  INACTIVE
}

"Testing service type enum definition"
enum ServiceType {
  "Black-box testing"
  BLACK
  "White-box testing"
  WHITE
}

"Use of Sorts enum definition"
enum Sorts {
  "Sorts wasn't involved"
  NO
  "Sorts was involved"
  YES
}

"Stakeholder entity scope enum definition"
enum StakeholderEntity {
  "Group"
  GROUP
  "Organization"
  ORGANIZATION
}

"Stakeholder role enum definition"
enum StakeholderRole {
  "Administrator"
  ADMIN
  "Architect"
  ARCHITECT
  "User"
  CUSTOMER @deprecated(reason: """This enum field  will be removed
    after 2022/08/08. Use `USER` instead.""")
  "User Manager"
  CUSTOMERADMIN @deprecated(reason: """This enum field  will be removed
    after 2022/08/07. Use `USER_MANAGER` instead.""")
  "Customer Manager"
  CUSTOMER_MANAGER
  "Executive"
  EXECUTIVE
  "Hacker"
  HACKER
  "Internal Manager"
  INTERNAL_MANAGER
  "Reattacker"
  REATTACKER
  "Resourcer"
  RESOURCER
  "Reviewer"
  REVIEWER
  "Forces"
  SERVICE_FORCES
  "User"
  USER
  "User Manager"
  USER_MANAGER
}

"Subscription report entity enum definition"
enum SubscriptionReportEntity {
  "Comments"
  COMMENTS
  "Daily digest"
  DIGEST
  "Group"
  GROUP
  "Organization"
  ORGANIZATION
  "Portfolio"
  PORTFOLIO
}

"Group subscription type enum definition"
enum SubscriptionType {
  "Continuous Hacking"
  CONTINUOUS
  "One-Shot Hacking"
  ONESHOT
}

"Group tier type enum definition"
enum TierType {
  "Free Tier"
  FREE
  "Continuous Machine Tier"
  MACHINE
  "One-Shot Tier"
  ONESHOT
  "Other custom tier (old)"
  OTHER
  "Continuous Squad Tier"
  SQUAD
}

"Update client description treatment enum definition"
enum UpdateClientDescriptionTreatment {
  "Temporally accepted"
  ACCEPTED
  "Permanently accepted"
  ACCEPTED_UNDEFINED
  "In progress"
  IN_PROGRESS
}

"Vulnerability state"
enum VulnerabilityState {
  "Accepted"
  ACCEPTED
  "Closed/Solved"
  CLOSED
  "Open"
  OPEN
  "Unknown state"
  UNKNOWN
}

"Treatment given to a vulnerability"
enum VulnerabilityTreatment {
  "The client opted to temporarily assume the risk"
  ACCEPTED
  "The client opted to indefinitely assume the risk"
  ACCEPTED_UNDEFINED
  "The client is working on a solution"
  IN_PROGRESS
  "No treatment has been given yet"
  NEW
}

"Protocol to use in URLRoots enum definition"
enum URLProtocol {
  "HTTP"
  HTTP
  "HTTPS"
  HTTPS
}

"Reasons to deactivate a Root enum definition"
enum RootDeactivationReason {
  "The Root is out of the scope for this group"
  OUT_OF_SCOPE
  "The Root was registered by mistake"
  REGISTERED_BY_MISTAKE
}

"Types of authentication to a Git repository"
enum CredentialType {
  "SSH"
  SSH
}
