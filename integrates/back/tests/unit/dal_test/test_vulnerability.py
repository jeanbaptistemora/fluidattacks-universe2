from custom_exceptions import (
    VulnNotFound,
)
from dataloaders import (
    Dataloaders,
    get_new_context,
)
from db_model.enums import (
    Source,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
    VulnerabilityType,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
    VulnerabilityTreatment,
    VulnerabilityTreatmentStatus,
)
import os
import pytest
from starlette.datastructures import (
    UploadFile,
)
from vulnerabilities.dal import (
    delete,
    upload_file,
)

pytestmark = [
    pytest.mark.asyncio,
]


@pytest.mark.changes_db
async def test_delete() -> None:
    loaders: Dataloaders = get_new_context()
    finding_id = "436992569"
    vuln_id = "8226e222-8128-438d-a9b7-93eeb93a36b3"
    assert (
        Vulnerability(
            finding_id="436992569",
            id="8226e222-8128-438d-a9b7-93eeb93a36b3",
            specific="333",
            state=VulnerabilityState(
                modified_by="unittest@fluidattacks.com",
                modified_date="2019-09-13T15:09:02+00:00",
                source=Source.ASM,
                status=VulnerabilityStateStatus.CLOSED,
                justification=None,
            ),
            type=VulnerabilityType.PORTS,
            where="192.168.100.107",
            bug_tracking_system_url=None,
            commit=None,
            custom_severity=None,
            hash=None,
            repo=None,
            stream=None,
            tags=None,
            treatment=VulnerabilityTreatment(
                modified_date="2019-09-13T15:00:03+00:00",
                status=VulnerabilityTreatmentStatus.NEW,
                acceptance_status=None,
                accepted_until=None,
                justification=None,
                manager=None,
                modified_by=None,
            ),
            verification=None,
            zero_risk=None,
        )
        == await loaders.vulnerability_typed.load(vuln_id)
    )
    assert await delete(vuln_id, finding_id)
    loaders.vulnerability_typed.clear(vuln_id)
    with pytest.raises(VulnNotFound):
        await loaders.vulnerability_typed.load(vuln_id)


async def test_upload_file() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "../mock/test-vulns.yaml")
    with open(filename, "rb") as btest_file:
        test_file = UploadFile(filename=btest_file.name)
        await test_file.write(btest_file.read())
        await test_file.seek(0)
        assert await upload_file(test_file) == "test-vulns.yaml"
