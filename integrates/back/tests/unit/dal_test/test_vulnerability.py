import os
import pytest

from boto3.dynamodb.conditions import Attr, Key, Not
from starlette.datastructures import UploadFile

from vulnerabilities.dal import (
    delete,
    get,
    upload_file,
)


pytestmark = [
    pytest.mark.asyncio,
]


@pytest.mark.changes_db
async def test_delete() -> None:
    # UUID finding_id
    test_1 = ("8226e222-8128-438d-a9b7-93eeb93a36b3", "436992569")
    assert [
        {
            "UUID": "8226e222-8128-438d-a9b7-93eeb93a36b3",
            "finding_id": "436992569",
            "historic_state": [
                {
                    "analyst": "unittest@fluidattacks.com",
                    "date": "2019-09-13 10:00:03",
                    "approval_status": "APPROVED",
                    "source": "integrates",
                    "state": "open",
                },
                {
                    "analyst": "unittest@fluidattacks.com",
                    "date": "2019-09-13 10:09:02",
                    "approval_status": "APPROVED",
                    "source": "integrates",
                    "state": "closed",
                },
            ],
            "historic_treatment": [
                {"date": "2019-09-13 10:00:03", "treatment": "NEW"}
            ],
            "specific": "333",
            "vuln_type": "ports",
            "where": "192.168.100.107",
        }
    ] == await get(test_1[0])
    assert await delete(*test_1)
    assert [] == await get(test_1[0])


async def test_upload_file() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "../mock/test-vulns.yaml")
    with open(filename, "rb") as btest_file:
        test_file = UploadFile(filename=btest_file.name)
        await test_file.write(btest_file.read())
        await test_file.seek(0)
        assert await upload_file(test_file) == "test-vulns.yaml"
