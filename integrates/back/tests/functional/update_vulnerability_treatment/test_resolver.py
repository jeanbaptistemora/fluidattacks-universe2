from . import (
    get_result,
)
from custom_exceptions import (
    InvalidFieldLength,
)
from dataloaders import (
    Dataloaders,
    get_new_context,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)
import pytest
from typing import (
    Any,
    Dict,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ("email", "custom_severity", "tag"),
    [
        ("user@gmail.com", 1, "tag2"),
        ("hacker@gmail.com", 10, "tag3"),
        ("user_manager@gmail.com", 100, "tag4"),
        ("vulnerability_manager@gmail.com", 500, "tag5"),
        ("executive@gmail.com", 1000, "tag6"),
    ],
)
async def test_update_vulnerability_treatment(
    populate: bool, email: str, custom_severity: int, tag: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"

    loaders: Dataloaders = get_new_context()
    vuln: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert not vuln.custom_severity or vuln.custom_severity != custom_severity
    assert not vuln.tags or tag not in vuln.tags

    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: Dict[str, Any] = await get_result(
        user=email,
        finding_id=finding_id,
        vuln_id=vuln_id,
        bts=external_bts,
        severity=custom_severity,
        tag=tag,
    )

    assert "errors" not in result
    assert "success" in result["data"]["updateVulnerabilityTreatment"]
    assert result["data"]["updateVulnerabilityTreatment"]["success"]

    loaders.vulnerability.clear(vuln_id)
    updated: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert updated.bug_tracking_system_url == external_bts
    assert updated.custom_severity == custom_severity
    assert tag in updated.tags
    assert updated.tags == sorted(updated.tags)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["user@gmail.com"],
    ],
)
async def test_update_vulnerability_treatment_clear_fields(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR

    loaders: Dataloaders = get_new_context()
    vuln: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert vuln.bug_tracking_system_url == external_bts
    assert vuln.custom_severity == 1000
    assert vuln.tags == ["tag1", "tag2", "tag3", "tag4", "tag5", "tag6"]

    result: Dict[str, Any] = await get_result(
        user=email,
        finding_id=finding_id,
        vuln_id=vuln_id,
    )

    assert "errors" not in result
    assert "success" in result["data"]["updateVulnerabilityTreatment"]
    assert result["data"]["updateVulnerabilityTreatment"]["success"]

    loaders.vulnerability.clear(vuln_id)
    updated: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert updated.bug_tracking_system_url is None
    assert updated.custom_severity is None
    assert updated.tags == vuln.tags


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
        ["reattacker@gmail.com"],
        ["customer_manager@fluidattacks.com"],
    ],
)
async def test_update_vulnerability_treatment_fail(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: Dict[str, Any] = await get_result(
        user=email, finding_id=finding_id, vuln_id=vuln_uuid, bts=external_bts
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == "Access denied"


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment")
@pytest.mark.parametrize(
    ["email"],
    [
        ["user@gmail.com"],
        ["hacker@gmail.com"],
    ],
)
async def test_update_vulnerability_treatmenterability_fail_1(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    tag: str = "inputthatismorethanthirtycharacter"
    result: Dict[str, Any] = await get_result(
        user=email, finding_id=finding_id, vuln_id=vuln_uuid, bts="", tag=tag
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == str(InvalidFieldLength())
