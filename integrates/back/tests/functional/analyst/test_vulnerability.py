# Standard libraries
import os
import pytest

# Third party libraries
from starlette.datastructures import UploadFile

# Local libraries
from back.tests.functional.analyst.utils import get_result
from backend.api import get_new_context
from newutils import datetime as datetime_utils


@pytest.mark.asyncio
@pytest.mark.resolver_test_group('old')
async def test_vulnerability():
    context = get_new_context()
    today = datetime_utils.get_as_str(
        datetime_utils.get_now(),
        date_format='%Y-%m-%d'
    )
    cwe = '200'
    description = 'This is pytest created draft'
    group_name = 'unittesting'
    recommendation = 'Solve this finding'
    requirements = 'REQ.0001. Apply filters'
    risk = 'This is pytest created draft'
    threat = 'Attacker'
    title = 'F001. Very serious vulnerability'
    draft_type = 'SECURITY'
    query = f'''
        mutation {{
            createDraft(
                cwe: "{cwe}",
                description: "{description}",
                projectName: "{group_name}",
                recommendation: "{recommendation}",
                requirements: "{requirements}",
                risk: "{risk}",
                threat: "{threat}",
                title: "{title}",
                type: {draft_type}
            ) {{
                success
            }}
        }}

    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert 'success' in result['data']['createDraft']
    assert result['data']['createDraft']['success']

    context = get_new_context()
    query = f'''
        query {{
            project(projectName: "{group_name}"){{
                drafts {{
                    id
                    title
                }}
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    draft = [draft for draft in result['data']['project']['drafts'] if draft['title'] == title][0]
    draft_id = draft['id']

    context = get_new_context()
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, '../../unit/mock/test-vulns.yaml')
    with open(filename, 'rb') as test_file:
        uploaded_file = UploadFile(test_file.name, test_file, 'text/x-yaml')
        query = '''
            mutation UploadFileMutation(
                $file: Upload!, $findingId: String!
            ) {
                uploadFile (
                    file: $file,
                    findingId: $findingId
                ) {
                    success
                }
            }
        '''
        variables = {
            'file': uploaded_file,
            'findingId': draft_id,
        }
        data = {'query': query, 'variables': variables}
        result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['uploadFile']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            updateSeverity (
            findingId: "{draft_id}",
            data: {{
                attackComplexity: 0.77, attackVector: 0.62,
                availabilityImpact: "0", availabilityRequirement: "1",
                confidentialityImpact: "0", confidentialityRequirement: "1",
                cvssVersion: "3.1", exploitability: 0.91, id: "{draft_id}",
                integrityImpact: "0.22", integrityRequirement: "1",
                modifiedAttackComplexity: 0.77, modifiedAttackVector: 0.62,
                modifiedAvailabilityImpact: "0",
                modifiedConfidentialityImpact: "0",
                modifiedIntegrityImpact: "0.22",
                modifiedPrivilegesRequired: "0.62",
                modifiedSeverityScope: 0, modifiedUserInteraction: 0.85,
                privilegesRequired: "0.62", remediationLevel: "0.97",
                reportConfidence: "0.92",
                severity: "2.9", severityScope: 0, userInteraction: 0.85
            }}
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert 'success' in result['data']['updateSeverity']
    assert result['data']['updateSeverity']['success']

    context = get_new_context()
    query = '''
        mutation UpdateEvidenceMutation(
            $evidenceId: EvidenceType!, $file: Upload!, $findingId: String!
        ) {
            updateEvidence(
                evidenceId: $evidenceId, file: $file, findingId: $findingId
            ) {
                success
            }
        }
    '''
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, '../../unit/mock/test-anim.gif')
    with open(filename, 'rb') as test_file:
        uploaded_file = UploadFile(test_file.name, test_file, 'image/gif')
        variables = {
            'evidenceId': 'ANIMATION',
            'findingId': draft_id,
            'file': uploaded_file
        }
        data = {'query': query, 'variables': variables}
        result = await get_result(data, context=context)
        assert 'errors' not in result
        assert 'success' in result['data']['updateEvidence']
        assert result['data']['updateEvidence']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            submitDraft(findingId: "{draft_id}") {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['submitDraft']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            approveDraft(draftId: "{draft_id}") {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(
        data,
        stakeholder='integratesmanager@gmail.com',
        context=context
    )
    assert 'errors' not in result
    assert result['data']['approveDraft']['success']

    context = get_new_context()
    finding_id = draft_id
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                vulnerabilities{{
                    id
                    where
                }}
                openVulnerabilities
                closedVulnerabilities
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['finding']['openVulnerabilities'] == 1
    assert result['data']['finding']['closedVulnerabilities'] == 2
    vulns = result['data']['finding']['vulnerabilities']
    vuln_uuid = [x for x in vulns if x['where'] == 'https://example.com'][0]['id']

    context = get_new_context()
    query = f'''
        mutation {{
            requestVerificationVuln(
                findingId: "{finding_id}",
                justification: "this is a comenting test of a request verification in vulns",
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['requestVerificationVuln']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            verifyRequestVuln(
                findingId: "{finding_id}",
                justification: "Vuln verified",
                openVulns: ["{vuln_uuid}"],
                closedVulns: []
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['verifyRequestVuln']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            downloadVulnFile (findingId: "{finding_id}") {{
                url
                success
            }}
        }}
    '''
    project_name = 'unittesting'
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['downloadVulnFile']['success']
    assert 'url' in result['data']['downloadVulnFile']
    assert f'localhost:9000/fluidintegrates.reports/{project_name}-{finding_id}' \
        in result['data']['downloadVulnFile']['url']

    context = get_new_context()
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                analyst
                currentApprovalStatus
                currentState
                findingId
                historicState
                historicVerification{{
                    date
                    status
                }}
                id
                remediated
                severity
                source
                specific
                tag
                tags
                verification
                vulnType
                where
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['vulnerability']['analyst'] == 'integratesanalyst@fluidattacks.com'
    assert result['data']['vulnerability']['currentApprovalStatus'] == ''
    assert result['data']['vulnerability']['currentState'] == 'open'
    assert result['data']['vulnerability']['findingId'] == finding_id
    result['data']['vulnerability']['historicState'][0]['date'] = (
        result['data']['vulnerability']['historicState'][0]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicState'] == [
        {
            'date': today,
            'analyst': 'integratesanalyst@fluidattacks.com',
            'source': 'integrates',
            'state': 'open',
        }
    ]
    result['data']['vulnerability']['historicVerification'][0]['date'] = (
        result['data']['vulnerability']['historicVerification'][0]['date'][:-9]
    )
    result['data']['vulnerability']['historicVerification'][1]['date'] = (
        result['data']['vulnerability']['historicVerification'][1]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicVerification'] == [
        {
            'date': today,
            'status': 'REQUESTED'
        },
        {
            'date': today,
            'status': 'VERIFIED'
        }
    ]
    assert result['data']['vulnerability']['id'] == vuln_uuid
    assert result['data']['vulnerability']['remediated'] == False
    assert result['data']['vulnerability']['severity'] == ''
    assert result['data']['vulnerability']['source'] == 'integrates'
    assert result['data']['vulnerability']['specific'] == 'phone'
    assert result['data']['vulnerability']['tag'] == ''
    assert result['data']['vulnerability']['tags'] == []
    assert result['data']['vulnerability']['verification'] == 'Verified'
    assert result['data']['vulnerability']['vulnType'] == 'inputs'
    assert result['data']['vulnerability']['where'] == 'https://example.com'

    context = get_new_context()
    query = f'''
        mutation {{
            deleteVulnerability (
                id: "{vuln_uuid}"
                findingId: "{finding_id}"
                justification: REPORTING_ERROR
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['deleteVulnerability']

    context = get_new_context()
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                vulnerabilities{{
                    id
                    where
                }}
                openVulnerabilities
                closedVulnerabilities
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['finding']['openVulnerabilities'] == 0
    assert result['data']['finding']['closedVulnerabilities'] == 2
    vulns = result['data']['finding']['vulnerabilities']
    assert [] == [x for x in vulns if x['id'] == vuln_uuid]
