from . import (
    get_result,
)
from custom_exceptions import (
    InvalidFieldLength,
)
import pytest
from typing import (
    Any,
    Dict,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment_new")
@pytest.mark.parametrize(
    ["email"],
    [
        ["customer@gmail.com"],
        ["hacker@gmail.com"],
        ["customeradmin@gmail.com"],
        ["executive@gmail.com"],
        ["group_manager@gmail.com"],
    ],
)
async def test_update_vulnerability_treatment(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "475041513"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: Dict[str, Any] = await get_result(
        user=email, finding=finding_id, vuln=vuln_uuid, bts=external_bts
    )
    assert "errors" not in result
    assert "success" in result["data"]["updateVulnerabilityTreatment"]
    assert result["data"]["updateVulnerabilityTreatment"]["success"]


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment_new")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
        ["reattacker@gmail.com"],
    ],
)
async def test_update_vulnerability_treatment_fail(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "475041513"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    # FP: local testing
    external_bts: str = "http://test"  # NOSONAR
    result: Dict[str, Any] = await get_result(
        user=email, finding=finding_id, vuln=vuln_uuid, bts=external_bts
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == "Access denied"


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("update_vulnerability_treatment_new")
@pytest.mark.parametrize(
    ["email"],
    [
        ["customer@gmail.com"],
        ["hacker@gmail.com"],
    ],
)
async def test_update_vulnerability_treatmenterability_fail_1(
    populate: bool, email: str
) -> None:
    assert populate
    finding_id: str = "475041513"
    vuln_uuid: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    tag: str = "inputthatismorethanthirtycharacter"
    result: Dict[str, Any] = await get_result(
        user=email, finding=finding_id, vuln=vuln_uuid, bts="", tag=tag
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == str(InvalidFieldLength())
