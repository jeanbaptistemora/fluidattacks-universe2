# Standard libraries
import os
import pytest

# Third party libraries
from starlette.datastructures import UploadFile

# Local libraries
from backend.api import get_new_context
from backend.utils import datetime as datetime_utils
from back.tests.functional.admin.utils import get_result

pytestmark = pytest.mark.asyncio


async def test_vulnerability():
    context = get_new_context()
    today = datetime_utils.get_as_str(
        datetime_utils.get_now(),
        date_format='%Y-%m-%d'
    )
    finding_id = '463558592'
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, '../../unit/mock/test-vulns.yaml')
    with open(filename, 'rb') as test_file:
        uploaded_file = UploadFile(test_file.name, test_file, 'text/x-yaml')
        query = '''
            mutation UploadFileMutation(
                $file: Upload!, $findingId: String!
            ) {
                uploadFile (
                    file: $file,
                    findingId: $findingId
                ) {
                    success
                }
            }
        '''
        variables = {
            'file': uploaded_file,
            'findingId': finding_id,
        }
        data = {'query': query, 'variables': variables}
        result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['uploadFile']['success']

    context = get_new_context()
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                vulnerabilities{{
                    id
                    where
                }}
                openVulnerabilities
                closedVulnerabilities
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['finding']['openVulnerabilities'] == 2
    assert result['data']['finding']['closedVulnerabilities'] == 1
    vulns = result['data']['finding']['vulnerabilities']
    vuln_uuid = [x for x in vulns if x['where'] == 'https://example.com'][0]['id']

    context = get_new_context()
    query = f'''
        mutation {{
            requestVerificationVuln(
                findingId: "{finding_id}",
                justification: "this is a comenting test of a request verification in vulns",
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['requestVerificationVuln']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            verifyRequestVuln(
                findingId: "{finding_id}",
                justification: "Vuln verified",
                openVulns: ["{vuln_uuid}"],
                closedVulns: []
            ) {{
                success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['verifyRequestVuln']['success']

    context = get_new_context()
    query = f'''
        mutation {{
            downloadVulnFile (findingId: "{finding_id}") {{
                url
                success
            }}
        }}
    '''
    project_name = 'unittesting'
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['downloadVulnFile']['success']
    assert 'url' in result['data']['downloadVulnFile']
    assert f'd22vuezekkq177.cloudfront.net/{project_name}-{finding_id}' \
        in result['data']['downloadVulnFile']['url']

    context = get_new_context()
    expected_output = {
        'finding_id': '463558592',
        'UUID': vuln_uuid,
        'vuln_type': 'inputs',
        'specific': 'phone',
        'where': 'https://example.com',
        'historic_state': [{
            'date': today,
            'analyst': 'integratesmanager@gmail.com',
            'source': 'integrates',
            'state': 'open',
        }],
        'historic_verification': [
            {
                'date': today,
                'status': 'REQUESTED'
            },
            {
                'date': today,
                'status': 'VERIFIED'
            }
        ],
        'analyst': 'integratesmanager@gmail.com',
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                findingId
                id
                vulnType
                specific
                where
                historicState
                historicVerification{{
                    date
                    status
                }}
                analyst
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['vulnerability']['findingId'] == expected_output.get('finding_id')
    assert result['data']['vulnerability']['where'] == expected_output.get('where')
    result['data']['vulnerability']['historicState'][0]['date'] = (
        result['data']['vulnerability']['historicState'][0]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicState'] == expected_output.get('historic_state')
    assert result['data']['vulnerability']['id'] == expected_output.get('UUID')
    assert result['data']['vulnerability']['specific'] == expected_output.get('specific')
    assert result['data']['vulnerability']['vulnType'] == expected_output.get('vuln_type')
    result['data']['vulnerability']['historicVerification'][0]['date'] = (
        result['data']['vulnerability']['historicVerification'][0]['date'][:-9]
    )
    result['data']['vulnerability']['historicVerification'][1]['date'] = (
        result['data']['vulnerability']['historicVerification'][1]['date'][:-9]
    )
    assert result['data']['vulnerability']['historicVerification'] == expected_output.get('historic_verification')
    assert result['data']['vulnerability']['analyst'] == expected_output.get('analyst')

    context = get_new_context()
    query = f'''
        mutation {{
            deleteVulnerability (
            id: "{vuln_uuid}"
            findingId: "{finding_id}"
            justification: REPORTING_ERROR
            ) {{
            success
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['deleteVulnerability']

    context = get_new_context()
    query = f'''
        query {{
            finding(identifier: "{finding_id}"){{
                vulnerabilities{{
                    id
                    where
                }}
                openVulnerabilities
                closedVulnerabilities
            }}
        }}
    '''
    data = {'query': query}
    result = await get_result(data, context=context)
    assert 'errors' not in result
    assert result['data']['finding']['openVulnerabilities'] == 1
    assert result['data']['finding']['closedVulnerabilities'] == 1
    vulns = result['data']['finding']['vulnerabilities']
    assert [] == [x for x in vulns if x['id'] == vuln_uuid]
