from back.tests.functional.resourcer.utils import (
    get_result,
)
from dataloaders import (
    get_new_context,
)
from newutils import (
    datetime as datetime_utils,
)
import pytest


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("old")
async def test_vulnerability() -> None:
    context = get_new_context()
    today = datetime_utils.get_as_str(
        datetime_utils.get_now(), date_format="%Y-%m-%d"
    )
    finding_id = "463558592"
    vuln_uuid = "54b94fa0-8f4f-4b10-a38a-6e848a9eb0c6"
    expected_output = {
        "finding_id": finding_id,
        "UUID": vuln_uuid,
        "vuln_type": "lines",
        "specific": "564",
        "where": "path/to/file4.ext",
        "historic_state": [
            {
                "date": "2019-01-16 08:47:07",
                "analyst": "unittest@fluidattacks.com",
                "source": "integrates",
                "state": "open",
            }
        ],
        "source": "integrates",
        "current_state": "open",
        "current_approval_status": "",
        "treatment_manager": "integratesuser@gmail.com",
        "severity": "",
        "tag": "test_two",
        "tags": ["test_two"],
        "remediated": True,
        "verification": "Requested",
    }
    query = f"""
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                findingId
                id
                vulnType
                specific
                where
                historicState
                source
                currentState
                currentApprovalStatus
                severity
                tag
                tags
                remediated
                verification
            }}
        }}
    """
    data = {"query": query}
    result = await get_result(data, context=context)
    assert "errors" not in result
    assert result["data"]["vulnerability"]["findingId"] == expected_output.get(
        "finding_id"
    )
    assert result["data"]["vulnerability"]["where"] == expected_output.get(
        "where"
    )
    assert result["data"]["vulnerability"][
        "historicState"
    ] == expected_output.get("historic_state")
    assert result["data"]["vulnerability"]["id"] == expected_output.get("UUID")
    assert result["data"]["vulnerability"]["specific"] == expected_output.get(
        "specific"
    )
    assert result["data"]["vulnerability"]["vulnType"] == expected_output.get(
        "vuln_type"
    )
    assert result["data"]["vulnerability"]["source"] == expected_output.get(
        "source"
    )
    assert result["data"]["vulnerability"][
        "currentState"
    ] == expected_output.get("current_state")
    assert result["data"]["vulnerability"][
        "currentApprovalStatus"
    ] == expected_output.get("current_approval_status")
    assert result["data"]["vulnerability"]["severity"] == expected_output.get(
        "severity"
    )
    assert result["data"]["vulnerability"]["tag"] == expected_output.get("tag")
    assert result["data"]["vulnerability"]["tags"] == expected_output.get(
        "tags"
    )
    assert result["data"]["vulnerability"][
        "remediated"
    ] == expected_output.get("remediated")
    assert result["data"]["vulnerability"][
        "verification"
    ] == expected_output.get("verification")

    context = get_new_context()
    query = f"""
        mutation {{
            requestVerificationVuln(
                findingId: "{finding_id}",
                justification: "this is a comenting test of a request verification in vulns",
                vulnerabilities:
                    ["{vuln_uuid}"]
            ) {{
                success
            }}
        }}
    """
    data = {"query": query}
    result = await get_result(data, context=context)
    assert "errors" in result
    assert (
        result["errors"][0]["message"]
        == "Exception - Request verification already requested"
    )

    context = get_new_context()
    expected_output = {
        "historic_verification": [{"date": today, "status": "REQUESTED"}],
    }
    query = f"""
        query {{
            vulnerability(uuid: "{vuln_uuid}") {{
                historicVerification{{
                        date
                        status
                 }}
                 tag
                 tags
            }}
        }}
    """
    data = {"query": query}
    result = await get_result(
        data, "integratesmanager@gmail.com", context=context
    )
    assert "errors" not in result
    result["data"]["vulnerability"]["historicVerification"][0][
        "date"
    ] = result["data"]["vulnerability"]["historicVerification"][0]["date"][:-9]
    assert result["data"]["vulnerability"][
        "historicVerification"
    ] == expected_output.get("historic_verification")
