# Standard libraries
import os
import pytest

# Third party libraries
from starlette.datastructures import UploadFile

# Local libraries
from backend.api import get_new_context
from back.tests.functional.utils import (
    get_graphql_result,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group('vulnerability')
async def test_admin(populate: bool):
    assert populate
    context = get_new_context()
    admin: str = 'test1@gmail.com'
    finding: str = '475041513'
    vulnerability: str = 'be09edb7-cd5c-47ed-bee4-97c645acdce8'
    expected_output = {
        'finding_id': finding,
        'UUID': vulnerability,
        'analyst': admin,
        'historic_state': [
            {
                'date': '2018-04-07 19:45:11',
                'analyst': 'test1@gmail.com',
                'source': 'integrates',
                'state': 'open',
                'approval_status': 'APPROVED',
            },
        ],
        'historic_treatment': [
            {
                'date': '2018-04-07 19:45:11',
                'treatment': 'NEW',
            },
        ],
        'historic_verification': [
            {
                'date': '2018-04-08 19:45:11',
                'status': 'REQUESTED',
            },
        ],
        'vuln_type': 'ports',
        'where': '192.168.1.20',
        'specific': '9999',
    }
    query = f'''
        query {{
            vulnerability(uuid: "{vulnerability}") {{
                findingId
                id
                analyst
                historicState
                historicTreatment{{
                    date
                    treatment
                }}
                historicVerification{{
                    date
                    status
                }}
                vulnType
                where
                specific
            }}
        }}
    '''
    data = {'query': query}
    result = await get_graphql_result(
        data,
        stakeholder=admin,
        context=context,
    )
    assert 'errors' not in result
    assert result['data']['vulnerability']['findingId'] == expected_output['finding_id']
    assert result['data']['vulnerability']['id'] == expected_output['UUID']
    assert result['data']['vulnerability']['analyst'] == expected_output['analyst']
    assert result['data']['vulnerability']['historicState'] == expected_output['historic_state']
    assert result['data']['vulnerability']['historicTreatment'] == expected_output['historic_treatment']
    assert result['data']['vulnerability']['historicVerification'] == expected_output['historic_verification']
    assert result['data']['vulnerability']['vulnType'] == expected_output['vuln_type']
    assert result['data']['vulnerability']['where'] == expected_output['where']
    assert result['data']['vulnerability']['specific'] == expected_output['specific']
