from back.tests.functional.utils import (
    get_graphql_result,
)
from dataloaders import (
    get_new_context,
)
from typing import (
    Any,
    Dict,
)


async def get_result(
    *,
    user: str,
    vulnerability: str,
) -> Dict[str, Any]:
    query: str = f"""
        query {{
            vulnerability(uuid: "{vulnerability}") {{
                hacker
                currentState
                cycles
                efficacy
                findingId
                historicState{{
                    date
                    hacker
                    source
                    state
                }}
                historicTreatment{{
                    acceptanceDate
                    date
                    treatment
                    treatmentManager
                    user
                }}
                historicVerification{{
                    date
                    status
                }}
                id
                lastReattackRequester
                remediated
                severity
                source
                specific
                tag
                tags
                verification
                vulnerabilityType
                where
            }}
        }}
    """
    data: Dict[str, str] = {
        "query": query,
    }
    return await get_graphql_result(
        data,
        stakeholder=user,
        context=get_new_context(),
    )
