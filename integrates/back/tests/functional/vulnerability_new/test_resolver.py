from . import (
    get_result,
)
import pytest
from typing import (
    Any,
    Dict,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("vulnerability_new")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
    ],
)
async def test_get_vulnerability(populate: bool, email: str) -> None:
    assert populate
    finding_id: str = "475041513"
    vulnerability_id: str = "be09edb7-cd5c-47ed-bee4-97c645acdce8"
    analyst: str = "test1@gmail.com"
    expected_output: Dict[str, Any] = {
        "finding_id": finding_id,
        "UUID": vulnerability_id,
        "analyst": analyst,
        "historic_state": [
            {
                "analyst": analyst,
                "approval_status": "APPROVED",
                "date": "2018-04-07 14:45:11",
                "source": "asm",
                "state": "open",
            },
        ],
        "historic_treatment": [
            {
                "date": "2018-04-07 12:45:11",
                "treatment": "NEW",
            },
        ],
        "historic_verification": [
            {
                "date": "2018-04-08 14:45:11",
                "status": "REQUESTED",
            },
        ],
        "current_state": "open",
        "vuln_type": "ports",
        # FP: local testing
        "where": "192.168.1.20",  # NOSONAR
        "specific": "9999",
        "severity": "",
        "tag": "",
        "tags": [],
        "verification": "Requested",
    }
    result: Dict[str, Any] = await get_result(
        user=email,
        vulnerability=vulnerability_id,
    )
    assert (
        result["data"]["vulnerability"]["findingId"]
        == expected_output["finding_id"]
    )
    assert (
        result["data"]["vulnerability"]["historicState"]
        == expected_output["historic_state"]
    )
    assert (
        result["data"]["vulnerability"]["historicTreatment"]
        == expected_output["historic_treatment"]
    )
    assert (
        result["data"]["vulnerability"]["vulnerabilityType"]
        == expected_output["vuln_type"]
    )
    assert result["data"]["vulnerability"]["where"] == expected_output["where"]
    assert (
        result["data"]["vulnerability"]["specific"]
        == expected_output["specific"]
    )
    assert (
        result["data"]["vulnerability"]["currentState"]
        == expected_output["current_state"]
    )
    assert (
        result["data"]["vulnerability"]["currentApprovalStatus"]
        == expected_output["historic_state"][-1]["approval_status"]
    )
    assert result["data"]["vulnerability"]["remediated"]
    assert result["data"]["vulnerability"]["severity"] == ""
    assert (
        result["data"]["vulnerability"]["source"]
        == expected_output["historic_state"][-1]["source"]
    )
    assert result["data"]["vulnerability"]["tag"] == ""
    assert result["data"]["vulnerability"]["tags"] == []
    assert (
        result["data"]["vulnerability"]["verification"]
        == expected_output["verification"]
    )
