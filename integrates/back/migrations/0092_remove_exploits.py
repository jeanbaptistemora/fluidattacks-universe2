# SPDX-FileCopyrightText: 2022 Fluid Attacks <development@fluidattacks.com>
#
# SPDX-License-Identifier: MPL-2.0

# pylint: disable=invalid-name,import-error
# This migration aims to delete exploit from dynamo and s3
#
# Execution time: 2021-06-18 19:47:50-05:00
# Finalization time: 2021-06-18 19:55:13-05:00

from aioextensions import (
    collect,
    run,
)
from dynamodb.operations_legacy import (
    scan,
)
from findings.dal import (
    remove_evidence,
    update,
)
from typing import (
    Any,
    Dict,
    List,
)

# Constants
PROD: bool = True

# Types
Item = Dict[str, Any]


async def remove_exploit(
    *, files: List[Item], exploit: Item, finding_id: str, group_name: str
) -> None:
    index: int = files.index(exploit)
    del files[index]
    evidence_id = exploit["file_url"]
    full_name = f"{group_name}/{finding_id}/{evidence_id}"
    print("Removing exploit from finding_id:", finding_id)

    if PROD:
        await collect(
            [
                update(finding_id, {"files": files}),
                remove_evidence(full_name),
            ]
        )


async def handle_remove_finding(item: Item) -> None:
    files: List[Item] = item.get("files", [])
    exploit: Item = next(
        (item for item in files if item["name"].lower() == "exploit"), {}
    )

    if exploit:
        await remove_exploit(
            files=files,
            exploit=exploit,
            finding_id=item["finding_id"],
            group_name=item["project_name"],
        )


async def handle_remove_findings(items: List[Item]) -> None:
    await collect(
        [
            handle_remove_finding(item)
            for item in items
            if not (
                item.get("finding", "").lower() == "wiped"
                or item.get("affected_systems", "").lower() == "masked"
            )
        ],
        workers=50,
    )


async def main() -> None:
    items: List[Item] = await scan("FI_findings", {})
    await handle_remove_findings(items)


if __name__ == "__main__":
    run(main())
