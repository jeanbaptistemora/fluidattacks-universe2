# SPDX-FileCopyrightText: 2022 Fluid Attacks <development@fluidattacks.com>
#
# SPDX-License-Identifier: MPL-2.0

from dataloaders import (
    get_new_context,
)
from db_model.enums import (
    Source,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
    VulnerabilityType,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
    VulnerabilityState,
    VulnerabilityUnreliableIndicators,
)
import pytest
from vulnerability_files.domain import (
    get_vulnerabilities_by_type,
    get_vulnerabilities_file,
    ungroup_vulnerability_specific,
)

pytestmark = [
    pytest.mark.asyncio,
]


async def test_get_vulnerabilities_by_type() -> None:
    context = get_new_context()
    finding_id = "422286126"
    test_data = await get_vulnerabilities_by_type(context, finding_id)
    expected_output = {
        "inputs": [],
        "lines": [
            {
                "commit_hash": "ea871eee64cfd5ce293411efaf4d3b446d04eb4a",
                "line": "12",
                "path": "test/data/lib_path/f060/csharp.cs",
                "state": "open",
                "source": "analyst",
                "tool": {"impact": "indirect", "name": "tool-2"},
            }
        ],
        "ports": [],
    }
    assert test_data == expected_output


async def test_get_vulnerabilities_file() -> None:
    context = get_new_context()
    finding_id = "988493279"
    group_name = "unittesting"
    assert (
        f"localhost:9000/integrates/reports/{group_name}-{finding_id}"
        in await get_vulnerabilities_file(context, finding_id, group_name)
    )


def test_ungroup_vulnerability_specific() -> None:
    vuln_type = "ports"
    specific = "4444"
    vulnerability = Vulnerability(
        created_by="hacker@gmail.com",
        created_date="2018-04-08T00:45:11+00:00",
        finding_id="3c475384-834c-47b0-ac71-a41a022e401c",
        group_name="",
        hacker_email="hacker@gmail.com",
        id="",
        state=VulnerabilityState(
            modified_by="hacker@gmail.com",
            modified_date="2018-04-08T00:45:11+00:00",
            source=Source.ASM,
            specific="4444",
            status=VulnerabilityStateStatus.OPEN,
            where="192.168.100.107",
        ),
        type=VulnerabilityType.PORTS,
        unreliable_indicators=VulnerabilityUnreliableIndicators(),
    )
    test_data = ungroup_vulnerability_specific(
        vuln_type, specific, vulnerability
    )
    expected_output = [vulnerability]
    assert isinstance(test_data, list)
    assert test_data == expected_output
