# SPDX-FileCopyrightText: 2022 Fluid Attacks <development@fluidattacks.com>
#
# SPDX-License-Identifier: MPL-2.0

import os
import pytest
from starlette.datastructures import (
    UploadFile,
)
from unittest import (
    mock,
)
from vulnerability_files.dal import (
    upload_vuln_file_to_s3,
)

pytestmark = [
    pytest.mark.asyncio,
]


async def test_upload_file() -> None:
    # side_effect to validate arguments passed by upload_vuln_file_to_s3
    # to s3.operations.upload_memory_file
    def side_effect(bucket: str, file_object: object, file_name: str) -> None:
        assert bool(
            bucket and file_object and file_name == "reports/test-vulns.yaml"
        )

    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "./mock/reports/test-vulns.yaml")
    with open(filename, "rb") as btest_file:
        test_file = UploadFile(filename=btest_file.name)
        await test_file.write(btest_file.read())
        await test_file.seek(0)
        # Mock upload_memory_file to avoid call to S3
        with mock.patch("s3.operations.upload_memory_file") as mock_upload:
            mock_upload.side_effect = side_effect
            assert await upload_vuln_file_to_s3(test_file) == "test-vulns.yaml"
