# pylint: disable=import-error
from back.test.unit.src.utils import (
    create_dummy_info,
    create_dummy_session,
)
from dataloaders import (
    Dataloaders,
    get_new_context,
)
from datetime import (
    datetime,
)
from db_model import (
    vulnerabilities as vulns_model,
)
from db_model.enums import (
    Source,
)
from db_model.utils import (
    adjust_historic_dates,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
)
from db_model.vulnerabilities.types import (  # type: ignore
    Vulnerability,
    VulnerabilityState,
    VulnerabilityTreatment,
    VulnerabilityTreatmentStatus,
)
from itertools import (
    chain,
)
from newutils import (
    datetime as datetime_utils,
)
import pytest

pytestmark = [
    pytest.mark.asyncio,
]


async def test_load_vulnerabilities() -> None:
    loaders: Dataloaders = get_new_context()
    finding_ids = ["436992569", "422286126", "560175507"]
    test_data_delete_listed = list(
        chain.from_iterable(
            await loaders.finding_vulnerabilities_all.load_many(finding_ids)
        )
    )
    test_data = await loaders.finding_vulnerabilities.load_many_chained(
        finding_ids
    )
    assert isinstance(test_data, tuple)
    assert len(test_data_delete_listed) == 30
    assert len(test_data) == 30
    assert isinstance(test_data[0], Vulnerability)
    assert test_data[0] is not None


@pytest.mark.changes_db
async def test_update_vulnerability_state() -> None:
    vuln_id = "e248e8e0-0323-41c7-bc02-4ee61d09f9c4"
    user_email = "unittest@fluidattacks.com"
    request = await create_dummy_session(user_email)
    info = create_dummy_info(request)
    loaders: Dataloaders = info.context.loaders
    vuln: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert vuln.state.status == VulnerabilityStateStatus.OPEN
    today = datetime_utils.get_utc_now()
    await vulns_model.update_historic_entry(
        current_value=vuln,
        finding_id=vuln.finding_id,
        vulnerability_id=vuln.id,
        entry=VulnerabilityState(
            commit=vuln.state.commit,
            modified_by=user_email,
            modified_date=today,
            source=Source.ASM,
            specific=vuln.state.specific,
            status=VulnerabilityStateStatus.CLOSED,
            where=vuln.state.where,
        ),
    )
    loaders.vulnerability.clear(vuln_id)
    closed_vuln: Vulnerability = await loaders.vulnerability.load(vuln_id)
    assert closed_vuln.state.status == VulnerabilityStateStatus.CLOSED
    assert closed_vuln.state.modified_by == user_email


async def test_adjust_historic_dates() -> None:
    historic = (
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-12T00:00:01+00:00"),
            status=VulnerabilityTreatmentStatus.NEW,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-12T00:00:01+00:00"),
            status=VulnerabilityTreatmentStatus.IN_PROGRESS,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-01-01T00:00:00+00:00"),
            status=VulnerabilityTreatmentStatus.ACCEPTED,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-30T14:35:01+00:00"),
            status=VulnerabilityTreatmentStatus.ACCEPTED_UNDEFINED,
        ),
    )
    assert adjust_historic_dates(historic) == (
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-12T00:00:01+00:00"),
            status=VulnerabilityTreatmentStatus.NEW,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-12T00:00:02+00:00"),
            status=VulnerabilityTreatmentStatus.IN_PROGRESS,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-12T00:00:03+00:00"),
            status=VulnerabilityTreatmentStatus.ACCEPTED,
        ),
        VulnerabilityTreatment(
            modified_date=datetime.fromisoformat("2021-12-30T14:35:01+00:00"),
            status=VulnerabilityTreatmentStatus.ACCEPTED_UNDEFINED,
        ),
    )
