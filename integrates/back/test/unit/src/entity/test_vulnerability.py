# pylint: disable=import-error
from api.schema import (
    SCHEMA,
)
from ariadne import (
    graphql,
)
from back.test.unit.src.utils import (
    create_dummy_session,
)
from custom_exceptions import (
    InvalidSchema,
    InvalidStream,
    RootNotFound,
)
from dataloaders import (
    apply_context_attrs,
    Dataloaders,
    get_new_context,
)
from db_model.findings.types import (
    Finding,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityVerificationStatus as VVerifStatus,
)
from db_model.vulnerabilities.types import (
    Vulnerability,
)
import json
from organizations_finding_policies import (
    domain as policies_domain,
)
import os
import pytest
from starlette.datastructures import (
    UploadFile,
)
from typing import (
    Any,
    Dict,
)

pytestmark = pytest.mark.asyncio


async def _get_result_async(
    data: Dict[str, Any], user: str = "integratesmanager@gmail.com"
) -> Dict[str, Any]:
    """Get result."""
    request = await create_dummy_session(user)
    request = apply_context_attrs(request)  # type: ignore
    _, result = await graphql(SCHEMA, data, context_value=request)

    return result


@pytest.mark.changes_db
async def test_upload_file() -> None:
    """Check for uploadFile mutation."""
    # pylint: disable=too-many-locals
    finding_id = "463558592"
    vuln_uuid = "74632c0c-db08-47c2-b013-c70e5b67c49f"
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "./mock/evidences/test-vulns.yaml")
    loaders: Dataloaders = get_new_context()
    vuln: Vulnerability = await loaders.vulnerability.load(vuln_uuid)
    assert vuln.verification.status == VVerifStatus.REQUESTED  # type: ignore

    with open(filename, "rb") as test_file:
        uploaded_file = UploadFile(
            filename=test_file.name,
            file=test_file,
            content_type="text/x-yaml",  # NOSONAR
        )
        query = """
            mutation UploadFileMutation(
                $file: Upload!, $findingId: String!
            ) {
                uploadFile (
                    file: $file,
                    findingId: $findingId
                ) {
                    success
                }
            }
        """
        variables = {
            "file": uploaded_file,
            "findingId": finding_id,
        }
        data = {"query": query, "variables": variables}
        result = await _get_result_async(data)

    assert "errors" not in result
    assert "success" in result["data"]["uploadFile"]
    loaders.vulnerability.clear(vuln_uuid)
    vuln = await loaders.vulnerability.load(vuln_uuid)
    assert vuln.verification.status == VVerifStatus.VERIFIED  # type: ignore
    finding: Finding = await loaders.finding.load(finding_id)
    assert len(finding.verification.vulnerability_ids) == 2  # type: ignore

    query = """
        query GetFindingVulnInfo($findingId: String!) {
            finding(identifier: $findingId) {
                title
                vulnerabilitiesConnection {
                    edges {
                        node {
                            commitHash
                            stream
                            specific
                            where
                            historicTreatment {
                                user
                                treatment
                            }
                        }
                    }
                }
            }
        }
    """
    data = {"query": query, "variables": {"findingId": finding_id}}
    result = await _get_result_async(data)
    assert "errors" not in result
    finding_name: str = result["data"]["finding"]["title"]
    loaders = get_new_context()
    finding_policy = await policies_domain.get_finding_policy_by_name(
        loaders=loaders,
        organization_name="okada",
        finding_name=finding_name.lower(),
    )
    assert finding_policy is not None
    user_policy = finding_policy.state.modified_by
    vulnerabilities = result["data"]["finding"]["vulnerabilitiesConnection"][
        "edges"
    ]
    for edge in vulnerabilities:
        vuln = edge["node"]
        if (
            vuln["where"] == "https://example.com"  # type: ignore
            and vuln["specific"] == "phone"  # type: ignore
        ):
            assert vuln["stream"] == "home > blog > articulo"  # type: ignore
            assert (
                vuln["historicTreatment"][-1]["treatment"]  # type: ignore
                == "ACCEPTED_UNDEFINED"
            )
            assert (
                vuln["historicTreatment"][-1]["user"]  # type: ignore
                == user_policy
            )
        if (
            vuln["where"] == "path/to/file3.ext"  # type: ignore
            and vuln["specific"] == "345"  # type: ignore
        ):
            assert (
                vuln["commitHash"]  # type: ignore
                == "e17059d1e17059d1e17059d1e17059d1e17059d1"
            )


async def test_upload_file_error() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(filename, "./mock/evidences/test-vuln-error.yaml")

    with open(filename, "rb") as test_file:
        uploaded_file = UploadFile(
            filename=test_file.name, file=test_file, content_type="text/x-yaml"
        )
        query = """
            mutation UploadFileMutation($file: Upload!, $findingId: String!) {
                uploadFile (file: $file, findingId: $findingId) {
                    success
                }
            }
        """  # NOSONAR
        variables = {
            "file": uploaded_file,
            "findingId": "463558592",
        }
        data = {"query": query, "variables": variables}
        result = await _get_result_async(data)

    assert "errors" in result
    field_pattern = [
        r"^(\b[\w-]{1,30}\b)+(,\b[\w-]{1,30}\b){0,9}$",
        "/inputs/0/stream",
    ]
    error_value = f'"values": [{json.dumps(field_pattern)}], "keys": []'
    assert result["errors"][0]["message"] == str(InvalidSchema(error_value))


async def test_upload_file_error_commit_hash() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(
        filename, "./mock/evidences/test-vuln-commit-hash-error.yaml"
    )

    with open(filename, "rb") as test_file:
        uploaded_file = UploadFile(
            filename=test_file.name, file=test_file, content_type="text/x-yaml"
        )
        query = """
            mutation UploadFileMutation($file: Upload!, $findingId: String!) {
                uploadFile (file: $file, findingId: $findingId) {
                    success
                }
            }
        """
        variables = {
            "file": uploaded_file,
            "findingId": "463558592",
        }
        data = {"query": query, "variables": variables}
        result = await _get_result_async(data)

    assert "errors" in result
    field_pattern = [r"^([a-f0-9]{40})$", "/lines/0/commit_hash"]
    error_value = f'"values": [{json.dumps(field_pattern)}], "keys": []'
    assert result["errors"][0]["message"] == str(InvalidSchema(error_value))


async def test_upload_file_error_stream() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(
        filename, "./mock/evidences/test-vuln-error-stream.yaml"
    )
    with open(filename, "rb") as test_file:
        uploaded_file = UploadFile(
            filename=test_file.name, file=test_file, content_type="text/x-yaml"
        )
        query = """
            mutation UploadFileMutation($file: Upload!, $findingId: String!) {
                uploadFile (file: $file, findingId: $findingId) {
                    success
                }
            }
        """
        variables = {
            "file": uploaded_file,
            "findingId": "463558592",
        }
        data = {"query": query, "variables": variables}
        result = await _get_result_async(data)

    assert "errors" in result
    assert result["errors"][0]["message"] == str(InvalidStream("inputs", "0"))


async def test_upload_file_error_root() -> None:
    filename = os.path.dirname(os.path.abspath(__file__))
    filename = os.path.join(
        filename, "./mock/evidences/test-vuln-error-root.yaml"
    )
    with open(filename, "rb") as test_file:
        uploaded_file = UploadFile(
            filename=test_file.name, file=test_file, content_type="text/x-yaml"
        )
        query = """
            mutation UploadFileMutation($file: Upload!, $findingId: String!) {
                uploadFile (file: $file, findingId: $findingId) {
                    success
                }
            }
        """
        variables = {
            "file": uploaded_file,
            "findingId": "463558592",
        }
        data = {"query": query, "variables": variables}
        result = await _get_result_async(data)

    assert "errors" in result
    assert result["errors"][0]["message"] == str(RootNotFound())


async def test_vulnerability_verification() -> None:
    vuln1_id = "587c40de-09a0-4d85-a9f9-eaa46aa895d7"
    vuln2_id = "15375781-31f2-4953-ac77-f31134225747"
    expected_vuln1 = {
        "finding_id": "436992569",
        "UUID": vuln1_id,
        "vulnerability_type": "ports",
        "specific": "1111",
        # FP: local testing
        "where": "192.168.100.112",  # NOSONAR
        "cycles": 1,
        "last_requested_reattack_date": "2020-02-19 10:41:04",
        "efficacy": 0,
        "report_date": "2019-09-13 17:00:56",
        "last_reattack_date": None,
        "last_reattack_requester": "integratesuser@gmail.com",
    }
    expected_vuln2 = {
        "finding_id": "436992569",
        "UUID": vuln2_id,
        "vulnerability_type": "ports",
        "specific": "333",
        # FP: local testing
        "where": "192.168.100.101",  # NOSONAR
        "cycles": 1,
        "last_requested_reattack_date": "2020-02-18 10:41:04",
        "efficacy": 0,
        "report_date": "2019-09-13 08:17:41",
        "last_reattack_date": "2020-02-19 10:41:04",
        "last_reattack_requester": "integratesuser@gmail.com",
    }
    query = """
        query GetVulnInfo($vuln1Id: String!, $vuln2Id: String!) {
            vuln1: vulnerability(uuid: $vuln1Id) {
                ...VulnInfo
            }
            vuln2: vulnerability(uuid: $vuln2Id) {
                ...VulnInfo
            }
        }
        fragment VulnInfo on Vulnerability {
            findingId
            id
            vulnerabilityType
            specific
            where
            cycles
            lastRequestedReattackDate
            efficacy
            reportDate
            lastReattackDate
            lastReattackRequester
        }
    """
    variables = {"vuln1Id": vuln1_id, "vuln2Id": vuln2_id}
    data = {"query": query, "variables": variables}
    result = await _get_result_async(data)
    assert "errors" not in result

    assert result["data"]["vuln1"]["findingId"] == expected_vuln1["finding_id"]
    assert result["data"]["vuln1"]["where"] == expected_vuln1["where"]
    assert result["data"]["vuln1"]["id"] == expected_vuln1["UUID"]
    assert result["data"]["vuln1"]["specific"] == expected_vuln1["specific"]
    assert (
        result["data"]["vuln1"]["vulnerabilityType"]
        == expected_vuln1["vulnerability_type"]
    )
    assert result["data"]["vuln1"][
        "lastRequestedReattackDate"
    ] == expected_vuln1.get("last_requested_reattack_date")
    assert result["data"]["vuln1"][
        "lastReattackRequester"
    ] == expected_vuln1.get("last_reattack_requester")
    assert result["data"]["vuln1"]["cycles"] == expected_vuln1["cycles"]
    assert result["data"]["vuln1"]["efficacy"] == expected_vuln1["efficacy"]
    assert (
        result["data"]["vuln1"]["reportDate"] == expected_vuln1["report_date"]
    )
    assert (
        result["data"]["vuln1"]["lastReattackDate"]
        == expected_vuln1["last_reattack_date"]
    )

    assert result["data"]["vuln2"]["findingId"] == expected_vuln2["finding_id"]
    assert result["data"]["vuln2"]["where"] == expected_vuln2["where"]
    assert result["data"]["vuln2"]["id"] == expected_vuln2["UUID"]
    assert result["data"]["vuln2"]["specific"] == expected_vuln2["specific"]
    assert (
        result["data"]["vuln2"]["vulnerabilityType"]
        == expected_vuln2["vulnerability_type"]
    )
    assert result["data"]["vuln2"][
        "lastRequestedReattackDate"
    ] == expected_vuln2.get("last_requested_reattack_date")
    assert result["data"]["vuln2"][
        "lastReattackRequester"
    ] == expected_vuln2.get("last_reattack_requester")
    assert result["data"]["vuln2"]["cycles"] == expected_vuln2["cycles"]
    assert result["data"]["vuln2"]["efficacy"] == expected_vuln2["efficacy"]
    assert (
        result["data"]["vuln2"]["reportDate"] == expected_vuln2["report_date"]
    )
    assert (
        result["data"]["vuln2"]["lastReattackDate"]
        == expected_vuln2["last_reattack_date"]
    )
