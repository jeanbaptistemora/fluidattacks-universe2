from . import (
    get_result,
)
from dataloaders import (
    get_new_context,
)
from db_model.vulnerabilities.enums import (
    VulnerabilityStateStatus,
)
import pytest
from typing import (
    Any,
    Dict,
)


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("remove_vulnerability")
@pytest.mark.parametrize(
    ["email"],
    [
        ["admin@gmail.com"],
    ],
)
async def test_remove_vulnerability(populate: bool, email: str) -> None:
    assert populate
    finding_id: str = "3c475384-834c-47b0-ac71-a41a022e401c"
    vulnerability_id: str = "4dbc03e0-4cfc-4b33-9b70-bb7566c460bd"
    result: Dict[str, Any] = await get_result(
        user=email, finding=finding_id, vulnerability=vulnerability_id
    )
    assert "errors" not in result
    assert "success" in result["data"]["removeVulnerability"]
    assert result["data"]["removeVulnerability"]

    loaders = get_new_context()
    vulnerability = await loaders.vulnerability.load(vulnerability_id)
    assert vulnerability
    assert vulnerability.state.status == VulnerabilityStateStatus.DELETED


@pytest.mark.asyncio
@pytest.mark.resolver_test_group("remove_vulnerability")
@pytest.mark.parametrize(
    ["email"],
    [
        ["hacker@gmail.com"],
        ["reattacker@gmail.com"],
    ],
)
async def test_remove_vulnerability_fail(populate: bool, email: str) -> None:
    assert populate
    finding_id: str = "475041514"
    vulnerability_id: str = "c99e0bd7-23e0-47b7-801c-50f9f8b585b0"
    result: Dict[str, Any] = await get_result(
        user=email, finding=finding_id, vulnerability=vulnerability_id
    )
    assert "errors" in result
    assert result["errors"][0]["message"] == "Access denied"
