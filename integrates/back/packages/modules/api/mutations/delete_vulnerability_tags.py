# Standard library
from typing import (
    Any,
    List,
)

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend.typing import SimplePayload as SimplePayloadType
from decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates,
)
from newutils import logs as logs_utils
from redis_cluster.operations import redis_del_by_deps_soon
from vulnerabilities import domain as vulns_domain


@convert_kwargs_to_snake_case
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(  # pylint: disable=too-many-arguments
    _: Any,
    info: GraphQLResolveInfo,
    finding_id: str,
    vulnerabilities: List[str],
    tag: str = ''
) -> SimplePayloadType:
    success = await vulns_domain.delete_tags(finding_id, vulnerabilities, tag)
    if success:
        for vuln_id in vulnerabilities:
            info.context.loaders.vulnerability.clear(vuln_id)
        redis_del_by_deps_soon(
            'delete_vulnerability_tags',
            finding_id=finding_id,
        )
        logs_utils.cloudwatch_log(
            info.context,
            f'Delete tags from {finding_id}'
        )

    return SimplePayloadType(success=success)
