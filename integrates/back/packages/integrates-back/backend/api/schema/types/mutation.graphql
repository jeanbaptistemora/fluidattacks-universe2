type Mutation {
  acceptLegal(remember: Boolean): SimplePayload!

  addEventConsult(
    content: String!
    eventId: String!
    parent: GenericScalar!
  ): AddConsultPayload!

  addFiles(
    file: Upload!
    filesData: JSONString!
    projectName: String!
  ): SimplePayload!

  addFindingConsult(
    content: String!
    findingId: String!
    parent: GenericScalar!
    type: FindingConsultType!
  ): AddConsultPayload!

  addForcesExecution(
    projectName: String!
    execution_id: String!
    date: DateTime!
    exitCode: String!
    gitBranch: String
    gitCommit: String
    gitOrigin: String
    gitRepo: String
    kind: String
    log: Upload
    strictness: String!
    vulnerabilities: ExecutionVulnerabilitiesInput!
  ): SimplePayload!

  addGitRoot(
    "Repository branch to be tested"
    branch: String!
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "Name of the group the root is associated with"
    groupName: String!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
    "Repository URL"
    url: String!
  ): SimplePayload!

  addIpRoot(
    "IP address of the environment to test"
    address: String!
    "Name of the group the root is associated with"
    groupName: String!
    "Indicates the port to test. Zero means all ports"
    port: Int!
  ): SimplePayload!

  addProjectConsult(
    content: String!
    parent: GenericScalar!
    projectName: String!
  ): AddConsultPayload!

  addPushToken(token: String!): SimplePayload

  addStakeholder(
    email: String!
    role: StakeholderRole!
    phoneNumber: String
  ): AddStakeholderPayload!

  addTags(projectName: String!, tags: JSONString): SimpleProjectPayload!

  addUrlRoot(
    "URL of the environment to test"
    url: String!
    "Name of the group the root is associated with"
    groupName: String!
  ): SimplePayload!

  approveDraft(draftId: String!): ApproveDraftPayload!

  confirmZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  createDraft(
    affectedSystems: String
    attackVectorDesc: String
    cwe: String
    description: String
    origin: String
    projectName: String!
    recommendation: String
    requirements: String
    risk: String
    threat: String
    title: String!
    type: FindingType
  ): SimplePayload!

  createEvent(
    actionAfterBlocking: ActionsAfterBlocking!
    actionBeforeBlocking: ActionsBeforeBlocking!
    accessibility: [EventAccessibility]!
    affectedComponents: [AffectedComponents]
    blockingHours: String
    context: EventContext!
    detail: String!
    eventDate: DateTime!
    eventType: EventType!
    file: Upload
    image: Upload
    projectName: String!
  ): SimplePayload!

  createOrganization(name: String!): CreateOrganizationPayload!

  createProject(
    description: String!
    language: Language
    organization: String
    projectName: String!
    subscription: SubscriptionType
    hasDrills: Boolean
    hasForces: Boolean
  ): SimplePayload!

  deleteFinding(
    findingId: String!
    justification: DeleteFindingJustification!
  ): SimplePayload!

  deleteTags(
    findingId: String!
    vulnerabilities: [String]!
    tag: String
  ): SimplePayload!

  deleteVulnerability(
    id: String!
    findingId: String!
    justification: DeleteVulnerabilityJustification!
  ): SimplePayload!

  downloadEventFile(eventId: String!, fileName: String!): DownloadFilePayload!

  downloadFile(
    filesData: JSONString!
    projectName: String!
  ): DownloadFilePayload!

  downloadVulnFile(findingId: String!): DownloadFilePayload!

  editGroup(
    comments: String!
    groupName: String!
    hasDrills: Boolean!
    hasForces: Boolean!
    hasIntegrates: Boolean!
    reason: EditGroupReason!
    subscription: SubscriptionType!
  ): SimplePayload!

  editStakeholder(
    projectName: String!
    email: String!
    responsibility: String!
    role: StakeholderRole!
    phoneNumber: String!
  ): EditStakeholderPayload!

  editStakeholderOrganization(
    organizationId: String!
    phoneNumber: String
    role: OrganizationRole!
    userEmail: String!
  ): EditStakeholderPayload!

  executeSkims(groupName: String!): ExecuteSkimsPayload!

  grantStakeholderAccess(
    projectName: String
    email: String!
    responsibility: String
    role: StakeholderRole!
    phoneNumber: String
  ): GrantStakeholderAccessPayload!

  grantStakeholderOrganizationAccess(
    organizationId: String!
    phoneNumber: String
    role: OrganizationRole!
    userEmail: String!
  ): GrantStakeholderAccessPayload!

  handleVulnsAcceptation(
    acceptedVulns: [String]!
    findingId: String!
    justification: String!
    rejectedVulns: [String]!
  ): SimplePayload!

  invalidateAccessToken: SimplePayload!

  invalidateCache(pattern: String!): SimplePayload!

  rejectDraft(findingId: String!): SimplePayload!

  rejectZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  removeEventEvidence(
    eventId: String!
    evidenceType: EventEvidenceType!
  ): SimplePayload!

  removeEvidence(
    findingId: String!
    evidenceId: EvidenceType!
  ): SimpleFindingPayload!

  removeFiles(filesData: JSONString!, projectName: String!): SimplePayload!

  removeGroup(groupName: String!): SimplePayload!

  removeStakeholderAccess(
    projectName: String!
    userEmail: String!
  ): RemoveStakeholderAccessPayload!

  removeStakeholderOrganizationAccess(
    organizationId: String!
    userEmail: String!
  ): SimplePayload!

  removeTag(projectName: String!, tag: String!): SimpleProjectPayload!

  requestVerificationVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  requestZeroRiskVuln(
    findingId: String!
    justification: String!
    vulnerabilities: [String]!
  ): SimplePayload!

  signIn(authToken: String!, provider: AuthProvider!): SignInPayload!

  solveEvent(
    eventId: String!
    affectation: String!
    date: DateTime!
  ): SimplePayload!

  submitDraft(findingId: String!): SimplePayload!

  subscribeToEntityReport(
    frequency: Frequency!
    reportEntity: SubscriptionReportEntity!
    reportSubject: String!
  ): SimplePayload!

  unsubscribeFromGroup(groupName: String!): SimplePayload!

  updateAccessToken(expirationTime: Int!): UpdateAccessTokenPayload!

  updateAccessTokenProject(
    expirationTime: Int!
    projectName: String!
  ): UpdateAccessTokenPayload!

  updateDescription(
    actor: String!
    affectedSystems: String!
    attackVectorDesc: String!
    cwe: String!
    description: String!
    findingId: String!
    recommendation: String!
    records: String
    recordsNumber: Int!
    requirements: String!
    risk: String
    scenario: String!
    sorts: Sorts
    threat: String!
    title: String!
    findingType: String
  ): SimpleFindingPayload!

  updateEventEvidence(
    eventId: String!
    evidenceType: EventEvidenceType!
    file: Upload!
  ): SimplePayload!

  updateEvidence(
    file: Upload!
    findingId: String!
    evidenceId: EvidenceType!
  ): SimplePayload!

  updateEvidenceDescription(
    description: String!
    evidenceId: EvidenceDescriptionType!
    findingId: String!
  ): SimplePayload!

  updateForcesAccessToken(projectName: String!): UpdateAccessTokenPayload!

  updateGitEnvironments(
    "ID of the root"
    id: ID!
    "URLs to access the environment"
    environmentUrls: [String!]!
  ): SimplePayload!

  updateGitRoot(
    "Kind of environment to test. E.g. production, QA, etc."
    environment: String!
    "Repository paths to be ignored"
    gitignore: [String!]!
    "ID of the root"
    id: ID!
    "Analyze already existing code"
    includesHealthCheck: Boolean!
  ): SimplePayload!

  updateOrganizationPolicies(
    maxAcceptanceDays: Int
    maxAcceptanceSeverity: Float
    maxNumberAcceptations: Int
    minAcceptanceSeverity: Float
    organizationId: String!
    organizationName: String!
  ): SimplePayload!

  updateRootCloningStatus(
    "ID of the root"
    id: ID!
    "Whether the root is cloning or not"
    status: CloningStatus!
    "Message when cloning is finished"
    message: String!
  ): SimplePayload!

  updateRootState(
    "ID of the root"
    id: ID!
    "Whether the root is active or not"
    state: ResourceState!
  ): SimplePayload!

  updateSeverity(
    findingId: String!
    data: GenericScalar!
  ): SimpleFindingPayload!

  updateTreatmentVuln(
    externalBts: String
    findingId: String!
    severity: Int
    tag: String
    vulnerabilityId: ID!
  ): SimplePayload!

  updateVulnsTreatment(
    acceptanceDate: String
    findingId: String!
    justification: String!
    treatment: UpdateClientDescriptionTreatment!
    treatmentManager: String
    vulnerabilityId: ID!
  ): SimplePayload!

  uploadFile(file: Upload!, findingId: String!): SimplePayload!

  verifyRequestVuln(
    findingId: String!
    justification: String!
    openVulns: [String]!
    closedVulns: [String]!
  ): SimplePayload!
}
