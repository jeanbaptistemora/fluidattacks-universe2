# Standard
from functools import (
    partial,
)
from typing import cast, Dict, Optional

# Third party
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend.dal.helpers.redis import (
    redis_get_or_set_entity_attr,
)
from backend.decorators import (
    require_forces,
)
from backend.typing import Finding
from backend.utils import findings as finding_utils


@require_forces
async def resolve(
    parent: Dict[str, Finding],
    info: GraphQLResolveInfo,
    **kwargs: None,
) -> str:
    response: str = await redis_get_or_set_entity_attr(
        partial(resolve_no_cache, parent, info, **kwargs),
        entity='finding',
        attr='exploit',
        id=cast(str, parent['id']),
    )

    return response


async def resolve_no_cache(
    parent: Finding,
    _info: GraphQLResolveInfo,
    **_kwargs: None
) -> str:
    finding_id: str = cast(Dict[str, str], parent)['id']
    group_name: str = cast(Dict[str, str], parent)['project_name']
    exploit_url: Optional[str] = cast(
        Dict[str, Dict[str, Optional[str]]], parent
    )['exploit']['url']

    if exploit_url:
        return await finding_utils.get_exploit_from_file(
            group_name,
            finding_id,
            exploit_url
        )

    return ''
