# Standard libraries
from typing import Any

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend import util
from backend.dal.helpers.redis import (
    redis_del_by_deps_soon,
)
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.domain import vulnerability as vuln_domain
from backend.typing import SimplePayload as SimplePayloadType


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    **parameters: Any
) -> SimplePayloadType:
    finding_id = parameters.get('finding_id', '')
    user_info = await util.get_jwt_content(info.context)
    success = await vuln_domain.verify_vulnerabilities(
        finding_id,
        user_info['user_email'],
        ' '.join(
            [user_info.get('first_name', ''), user_info.get('last_name', '')]
        ),
        info,
        parameters
    )
    if success:
        finding_loader = info.context.loaders.finding
        finding_data = await finding_loader.load(finding_id)
        project_name = finding_data['project_name']
        redis_del_by_deps_soon(
            'verify_request_vulnerability',
            finding_id=finding_id,
            group_name=project_name,
        )
        util.cloudwatch_log(
            info.context,
            f'Security: Verified a request in finding_id: {finding_id}'
        )

    return SimplePayloadType(success=success)
