# Standard libraries
from typing import (
    Any,
    List
)

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend import util
from backend.dal.helpers.redis import (
    redis_del_by_deps_soon,
)
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.domain import vulnerability as vuln_domain
from backend.typing import SimplePayload as SimplePayloadType


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    finding_id: str,
    justification: str,
    vulnerabilities: List[str]
) -> SimplePayloadType:
    user_info = await util.get_jwt_content(info.context)
    success = await vuln_domain.request_verification(
        info.context.loaders,
        finding_id,
        user_info['user_email'],
        ' '.join(
            [user_info.get('first_name', ''), user_info.get('last_name', '')]
        ),
        justification,
        vulnerabilities
    )

    if success:
        redis_del_by_deps_soon(
            'request_verification_vulnerability',
            finding_id=finding_id,
        )
        util.cloudwatch_log(
            info.context,
            f'Security: Verified a request in finding_id: {finding_id}'
        )

    return SimplePayloadType(success=success)
