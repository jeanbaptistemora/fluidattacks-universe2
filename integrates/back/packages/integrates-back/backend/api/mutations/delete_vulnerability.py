# Standard
from typing import Any, Dict

# Third party
from aiodataloader import DataLoader
from ariadne.utils import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local
from backend import util
from backend.dal.helpers.redis import (
    redis_del_entity_attr,
)
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_integrates,
    require_login
)
from backend.domain import vulnerability as vuln_domain
from backend.typing import SimplePayload


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
)
async def mutate(
    _parent: None,
    info: GraphQLResolveInfo,
    **kwargs: Any
) -> SimplePayload:
    uuid: str = kwargs['id']
    finding_id: str = kwargs['finding_id']
    justification: str = kwargs['justification']

    user_data: Dict[str, str] = await util.get_jwt_content(info.context)
    user_email: str = user_data.get('user_email', '')

    finding_loader: DataLoader = info.context.loaders['finding']
    finding_data = await finding_loader.load(finding_id)
    group_name: str = finding_data['project_name']
    success: bool = await vuln_domain.delete_vulnerability(
        finding_id,
        uuid,
        justification,
        user_email
    )

    if success:
        redis_del_entity_attr('finding', 'age', id=finding_id)
        util.queue_cache_invalidation(
            f'age*{finding_id}',
            f'remediated*{finding_id}',
            f'state*{finding_id}',
            f'tracking*{finding_id}',
            f'verified*{finding_id}',
            f'vuln*{finding_id}',
            f'vuln*{group_name}'
        )
        util.forces_trigger_deployment(group_name)
        util.cloudwatch_log(
            info.context,
            (
                f'Security: Deleted vulnerability: {uuid} from {group_name} '
                'group successfully'
            )
        )
    else:
        util.cloudwatch_log(
            info.context,
            (
                f'Security: Attempted to delete vulnerability: {uuid} from '
                f'{group_name} group'
            )
        )
    return SimplePayload(success=success)
