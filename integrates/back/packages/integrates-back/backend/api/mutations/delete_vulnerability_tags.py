# Standard library
from typing import (
    Any,
    List
)

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend import util
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.domain import vulnerability as vuln_domain
from backend.typing import SimplePayload as SimplePayloadType


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(  # pylint: disable=too-many-arguments
    _: Any,
    info: GraphQLResolveInfo,
    finding_id: str,
    vulnerabilities: List[str],
    tag: str = ''
) -> SimplePayloadType:
    success = await vuln_domain.delete_tags(finding_id, vulnerabilities, tag)
    if success:
        finding_loader = info.context.loaders['finding']
        finding_data = await finding_loader.load(finding_id)
        project_name = finding_data['project_name']
        attrs_to_clean = {
            'vuln': finding_id,
            'vul': project_name
        }
        to_clean = util.format_cache_keys_pattern(attrs_to_clean)
        util.queue_cache_invalidation(*to_clean)
        for vuln in vulnerabilities:
            attrs_to_clean = {
                'tag': vuln
            }
            to_clean = util.format_cache_keys_pattern(attrs_to_clean)
            util.queue_cache_invalidation(*to_clean)
        util.cloudwatch_log(
            info.context,
            f'Delete tags from {finding_id}'
        )

    return SimplePayloadType(success=success)
