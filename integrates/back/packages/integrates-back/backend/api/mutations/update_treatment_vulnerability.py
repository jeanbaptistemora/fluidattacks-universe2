# Standard libraries
from typing import Any

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend import util
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.domain import vulnerability as vuln_domain
from backend.exceptions import InvalidSeverity
from backend.typing import SimplePayload as SimplePayloadType


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    **parameters: Any
) -> SimplePayloadType:
    min_value = 0
    max_value = 1000000000
    vulnerabilities = parameters.get('vulnerabilities', [])
    finding_id = parameters.get('finding_id', '')
    severity = parameters.get('severity')
    if severity and severity != -1:
        if min_value > severity > max_value:
            raise InvalidSeverity([min_value, max_value])

    finding_loader = info.context.loaders['finding']
    finding_data = await finding_loader.load(finding_id)
    project_name = finding_data['project_name']

    result_update_vuln = await vuln_domain.update_treatments(
        vulnerabilities,
        finding_id,
        parameters,
        info,
    )

    if result_update_vuln:
        util.queue_cache_invalidation(
            f'vuln*{finding_id}',
            f'historic*{finding_id}',
            f'severity*{finding_id}',
            *[f'vuln*{vuln}' for vuln in vulnerabilities]
        )
        util.forces_trigger_deployment(project_name)

    return SimplePayloadType(success=result_update_vuln)
