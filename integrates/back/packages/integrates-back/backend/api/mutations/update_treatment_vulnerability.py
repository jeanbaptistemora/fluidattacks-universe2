# Standard libraries
from typing import Any

# Third party libraries
from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

# Local libraries
from backend.dal.helpers.redis import redis_del_by_deps
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.exceptions import InvalidSeverity
from backend.typing import SimplePayload as SimplePayloadType
from vulnerabilities import domain as vulns_domain


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    **parameters: Any
) -> SimplePayloadType:
    min_value = 0
    max_value = 1000000000
    finding_id = parameters.get('finding_id', '')
    vuln_uuid = parameters['vulnerability_id']
    severity = parameters.get('severity')
    if severity and severity != -1:
        if min_value > severity > max_value:
            raise InvalidSeverity([min_value, max_value])

    result_update_vuln = await vulns_domain.update_treatments(
        vuln_uuid,
        finding_id,
        parameters,
        info,
    )

    if result_update_vuln:
        info.context.loaders.finding.clear(finding_id)
        info.context.loaders.vulnerability.clear(vuln_uuid)
        await redis_del_by_deps(
            'update_treatment_vulnerability',
            finding_id=finding_id,
        )

    return SimplePayloadType(success=result_update_vuln)
