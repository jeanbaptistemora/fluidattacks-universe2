# Standard libraries
import logging
from typing import Any

# Third party libraries
from aioextensions import in_thread

from ariadne import convert_kwargs_to_snake_case
from graphql.type.definition import GraphQLResolveInfo

from mixpanel import Mixpanel

# Local libraries
from back import settings
from back.settings import LOGGING

from backend import util
from backend.decorators import (
    concurrent_decorators,
    enforce_group_level_auth_async,
    require_finding_access,
    require_login,
    require_integrates
)
from backend.domain import vulnerability as vuln_domain
from backend.exceptions import ErrorUploadingFileS3
from backend.typing import DownloadFilePayload as DownloadFilePayloadType

logging.config.dictConfig(LOGGING)

# Constants
LOGGER = logging.getLogger(__name__)


@convert_kwargs_to_snake_case  # type: ignore
@concurrent_decorators(
    require_login,
    enforce_group_level_auth_async,
    require_integrates,
    require_finding_access,
)
async def mutate(
    _: Any,
    info: GraphQLResolveInfo,
    **kwargs: Any
) -> DownloadFilePayloadType:
    success = False
    finding_id = kwargs.get('finding_id', '')
    user_info = await util.get_jwt_content(info.context)
    user_email = user_info['user_email']
    finding_loader = info.context.loaders['finding']
    finding_data = await finding_loader.load(finding_id)
    group_name = finding_data['project_name']
    payload_data = {
        'finding_id': finding_id,
        'project_name': group_name,
        'user_email': user_email
    }

    try:
        file_path = await vuln_domain.get_vulnerabilities_file(
            finding_id,
            group_name
        )
        if file_path:
            msg = (
                'Security: Downloaded vulnerabilities'
                f'file in finding {finding_id} successfully'
            )
            util.cloudwatch_log(info.context, msg)
            mp_obj = Mixpanel(settings.MIXPANEL_API_TOKEN)
            await in_thread(
                mp_obj.track,
                user_email,
                'DownloadVulnFile',
                {
                    'Project': group_name.upper(),
                    'Email': user_email,
                    'FileName': file_path,
                }
            )
            success = True
        else:
            msg = (
                f'A CloudFront error occurred while getting the vuln file '
                f'assotiated to finding {finding_id} in group {group_name}'
            )
            LOGGER.error(msg, extra={'extra': payload_data})
    except ErrorUploadingFileS3:
        msg_cw = (
            f'Security: Attempted to download vulnerabilities file '
            f'assotiated to finding {finding_id} in project {group_name}'
        )
        util.cloudwatch_log(info.context, msg_cw)
        msg_log = (
            'An error occurred uploading a vuln file to S3 '
            'assotiated to finding in project'
        )
        LOGGER.error(msg_log, extra={'extra': payload_data})

    return DownloadFilePayloadType(success=success, url=str(file_path))
