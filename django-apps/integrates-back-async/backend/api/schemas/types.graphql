"Analytics type definition"
type Analytics {
    groupDocument(
        documentName: String!
        documentType: String!
        groupName: String!
    ): GenericScalar
}

"Alert type definition"
type Alert {
    message: String
    project: String
    organization: String
    status: Int
}

"Event type definition"
type Event {
    id: String
    analyst: String
    client: String
    comments: [Comment!]
    projectName: String
    clientProject: String
    detail: String
    evidence: String
    eventType: String
    eventDate: String
    eventStatus: String
    historicState: [GenericScalar]
    affectation: String
    accessibility: String
    affectedComponents: String
    context: String
    subscription: String
    evidenceFile: String
    closingDate: String
}

"Finding type definition"
type Finding {
    actor: String!
    affectedSystems: String
    age: Int
    analyst: String
    attackVectorDesc: String
    btsUrl: String
    closedVulnerabilities: Int
    comments: [Comment]
    compromisedAttributes: String
    compromisedRecords: Int
    currentState: String
    cvssVersion: String
    cweUrl: String
    description: String
    evidence: GenericScalar
    exploit: String
    id: String
    isExploitable: Boolean
    lastVulnerability: Int
    observations: [Comment]
    openVulnerabilities: Int
    projectName: String
    recommendation: String
    records: JSONString
    releaseDate: String
    remediated: Boolean
    newRemediated: Boolean
    verified: Boolean
    reportDate: String
    requirements: String
    risk: String
    scenario: String
    severity: GenericScalar
    severityScore: Float
    state: String
    historicState: [GenericScalar]
    historicTreatment: [GenericScalar]
    threat: String
    title: String
    tracking: [GenericScalar]
    type: String
    vulnerabilities(state: String): [Vulnerability]
    portsVulns: [Vulnerability]
    inputsVulns: [Vulnerability]
    linesVulns: [Vulnerability]
    pendingVulns: [Vulnerability]
}

"InternalProject type definition"
type InternalProject {
    projectName: String
}

type Organization {
    id: String!
    maxAcceptanceDays: Int
    maxAcceptanceSeverity: Float!
    maxNumberAcceptations: Int
    minAcceptanceSeverity: Float!
    name: String!
}

"Resource type definition"
type Resource {
    projectName: String
    repositories: JSONString
    environments: JSONString
    files: JSONString
}

"User type definition"
type User {
    email: String
    role: String
    responsibility: String
    phoneNumber: String
    organization: String
    firstLogin: String
    lastLogin: String
    projects: [Project]
}

"Project type definition"
type Project {
    bill(date: DateTime): Bill
    name: String
    findings(filters: GenericScalar): [Finding]
    hasDrills: Boolean
    hasForces: Boolean
    isCommunity: Boolean
    openVulnerabilities: Int
    closedVulnerabilities: Int
    currentMonthAuthors: Int
    currentMonthCommits: Int
    subscription: String
    comments: [Comment!]
    tags: [String!]
    deletionDate: String
    pendingClosingCheck: Int
    lastClosingVuln: Int
    lastClosingVulnFinding: Finding
    maxSeverity: Float
    maxSeverityFinding: Finding
    maxOpenSeverity: Float
    maxOpenSeverityFinding: Finding
    meanRemediateCriticalSeverity: Int
    meanRemediateHighSeverity: Int
    meanRemediateLowSeverity: Int
    meanRemediateMediumSeverity: Int
    meanRemediate: Int
    openFindings: Int
    serviceAttributes: [String]
    totalFindings: Int
    users: [User!]
    totalTreatment: GenericScalar
    drafts: [Finding!]
    description: String
    remediatedOverTime: String
    events: [Event!]
    userDeletion: String
}

"Bill type definition"
type Bill {
    developers: [BillDeveloper]
}

"BillDeveloper type definition"
type BillDeveloper {
    actor: String
    commit: String
    groups: String
    organization: String
    repository: String
}

"ForcesExecutions type definition"
type ForcesExecutions {
    projectName: String!
    fromDate: String
    toDate: String
    executions: [ForcesExecution]
}

"Me type definition"
type Me {
    accessToken: String
    organizations: [Organization!]
    projects: [Project]
    remember: Boolean
    role(projectName: String): String
    tags: [Tag!]
    permissions(projectName: String): [String]
    callerOrigin: CallerOrigin
}

"Comment type definition"
type Comment {
    id: String
    content: String
    created: String
    email: String
    fullname: String
    modified: String
    parent: String
}

"Vulnerability type definition"
type Vulnerability {
    id: String
    analyst: String
    findingId: String
    vulnType: String
    where: String
    specific: String
    historicState: [GenericScalar]
    historicVerification: [Verification]
    currentState: String
    currentApprovalStatus: String
    lastAnalyst: String
    lastApprovedStatus: String
    treatmentManager: String
    severity: String
    tag: String
    tags: [String!]
    remediated: Boolean
    verification: String
}

"Verification type definition"
type Verification {
    date: String
    status: String
}

"Tag type definition"
type Tag {
    lastClosingVuln: Float
    name: String
    maxSeverity: Float
    maxOpenSeverity: Float
    meanRemediateCriticalSeverity: Float
    meanRemediateHighSeverity: Float
    meanRemediateLowSeverity: Float
    meanRemediateMediumSeverity: Float
    meanRemediate: Float
    projects: [Project]
}

type ForcesExecution {
    projectName: String
    execution_id: String
    date: DateTime
    exitCode: String
    gitBranch: String
    gitCommit: String
    gitOrigin: String
    gitRepo: String
    kind: String
    log: String
    strictness: String
    vulnerabilities: ExecutionVulnerabilities
}

type ExecutionVulnerabilities {
    exploits: [ExploitResult!]
    integratesExploits: [ExploitResult!]
    acceptedExploits: [ExploitResult!]
    numOfVulnerabilitiesInExploits: Int
    numOfVulnerabilitiesInIntegratesExploits: Int
    numOfVulnerabilitiesInAcceptedExploits: Int
}

type ExploitResult {
    kind: String
    where: String
    who: String
}

"Report type definition"
type Report {
    url: String
}

input EnvironmentInput {
    "Environment URL"
    urlEnv: String!
}

input RepositoryInput {
    "Repository branch"
    branch: String!
    "Repository protocol for cloning"
    protocol: RepoProtocol!
    "Repository URL"
    urlRepo: String!
}

enum CallerOrigin {
    API
    FRONT
}

enum ResourceState {
    ACTIVE
    INACTIVE
}

enum RepoProtocol {
    HTTPS
    SSH
}

enum DeleteVulnerabilityJustification {
    DUPLICATED
    FALSE_POSITIVE
    REPORTING_ERROR
}

enum EvidenceType {
    ANIMATION
    EVIDENCE1
    EVIDENCE2
    EVIDENCE3
    EVIDENCE4
    EVIDENCE5
    EXPLOIT
    EXPLOITATION
    RECORDS
}

enum EvidenceDescriptionType {
    EVIDENCE1
    EVIDENCE2
    EVIDENCE3
    EVIDENCE4
    EVIDENCE5
}

enum SubscriptionType {
    CONTINUOUS
    ONESHOT
}

enum UpdateClientDescriptionTreatment {
    ACCEPTED
    ACCEPTED_UNDEFINED
    IN_PROGRESS
}

enum FindingType {
    HYGIENE
    SECURITY
}

enum FindingCommentType {
    COMMENT
    OBSERVATION
}

enum DeleteFindingJustification {
    DUPLICATED
    FALSE_POSITIVE
    NOT_REQUIRED
}

enum ActionsAfterBlocking {
    EXECUTE_OTHER_PROJECT_OTHER_CLIENT
    EXECUTE_OTHER_PROJECT_SAME_CLIENT
    NONE
    OTHER
    TRAINING
}

enum ActionsBeforeBlocking {
    DOCUMENT_PROJECT
    NONE
    OTHER
    TEST_OTHER_PART_TOE
}

enum EventAccessibility {
    ENVIRONMENT
    REPOSITORY
}

enum AffectedComponents {
    CLIENT_STATION
    COMPILE_ERROR
    DOCUMENTATION
    FLUID_STATION
    INTERNET_CONNECTION
    LOCAL_CONNECTION
    OTHER
    SOURCE_CODE
    TEST_DATA
    TOE_ALTERATION
    TOE_CREDENTIALS
    TOE_EXCLUSSION
    TOE_LOCATION
    TOE_PRIVILEGES
    TOE_UNACCESSIBLE
    TOE_UNAVAILABLE
    TOE_UNSTABLE
    VPN_CONNECTION
}

enum EventContext {
    CLIENT
    FLUID
    OTHER
    PLANNING
    TELECOMMUTING
}

enum EventType {
    AUTHORIZATION_SPECIAL_ATTACK
    CLIENT_APPROVES_CHANGE_TOE
    CLIENT_DETECTS_ATTACK
    HIGH_AVAILABILITY_APPROVAL
    INCORRECT_MISSING_SUPPLIES
    OTHER
    TOE_DIFFERS_APPROVED
}

enum EventEvidenceType {
    FILE
    IMAGE
}

enum ReportType {
    ALL_VULNS
    COMPLETE
    DATA
    PDF
    XLS
}

enum ReportLang {
    EN
}

enum UserRole {
    ADMIN
    ANALYST
    CLOSER
    CUSTOMER
    CUSTOMERADMIN
    EXECUTIVE
    GROUP_MANAGER
    INTERNAL_MANAGER
    RESOURCER
    REVIEWER
}

enum EditGroupReason {
  BUDGET
  NONE
  OTHER
  PROJECT_FINALIZATION
  PROJECT_SUSPENSION
}

enum AuthProvider {
    GOOGLE
    MICROSOFT
}
