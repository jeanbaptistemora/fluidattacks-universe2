# pylint: disable=import-error

from typing import List, cast

from backend.decorators import (
    enforce_authz_async, require_login, require_finding_access
)
from backend.domain.project import get_finding_project_name
from backend.domain.vulnerability import (
    delete_tags, update_approval_status, update_last_vuln_date,
    update_all_pending_vulns
)
from backend import util

from ariadne import convert_kwargs_to_snake_case


@convert_kwargs_to_snake_case
@require_login
@enforce_authz_async
@require_finding_access
def resolve_approve_vulnerability(
    _, info, finding_id: str, approval_status: str, uuid: str = ''
) -> object:
    """Resolve approve_vulnerability mutation."""
    project_name = get_finding_project_name(finding_id)
    success = False
    if uuid:
        success = update_approval_status(
            finding_id, uuid, approval_status)
    else:
        success = update_all_pending_vulns(finding_id, approval_status)
    if success:
        update_last_vuln_date(finding_id)
        util.invalidate_cache(finding_id)
        util.invalidate_cache(project_name)
        util.cloudwatch_log(
            info.context, 'Security: Approve vulnerability from {project}\
                project succesfully'.format(
                project=project_name))
    else:
        util.cloudwatch_log(info.context, 'Security: Attempted to approve\
            vulnerability from {project} project'.format(
            project=project_name))
    return dict(success=success)


@convert_kwargs_to_snake_case
@require_login
@enforce_authz_async
@require_finding_access
def resolve_delete_tags(
    _, info, finding_id: str, vulnerabilities: List
) -> object:
    """Resolve delete_tags mutation."""
    project_name = get_finding_project_name(finding_id)
    success = delete_tags(finding_id, cast(List[str], vulnerabilities))
    if success:
        util.invalidate_cache(finding_id)
        util.invalidate_cache(project_name)
        util.cloudwatch_log(
            info.context, f'Delete tags from {finding_id}')
    return dict(success=success)
