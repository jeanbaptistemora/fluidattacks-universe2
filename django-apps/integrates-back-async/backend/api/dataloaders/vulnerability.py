# pylint: disable=method-hidden

from collections import defaultdict
from typing import Dict, List, cast

from aiodataloader import DataLoader

from backend.domain import vulnerability as vuln_domain
from backend.typing import Vulnerability as VulnerabilityType


async def _batch_load_fn(
        finding_ids: List[str]) -> List[List[VulnerabilityType]]:
    """Batch the data load requests within the same execution fragment."""
    vulnerabilities: Dict[str, list] = defaultdict(list)

    vulns = await vuln_domain.list_vulnerabilities_async(finding_ids)
    for vuln in vulns:
        vulnerabilities[cast(str, vuln['finding_id'])].append(
            dict(
                UUID=vuln.get('UUID', ''),
                id=vuln.get('UUID', ''),
                finding_id=vuln.get('finding_id', ''),
                vuln_type=vuln.get('vuln_type', ''),
                where=vuln.get('where', ''),
                specific=vuln.get('specific', ''),
                historic_state=vuln.get('historic_state', [{}]),
                current_state=cast(list, vuln.get(
                    'historic_state', [{}]))[-1].get('state', ''),
                current_approval_status=cast(list, vuln.get(
                    'historic_state', [{}]))[-1].get('approval_status', ''),
                last_analyst=vuln_domain.get_last_approved_analyst(vuln),
                analyst=cast(list, vuln.get(
                    'historic_state', [{}]))[-1].get('analyst', ''),
                last_approved_status=vuln_domain.get_last_approved_status(
                    vuln),
                remediated=cast(list, vuln.get(
                    'historic_verification',
                    [{}]))[-1].get('status') == 'REQUESTED',
                severity=vuln.get('severity', ''),
                tag=', '.join(cast(list, vuln.get('tag', []))),
                treatment_manager=vuln.get('treatment_manager', ''),
                verification=cast(list, vuln.get(
                    'historic_verification',
                    [{}]))[-1].get('status', '').capitalize(),
                historic_verification=vuln.get('historic_verification', [])
            )
        )

    return [vulnerabilities.get(finding_id, []) for finding_id in finding_ids]


# pylint: disable=too-few-public-methods
class VulnerabilityLoader(DataLoader):
    async def batch_load_fn(
            self, finding_ids: List[str]) -> List[List[VulnerabilityType]]:
        return await _batch_load_fn(finding_ids)
