# pylint: disable=import-error

from collections import defaultdict

from asgiref.sync import sync_to_async
from backend.domain import vulnerability as vuln_domain

from aiodataloader import DataLoader


@sync_to_async
def _batch_load_fn(finding_ids):
    """Batch the data load requests within the same execution fragment."""
    vulnerabilities = defaultdict(list)

    for vuln in vuln_domain.list_vulnerabilities(finding_ids):
        vulnerabilities[vuln['finding_id']].append(
            dict(
                UUID=vuln.get('UUID', ''),
                id=vuln.get('UUID', ''),
                finding_id=vuln.get('finding_id', ''),
                vuln_type=vuln.get('vuln_type', ''),
                where=vuln.get('where', ''),
                specific=vuln.get('specific', ''),
                historic_state=vuln.get('historic_state', [{}]),
                current_state=vuln.get(
                    'historic_state', [{}])[-1].get('state', ''),
                current_approval_status=vuln.get(
                    'historic_state', [{}])[-1].get('approval_status', ''),
                last_analyst=vuln_domain.get_last_approved_analyst(vuln),
                analyst=vuln.get(
                    'historic_state', [{}])[-1].get('analyst', ''),
                last_approved_status=vuln_domain.get_last_approved_status(
                    vuln),
                remediated=vuln.get(
                    'historic_verification',
                    [{}])[-1].get('status') == 'REQUESTED',
                severity=vuln.get('severity', ''),
                tags=vuln.get('tag', []),
                treatment_manager=vuln.get('treatment_manager', ''),
                verification=vuln.get(
                    'historic_verification',
                    [{}])[-1].get('status', '').capitalize(),
            )
        )

    return [vulnerabilities.get(finding_id, []) for finding_id in finding_ids]


# pylint: disable=too-few-public-methods
class VulnerabilityLoader(DataLoader):
    async def batch_load_fn(self, finding_ids):
        return await _batch_load_fn(finding_ids)
