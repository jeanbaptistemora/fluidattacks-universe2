---
# Use this file to configure the Overcommit hooks you wish to use. This will
# extend the default configuration defined in:
# https://github.com/brigade/overcommit/blob/master/config/default.yml
#
# At the topmost level of this YAML file is a key representing type of hook
# being run (e.g. pre-commit, commit-msg, etc.). Within each type you can
# customize each hook, such as whether to only run it on certain files (via
# `include`), whether to only display output if it fails (via `quiet`), etc.
#
# For a complete list of hooks, see:
# https://github.com/brigade/overcommit/tree/master/lib/overcommit/hook
#
# For a complete list of options that you can use to customize hooks, see:
# https://github.com/brigade/overcommit#configuration
#

# The recommended workaround is to create a separate Gemfile
# in the root of your
# repository (call it `.overcommit_gems.rb`), and include only the gems that
# your Overcommit hooks need in order to run. This significantly reduces the
# startup delay in your hook runs. Make sure to commit both
# `.overcommit_gems.rb` and the resulting `.overcommit_gems.rb.lock` file to
# your repository, and then set the `gemfile` option below to the name you gave
# the file.
# (Generate lock file by running `bundle install
#  --gemfile=.overcommit_gems.rb`)
gemfile: false

# Where to store hook plugins specific to a repository. These are loaded in
# addition to the default hooks Overcommit comes with. The location is relative
# to the root of the repository.
plugin_directory: '.git-hooks'


# Whether to hide hook output by default. This results in completely silenthook
# runs except in the case of warning or failure.
quiet: false

# Number of hooks that can be run concurrently. Typically this won't need to be
# adjusted, but if you know that some of your hooks themselves use multiple
# processors you can lower this value accordingly. You can define
# single-operator mathematical expressions, e.g. '%{processors} * 2', or
# '%{processors} / 2'.
concurrency: '%{processors}'

# Whether to check if a hook plugin has changed since Overcommit last ran it.
# This is a defense mechanism when working with repositories which can contain
# untrusted code (e.g. when you fetch a pull request from a third party).
# See https://github.com/brigade/overcommit#security for more information.
verify_signatures: true

# Hooks that are run against every commit message after a user has written it.
# These hooks are useful for enforcing policies on commit messages
# written for a
# project.
CommitMsg:
  ALL:
    requires_files: false
    quiet: false

  CapitalizedSubject:
    enabled: true
    on_warn: fail
    description: 'Check subject capitalization'

  EmptyMessage:
    enabled: true
    description: 'Check for empty commit message'
    quiet: true

  GerritChangeId:
    enabled: false
    description: 'Ensure Gerrit Change-Id is present'
    required: true

  MessageFormat:
    enabled: false
    description: 'Check commit message matches expected pattern'
    pattern: '(.+)[|](.+)[|](.+)'
    expected_pattern_message: '<Issue Id> | <Commit Message Description>
    | <Developer(s)>'
    sample_message: 'DEFECT-1234 | Refactored Onboarding flow | John Doe'

  RussianNovel:
    enabled: true
    description: 'Check length of commit message'
    quiet: true

  SingleLineSubject:
    enabled: true
    description: 'Check subject line'

  TextWidth:
    enabled: true
    description: 'Check text width'
    max_subject_width: 50
    max_body_width: 63

  TrailingPeriod:
    enabled: true
    description: 'Check for trailing periods in subject'

# Hooks that are run after `git commit` is executed, before the commit message
# editor is displayed. These hooks are ideal for syntax checkers, linters, and
# other checks that you want to run before you allow a commit object to be
# created.
PreCommit:
  AuthorName:
    enabled: false
  AuthorEmail:
    enabled: false

  ALL:
    problem_on_unmodified_line: report
    requires_files: true
    required: false
    quiet: false

  LineLength:
    enabled: true
    on_warn: fail
    description: Checking for length of lines
    max: 81
    exclude:
      - '**/*.js'
      - '**/*.xml'
      - '**/*.xsl'
      - '**/*.gif'
      - '**/*.jpg'
      - '**/*.png'
      - '**/*.bmp'

  BrokenSymlinks:
    enabled: true
    description: 'Check for broken symlinks'
    quiet: true

  CaseConflicts:
    enabled: true
    description: 'Check for case-insensitivity conflicts'
    quiet: true

  ExecutePermissions:
    enabled: false
    description: 'Check for file execute permissions'
    quiet: true

  FixMe:
    enabled: false
    description: 'Check for "token" strings'
    required_executable: 'grep'
    flags: ['-IEHnw']
    keywords: ['BROKEN', 'BUG', 'ERROR',
               'FIXME', 'HACK', 'NOTE', 'OPTIMIZE',
               'REVIEW', 'TODO', 'WTF', 'XXX']

  ForbiddenBranches:
    enabled: false
    description: 'Check for commit to forbidden branch'
    quiet: true
    branch_patterns: ['master']

  LicenseHeader:
    enabled: false
    license_file: 'LICENSE.txt'
    description: 'Check source files for license headers'

  MergeConflicts:
    enabled: true
    description: 'Check for merge conflicts'
    quiet: true
    required_executable: 'grep'
    flags: ['-IHn', "^<<<<<<<[ \t]"]

  Pep257:
    enabled: false
    description: 'Analyze docstrings with pep257'
    required_executable: 'pep257'
    install_command: 'pip install pep257'
    include: '**/*.py'

  Pep8:
    enabled: false
    description: 'Analyze with pep8'
    required_executable: 'pep8'
    install_command: 'pip install pep8'
    include: '**/*.py'

  Pyflakes:
    enabled: false
    description: 'Analyze with pyflakes'
    required_executable: 'pyflakes'
    install_command: 'pip install pyflakes'
    include: '**/*.py'

  Pylint:
    enabled: true
    on_warn: fail
    description: 'Analyze with Pylint'
    required_executable: 'pylint'
    install_command: 'pip install pylint'
    flags:
      - '--msg-template="{path}:{line}:{C}: {msg} ({symbol})"'
      - '--reports=n'
      - '--persistent=n'
      - '--rcfile conf/pylintrc'
    include: '**/*.py'
    exclude: 'example'

  PythonFlake8:
    enabled: true
    on_warn: fail
    description: 'Analyze with flake8'
    required_executable: 'flake8'
    install_command: 'pip install flake8'
    include: '**/*.py'

  TrailingWhitespace:
    enabled: true
    on_warn: fail
    description: 'Check for trailing whitespace'
    required_executable: 'grep'
    flags: ['-IHn', "[ \t]$"]

  LineEndings:
    description: 'Check line endings'
    enabled: false
    eol: "\n"

  YamlLint:
    enabled: true
    description: 'Analyze with YAMLlint'
    required_executable: 'yamllint'
    flags: ['--format=parsable']
    install_command: 'pip install yamllint'
    include:
      - '**/*.yaml'
      - '**/*.yml'
    exclude:
      -servers/alg/vars/key.yml
      -servers/exams/main.yml
      -servers/exams/vars/vars.yml
      -servers/integrates/vars/vars.yml

  YamlSyntax:
    enabled: true
    description: 'Check YAML syntax'
    required_library: 'yaml'
    include:
      - '**/*.yaml'
      - '**/*.yml'

# Hooks that run after HEAD changes or a file is explicitly checked out.
PostCheckout:
  ALL:
    required: false
    quiet: false
    skip_file_checkout: true

  SubmoduleStatus:
    enabled: false
    description: 'Check submodule status'
    quiet: true
    recursive: false

# Hooks that run after a commit is created.
PostCommit:
  ALL:
    requires_files: false
    required: false
    quiet: false

  SubmoduleStatus:
    enabled: false
    description: 'Check submodule status'
    quiet: true
    recursive: false

# Hooks that run after `git merge` executes successfully (no merge conflicts).
PostMerge:
  ALL:
    requires_files: false
    quiet: false

  SubmoduleStatus:
    enabled: false
    description: 'Check submodule status'
    quiet: true
    recursive: false

# Hooks that run after a commit is modified by an amend or rebase.
PostRewrite:
  ALL:
    requires_files: false
    quiet: false

  SubmoduleStatus:
    enabled: false
    description: 'Check submodule status'
    quiet: true
    recursive: false

# Hooks that run during `git push`, after remote refs have been updated but
# before any objects have been transferred.
PrePush:
  ALL:
    requires_files: false
    required: false
    quiet: false

# Hooks that run during `git rebase`, before any commits are rebased.
# If a hook fails, the rebase is aborted.
PreRebase:
  ALL:
    requires_files: false
    required: false
    quiet: false

  MergedCommits:
    enabled: false
    description: 'Check for commits that have already been merged'
branches: ['master']
